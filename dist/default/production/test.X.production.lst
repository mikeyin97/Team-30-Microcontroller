

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 04 22:48:42 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56  0000                     
    57                           ; Version 1.40
    58                           ; Generated 01/12/2016 GMT
    59                           ; 
    60                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	mediumconst
    93  00FEAC                     __pmediumconst:
    94                           	opt stack 0
    95  00FEAC  00                 	db	0
    96  00FEAD                     _keys:
    97                           	opt stack 0
    98  00FEAD  31                 	db	49
    99  00FEAE  32                 	db	50
   100  00FEAF  33                 	db	51
   101  00FEB0  41                 	db	65
   102  00FEB1  34                 	db	52
   103  00FEB2  35                 	db	53
   104  00FEB3  36                 	db	54
   105  00FEB4  42                 	db	66
   106  00FEB5  37                 	db	55
   107  00FEB6  38                 	db	56
   108  00FEB7  39                 	db	57
   109  00FEB8  43                 	db	67
   110  00FEB9  2A                 	db	42
   111  00FEBA  30                 	db	48
   112  00FEBB  23                 	db	35
   113  00FEBC  44                 	db	68
   114  00FEBD  00                 	db	0
   115  00FEBE                     __end_of_keys:
   116                           	opt stack 0
   117  00FEBE                     _dpowers:
   118                           	opt stack 0
   119  00FEBE  0001               	dw	1
   120  00FEC0  000A               	dw	10
   121  00FEC2  0064               	dw	100
   122  00FEC4  03E8               	dw	1000
   123  00FEC6  2710               	dw	10000
   124  00FEC8                     __end_of_dpowers:
   125                           	opt stack 0
   126  00FEC8                     _hexpowers:
   127                           	opt stack 0
   128  00FEC8  0001               	dw	1
   129  00FECA  0010               	dw	16
   130  00FECC  0100               	dw	256
   131  00FECE  1000               	dw	4096
   132  00FED0                     __end_of_hexpowers:
   133                           	opt stack 0
   134  00FED0                     _happynewyear:
   135                           	opt stack 0
   136  00FED0  00                 	db	0
   137  00FED1  34                 	db	52
   138  00FED2  16                 	db	22
   139  00FED3  02                 	db	2
   140  00FED4  31                 	db	49
   141  00FED5  01                 	db	1
   142  00FED6  17                 	db	23
   143  00FED7                     __end_of_happynewyear:
   144                           	opt stack 0
   145  00FED7                     exp@coeff:
   146                           	opt stack 0
   147  00FED7  00                 	db	0
   148  00FED8  80                 	db	128
   149  00FED9  3F                 	db	63
   150  00FEDA  72                 	db	114
   151  00FEDB  31                 	db	49
   152  00FEDC  3F                 	db	63
   153  00FEDD  FE                 	db	254
   154  00FEDE  75                 	db	117
   155  00FEDF  3E                 	db	62
   156  00FEE0  58                 	db	88
   157  00FEE1  63                 	db	99
   158  00FEE2  3D                 	db	61
   159  00FEE3  95                 	db	149
   160  00FEE4  1D                 	db	29
   161  00FEE5  3C                 	db	60
   162  00FEE6  C5                 	db	197
   163  00FEE7  AE                 	db	174
   164  00FEE8  3A                 	db	58
   165  00FEE9  79                 	db	121
   166  00FEEA  21                 	db	33
   167  00FEEB  39                 	db	57
   168  00FEEC  94                 	db	148
   169  00FEED  80                 	db	128
   170  00FEEE  37                 	db	55
   171  00FEEF  93                 	db	147
   172  00FEF0  A7                 	db	167
   173  00FEF1  35                 	db	53
   174  00FEF2  56                 	db	86
   175  00FEF3  15                 	db	21
   176  00FEF4  34                 	db	52
   177  00FEF5                     __end_ofexp@coeff:
   178                           	opt stack 0
   179  00FEF5                     log@coeff:
   180                           	opt stack 0
   181  00FEF5  00                 	db	0
   182  00FEF6  00                 	db	0
   183  00FEF7  00                 	db	0
   184  00FEF8  00                 	db	0
   185  00FEF9  80                 	db	128
   186  00FEFA  3F                 	db	63
   187  00FEFB  F0                 	db	240
   188  00FEFC  FF                 	db	255
   189  00FEFD  BE                 	db	190
   190  00FEFE  E2                 	db	226
   191  00FEFF  A9                 	db	169
   192  00FF00  3E                 	db	62
   193  00FF01  83                 	db	131
   194  00FF02  76                 	db	118
   195  00FF03  BE                 	db	190
   196  00FF04  AE                 	db	174
   197  00FF05  2B                 	db	43
   198  00FF06  3E                 	db	62
   199  00FF07  3C                 	db	60
   200  00FF08  C3                 	db	195
   201  00FF09  BD                 	db	189
   202  00FF0A  D2                 	db	210
   203  00FF0B  13                 	db	19
   204  00FF0C  3D                 	db	61
   205  00FF0D  78                 	db	120
   206  00FF0E  D3                 	db	211
   207  00FF0F  BB                 	db	187
   208  00FF10                     __end_oflog@coeff:
   209                           	opt stack 0
   210  0000                     _ADCON0	set	4034
   211  0000                     _ADCON1	set	4033
   212  0000                     _LATA	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATD	set	3980
   216  0000                     _LATDbits	set	3980
   217  0000                     _LATE	set	3981
   218  0000                     _PORTB	set	3969
   219  0000                     _PORTBbits	set	3969
   220  0000                     _SSPADD	set	4040
   221  0000                     _SSPBUF	set	4041
   222  0000                     _SSPCON1	set	4038
   223  0000                     _SSPCON2	set	4037
   224  0000                     _SSPSTAT	set	4039
   225  0000                     _TRISA	set	3986
   226  0000                     _TRISB	set	3987
   227  0000                     _TRISC	set	3988
   228  0000                     _TRISD	set	3989
   229  0000                     _TRISE	set	3990
   230  0000                     _ACKDT	set	32301
   231  0000                     _ACKEN	set	32300
   232  0000                     _PEN	set	32298
   233  0000                     _RCEN	set	32299
   234  0000                     _RSEN	set	32297
   235  0000                     _SEN	set	32296
   236  0000                     _TRISC3	set	31907
   237  0000                     _TRISC4	set	31908
   238  0000                     _nRBPU	set	32655
   239  00FF10                     STR_6:
   240  00FF10  25                 	db	37
   241  00FF11  30                 	db	48	;'0'
   242  00FF12  32                 	db	50	;'2'
   243  00FF13  78                 	db	120	;'x'
   244  00FF14  3A                 	db	58	;':'
   245  00FF15  25                 	db	37
   246  00FF16  30                 	db	48	;'0'
   247  00FF17  32                 	db	50	;'2'
   248  00FF18  78                 	db	120	;'x'
   249  00FF19  3A                 	db	58	;':'
   250  00FF1A  25                 	db	37
   251  00FF1B  30                 	db	48	;'0'
   252  00FF1C  32                 	db	50	;'2'
   253  00FF1D  78                 	db	120	;'x'
   254  00FF1E  20                 	db	32
   255  00FF1F  53                 	db	83	;'S'
   256  00FF20  74                 	db	116	;'t'
   257  00FF21  61                 	db	97	;'a'
   258  00FF22  72                 	db	114	;'r'
   259  00FF23  74                 	db	116	;'t'
   260  00FF24  21                 	db	33
   261  00FF25  00                 	db	0
   262  00FF26                     STR_5:
   263  00FF26  25                 	db	37
   264  00FF27  30                 	db	48	;'0'
   265  00FF28  32                 	db	50	;'2'
   266  00FF29  78                 	db	120	;'x'
   267  00FF2A  2F                 	db	47
   268  00FF2B  25                 	db	37
   269  00FF2C  30                 	db	48	;'0'
   270  00FF2D  32                 	db	50	;'2'
   271  00FF2E  78                 	db	120	;'x'
   272  00FF2F  2F                 	db	47
   273  00FF30  25                 	db	37
   274  00FF31  30                 	db	48	;'0'
   275  00FF32  32                 	db	50	;'2'
   276  00FF33  78                 	db	120	;'x'
   277  00FF34  20                 	db	32
   278  00FF35  27                 	db	39
   279  00FF36  23                 	db	35
   280  00FF37  27                 	db	39
   281  00FF38  20                 	db	32
   282  00FF39  74                 	db	116	;'t'
   283  00FF3A  6F                 	db	111	;'o'
   284  00FF3B  00                 	db	0
   285  00FF3C                     STR_15:
   286  00FF3C  30                 	db	48	;'0'
   287  00FF3D  31                 	db	49	;'1'
   288  00FF3E  32                 	db	50	;'2'
   289  00FF3F  33                 	db	51	;'3'
   290  00FF40  34                 	db	52	;'4'
   291  00FF41  35                 	db	53	;'5'
   292  00FF42  36                 	db	54	;'6'
   293  00FF43  37                 	db	55	;'7'
   294  00FF44  38                 	db	56	;'8'
   295  00FF45  39                 	db	57	;'9'
   296  00FF46  61                 	db	97	;'a'
   297  00FF47  62                 	db	98	;'b'
   298  00FF48  63                 	db	99	;'c'
   299  00FF49  64                 	db	100	;'d'
   300  00FF4A  65                 	db	101	;'e'
   301  00FF4B  66                 	db	102	;'f'
   302  00FF4C  00                 	db	0
   303  00FF4D                     STR_14:
   304  00FF4D  45                 	db	69	;'E'
   305  00FF4E  6E                 	db	110	;'n'
   306  00FF4F  64                 	db	100	;'d'
   307  00FF50  2D                 	db	45
   308  00FF51  41                 	db	65	;'A'
   309  00FF52  20                 	db	32
   310  00FF53  74                 	db	116	;'t'
   311  00FF54  6F                 	db	111	;'o'
   312  00FF55  20                 	db	32
   313  00FF56  67                 	db	103	;'g'
   314  00FF57  6F                 	db	111	;'o'
   315  00FF58  20                 	db	32
   316  00FF59  62                 	db	98	;'b'
   317  00FF5A  61                 	db	97	;'a'
   318  00FF5B  63                 	db	99	;'c'
   319  00FF5C  6B                 	db	107	;'k'
   320  00FF5D  00                 	db	0
   321  00FF5E                     STR_8:
   322  00FF5E  43                 	db	67	;'C'
   323  00FF5F  6F                 	db	111	;'o'
   324  00FF60  75                 	db	117	;'u'
   325  00FF61  6E                 	db	110	;'n'
   326  00FF62  74                 	db	116	;'t'
   327  00FF63  20                 	db	32
   328  00FF64  53                 	db	83	;'S'
   329  00FF65  6F                 	db	111	;'o'
   330  00FF66  72                 	db	114	;'r'
   331  00FF67  74                 	db	116	;'t'
   332  00FF68  65                 	db	101	;'e'
   333  00FF69  64                 	db	100	;'d'
   334  00FF6A  3A                 	db	58	;':'
   335  00FF6B  31                 	db	49	;'1'
   336  00FF6C  30                 	db	48	;'0'
   337  00FF6D  00                 	db	0
   338  00FF6E                     STR_10:
   339  00FF6E  43                 	db	67	;'C'
   340  00FF6F  61                 	db	97	;'a'
   341  00FF70  74                 	db	116	;'t'
   342  00FF71  33                 	db	51	;'3'
   343  00FF72  3A                 	db	58	;':'
   344  00FF73  31                 	db	49	;'1'
   345  00FF74  20                 	db	32
   346  00FF75  20                 	db	32
   347  00FF76  20                 	db	32
   348  00FF77  43                 	db	67	;'C'
   349  00FF78  61                 	db	97	;'a'
   350  00FF79  74                 	db	116	;'t'
   351  00FF7A  34                 	db	52	;'4'
   352  00FF7B  3A                 	db	58	;':'
   353  00FF7C  30                 	db	48	;'0'
   354  00FF7D  00                 	db	0
   355  00FF7E                     STR_12:
   356  00FF7E  43                 	db	67	;'C'
   357  00FF7F  61                 	db	97	;'a'
   358  00FF80  74                 	db	116	;'t'
   359  00FF81  37                 	db	55	;'7'
   360  00FF82  3A                 	db	58	;':'
   361  00FF83  31                 	db	49	;'1'
   362  00FF84  20                 	db	32
   363  00FF85  20                 	db	32
   364  00FF86  20                 	db	32
   365  00FF87  43                 	db	67	;'C'
   366  00FF88  61                 	db	97	;'a'
   367  00FF89  74                 	db	116	;'t'
   368  00FF8A  38                 	db	56	;'8'
   369  00FF8B  3A                 	db	58	;':'
   370  00FF8C  30                 	db	48	;'0'
   371  00FF8D  00                 	db	0
   372  00FF8E                     STR_11:
   373  00FF8E  43                 	db	67	;'C'
   374  00FF8F  61                 	db	97	;'a'
   375  00FF90  74                 	db	116	;'t'
   376  00FF91  35                 	db	53	;'5'
   377  00FF92  3A                 	db	58	;':'
   378  00FF93  33                 	db	51	;'3'
   379  00FF94  20                 	db	32
   380  00FF95  20                 	db	32
   381  00FF96  20                 	db	32
   382  00FF97  43                 	db	67	;'C'
   383  00FF98  61                 	db	97	;'a'
   384  00FF99  74                 	db	116	;'t'
   385  00FF9A  36                 	db	54	;'6'
   386  00FF9B  3A                 	db	58	;':'
   387  00FF9C  31                 	db	49	;'1'
   388  00FF9D  00                 	db	0
   389  00FF9E                     STR_9:
   390  00FF9E  43                 	db	67	;'C'
   391  00FF9F  61                 	db	97	;'a'
   392  00FFA0  74                 	db	116	;'t'
   393  00FFA1  31                 	db	49	;'1'
   394  00FFA2  3A                 	db	58	;':'
   395  00FFA3  33                 	db	51	;'3'
   396  00FFA4  20                 	db	32
   397  00FFA5  20                 	db	32
   398  00FFA6  20                 	db	32
   399  00FFA7  43                 	db	67	;'C'
   400  00FFA8  61                 	db	97	;'a'
   401  00FFA9  74                 	db	116	;'t'
   402  00FFAA  32                 	db	50	;'2'
   403  00FFAB  3A                 	db	58	;':'
   404  00FFAC  34                 	db	52	;'4'
   405  00FFAD  00                 	db	0
   406  00FFAE                     STR_2:
   407  00FFAE  74                 	db	116	;'t'
   408  00FFAF  68                 	db	104	;'h'
   409  00FFB0  65                 	db	101	;'e'
   410  00FFB1  20                 	db	32
   411  00FFB2  6F                 	db	111	;'o'
   412  00FFB3  70                 	db	112	;'p'
   413  00FFB4  65                 	db	101	;'e'
   414  00FFB5  72                 	db	114	;'r'
   415  00FFB6  61                 	db	97	;'a'
   416  00FFB7  74                 	db	116	;'t'
   417  00FFB8  69                 	db	105	;'i'
   418  00FFB9  6F                 	db	111	;'o'
   419  00FFBA  6E                 	db	110	;'n'
   420  00FFBB  21                 	db	33
   421  00FFBC  00                 	db	0
   422  00FFBD                     STR_13:
   423  00FFBD  54                 	db	84	;'T'
   424  00FFBE  69                 	db	105	;'i'
   425  00FFBF  6D                 	db	109	;'m'
   426  00FFC0  65                 	db	101	;'e'
   427  00FFC1  3A                 	db	58	;':'
   428  00FFC2  20                 	db	32
   429  00FFC3  25                 	db	37
   430  00FFC4  64                 	db	100	;'d'
   431  00FFC5  3A                 	db	58	;':'
   432  00FFC6  25                 	db	37
   433  00FFC7  64                 	db	100	;'d'
   434  00FFC8  3A                 	db	58	;':'
   435  00FFC9  25                 	db	37
   436  00FFCA  64                 	db	100	;'d'
   437  00FFCB  00                 	db	0
   438  00FFCC                     STR_1:
   439  00FFCC  59                 	db	89	;'Y'
   440  00FFCD  6F                 	db	111	;'o'
   441  00FFCE  75                 	db	117	;'u'
   442  00FFCF  20                 	db	32
   443  00FFD0  68                 	db	104	;'h'
   444  00FFD1  61                 	db	97	;'a'
   445  00FFD2  76                 	db	118	;'v'
   446  00FFD3  65                 	db	101	;'e'
   447  00FFD4  20                 	db	32
   448  00FFD5  62                 	db	98	;'b'
   449  00FFD6  65                 	db	101	;'e'
   450  00FFD7  67                 	db	103	;'g'
   451  00FFD8  75                 	db	117	;'u'
   452  00FFD9  6E                 	db	110	;'n'
   453  00FFDA  00                 	db	0
   454  00FFDB                     STR_7:
   455  00FFDB  4E                 	db	78	;'N'
   456  00FFDC  65                 	db	101	;'e'
   457  00FFDD  78                 	db	120	;'x'
   458  00FFDE  74                 	db	116	;'t'
   459  00FFDF  20                 	db	32
   460  00FFE0  50                 	db	80	;'P'
   461  00FFE1  61                 	db	97	;'a'
   462  00FFE2  67                 	db	103	;'g'
   463  00FFE3  65                 	db	101	;'e'
   464  00FFE4  3A                 	db	58	;':'
   465  00FFE5  20                 	db	32
   466  00FFE6  41                 	db	65	;'A'
   467  00FFE7  00                 	db	0
   468  00FFE8                     STR_4:
   469  00FFE8  27                 	db	39
   470  00FFE9  2A                 	db	42
   471  00FFEA  27                 	db	39
   472  00FFEB  20                 	db	32
   473  00FFEC  74                 	db	116	;'t'
   474  00FFED  6F                 	db	111	;'o'
   475  00FFEE  20                 	db	32
   476  00FFEF  53                 	db	83	;'S'
   477  00FFF0  54                 	db	84	;'T'
   478  00FFF1  4F                 	db	79	;'O'
   479  00FFF2  50                 	db	80	;'P'
   480  00FFF3  00                 	db	0
   481  00FFF4                     STR_3:
   482  00FFF4  53                 	db	83	;'S'
   483  00FFF5  6F                 	db	111	;'o'
   484  00FFF6  72                 	db	114	;'r'
   485  00FFF7  74                 	db	116	;'t'
   486  00FFF8  69                 	db	105	;'i'
   487  00FFF9  6E                 	db	110	;'n'
   488  00FFFA  67                 	db	103	;'g'
   489  00FFFB  2E                 	db	46
   490  00FFFC  2E                 	db	46
   491  00FFFD  2E                 	db	46
   492  00FFFE  00                 	db	0
   493                           
   494                           ; #config settings
   495  00FFFF  00                 	db	0	; dummy byte at the end
   496  0000                     
   497                           	psect	cinit
   498  00E1F6                     __pcinit:
   499                           	opt stack 0
   500  00E1F6                     start_initialization:
   501                           	opt stack 0
   502  00E1F6                     __initialization:
   503                           	opt stack 0
   504                           
   505                           ; Clear objects allocated to COMRAM (2 bytes)
   506  00E1F6  6A7B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   507  00E1F8  6A7A               	clrf	__pbssCOMRAM& (0+255),c
   508  00E1FA                     end_of_initialization:
   509                           	opt stack 0
   510  00E1FA                     __end_of__initialization:
   511                           	opt stack 0
   512  00E1FA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   513  00E1FC  6EF8               	movwf	tblptru,c
   514  00E1FE  0100               	movlb	0
   515  00E200  EF76  F079         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           
   518                           	psect	bssCOMRAM
   519  00007A                     __pbssCOMRAM:
   520                           	opt stack 0
   521  00007A                     _errno:
   522                           	opt stack 0
   523  00007A                     	ds	2
   524                           tblptru	equ	0xFF8
   525                           
   526                           	psect	cstackBANK0
   527  000080                     __pcstackBANK0:
   528                           	opt stack 0
   529  000080                     time_difference@hr1:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x0
   533  000080                     	ds	2
   534  000082                     time_difference@hr2:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x2
   538  000082                     	ds	2
   539  000084                     time_difference@min1:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x4
   543  000084                     	ds	2
   544  000086                     time_difference@min2:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x6
   548  000086                     	ds	2
   549  000088                     time_difference@s1:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x8
   553  000088                     	ds	2
   554  00008A                     time_difference@s2:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0xA
   558  00008A                     	ds	2
   559  00008C                     time_difference@d1:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0xC
   563  00008C                     	ds	1
   564  00008D                     time_difference@d2:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0xD
   568  00008D                     	ds	1
   569  00008E                     time_difference@d3:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0xE
   573  00008E                     	ds	1
   574  00008F                     main@time:
   575                           	opt stack 0
   576                           
   577                           ; 7 bytes @ 0xF
   578  00008F                     	ds	7
   579  000096                     main@start_time:
   580                           	opt stack 0
   581                           
   582                           ; 7 bytes @ 0x16
   583  000096                     	ds	7
   584  00009D                     main@end_time:
   585                           	opt stack 0
   586                           
   587                           ; 7 bytes @ 0x1D
   588  00009D                     	ds	7
   589  0000A4                     main@d:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x24
   593  0000A4                     	ds	2
   594                           tblptru	equ	0xFF8
   595                           
   596                           	psect	cstackCOMRAM
   597  000001                     __pcstackCOMRAM:
   598                           	opt stack 0
   599  000001                     ??_isdigit:
   600  000001                     ??_I2C_Master_Wait:
   601  000001                     ?___wmul:
   602                           	opt stack 0
   603  000001                     ?___awmod:
   604                           	opt stack 0
   605  000001                     ?___lwdiv:
   606                           	opt stack 0
   607  000001                     ?___ftpack:
   608                           	opt stack 0
   609  000001                     ?_frexp:
   610                           	opt stack 0
   611  000001                     ?___ftneg:
   612                           	opt stack 0
   613  000001                     ?___lldiv:
   614                           	opt stack 0
   615  000001                     lcdNibble@temp:
   616                           	opt stack 0
   617  000001                     delay@seconds:
   618                           	opt stack 0
   619  000001                     ___wmul@multiplier:
   620                           	opt stack 0
   621  000001                     ___awmod@dividend:
   622                           	opt stack 0
   623  000001                     ___lwdiv@dividend:
   624                           	opt stack 0
   625  000001                     ___ftpack@arg:
   626                           	opt stack 0
   627  000001                     ___ftge@ff1:
   628                           	opt stack 0
   629  000001                     ___ftneg@f1:
   630                           	opt stack 0
   631  000001                     frexp@value:
   632                           	opt stack 0
   633  000001                     ___lldiv@dividend:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x0
   637  000001                     	ds	1
   638  000002                     lcdNibble@data:
   639                           	opt stack 0
   640  000002                     I2C_Master_Read@a:
   641                           	opt stack 0
   642  000002                     _isdigit$597:
   643                           	opt stack 0
   644  000002                     I2C_Master_Write@d:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1
   648  000002                     	ds	1
   649  000003                     ??_delay:
   650  000003                     lcdInst@data:
   651                           	opt stack 0
   652  000003                     putch@data:
   653                           	opt stack 0
   654  000003                     I2C_Master_Read@temp:
   655                           	opt stack 0
   656  000003                     isdigit@c:
   657                           	opt stack 0
   658  000003                     ___wmul@multiplicand:
   659                           	opt stack 0
   660  000003                     ___awmod@divisor:
   661                           	opt stack 0
   662  000003                     ___lwdiv@divisor:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x2
   666  000003                     	ds	1
   667  000004                     ??_initLCD:
   668  000004                     ___ftpack@exp:
   669                           	opt stack 0
   670  000004                     update_time@time:
   671                           	opt stack 0
   672  000004                     delay@i:
   673                           	opt stack 0
   674  000004                     frexp@eptr:
   675                           	opt stack 0
   676  000004                     ___ftge@ff2:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x3
   680  000004                     	ds	1
   681  000005                     ___awmod@counter:
   682                           	opt stack 0
   683  000005                     ___ftpack@sign:
   684                           	opt stack 0
   685  000005                     ___wmul@product:
   686                           	opt stack 0
   687  000005                     ___lwdiv@quotient:
   688                           	opt stack 0
   689  000005                     ___lldiv@divisor:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x4
   693  000005                     	ds	1
   694  000006                     ??___ftpack:
   695  000006                     ??_frexp:
   696  000006                     update_time@i:
   697                           	opt stack 0
   698  000006                     delay@i_235:
   699                           	opt stack 0
   700  000006                     ___awmod@sign:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x5
   704  000006                     	ds	1
   705  000007                     ??___ftge:
   706  000007                     ?___awdiv:
   707                           	opt stack 0
   708  000007                     ___lwdiv@counter:
   709                           	opt stack 0
   710  000007                     ___awdiv@dividend:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x6
   714  000007                     	ds	1
   715  000008                     ?___lwmod:
   716                           	opt stack 0
   717  000008                     ___lwmod@dividend:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x7
   721  000008                     	ds	1
   722  000009                     ?___ftdiv:
   723                           	opt stack 0
   724  000009                     ?___awtoft:
   725                           	opt stack 0
   726  000009                     ?___lltoft:
   727                           	opt stack 0
   728  000009                     ___awdiv@divisor:
   729                           	opt stack 0
   730  000009                     ___awtoft@c:
   731                           	opt stack 0
   732  000009                     ___ftdiv@f1:
   733                           	opt stack 0
   734  000009                     ___lldiv@quotient:
   735                           	opt stack 0
   736  000009                     ___lltoft@c:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x8
   740  000009                     	ds	1
   741  00000A                     ___lwmod@divisor:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x9
   745  00000A                     	ds	1
   746  00000B                     ___awdiv@counter:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0xA
   750  00000B                     	ds	1
   751  00000C                     ___awdiv@sign:
   752                           	opt stack 0
   753  00000C                     ___awtoft@sign:
   754                           	opt stack 0
   755  00000C                     ___lwmod@counter:
   756                           	opt stack 0
   757  00000C                     ___ftdiv@f2:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0xB
   761  00000C                     	ds	1
   762  00000D                     ??___lltoft:
   763  00000D                     ?_printf:
   764                           	opt stack 0
   765  00000D                     ?___ftmul:
   766                           	opt stack 0
   767  00000D                     ___lldiv@counter:
   768                           	opt stack 0
   769  00000D                     printf@f:
   770                           	opt stack 0
   771  00000D                     ___awdiv@quotient:
   772                           	opt stack 0
   773  00000D                     ___ftmul@f1:
   774                           	opt stack 0
   775                           
   776                           ; 3 bytes @ 0xC
   777  00000D                     	ds	1
   778  00000E                     I2C_Master_Init@c:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0xD
   782  00000E                     	ds	1
   783  00000F                     ??___ftdiv:
   784                           
   785                           ; 1 bytes @ 0xE
   786  00000F                     	ds	1
   787  000010                     ___ftmul@f2:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0xF
   791  000010                     	ds	1
   792  000011                     ___lltoft@exp:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x10
   796  000011                     	ds	1
   797  000012                     ??_I2C_Master_Init:
   798  000012                     ___ftdiv@cntr:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x11
   802  000012                     	ds	1
   803  000013                     ??___ftmul:
   804  000013                     ___ftdiv@f3:
   805                           	opt stack 0
   806                           
   807                           ; 3 bytes @ 0x12
   808  000013                     	ds	2
   809  000015                     ??_printf:
   810                           
   811                           ; 1 bytes @ 0x14
   812  000015                     	ds	1
   813  000016                     ___ftdiv@exp:
   814                           	opt stack 0
   815  000016                     ___ftmul@exp:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x15
   819  000016                     	ds	1
   820  000017                     ___ftdiv@sign:
   821                           	opt stack 0
   822  000017                     ___ftmul@f3_as_product:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x16
   826  000017                     	ds	2
   827  000019                     printf@cp:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x18
   831  000019                     	ds	1
   832  00001A                     ___ftmul@cntr:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x19
   836  00001A                     	ds	1
   837  00001B                     printf@idx:
   838                           	opt stack 0
   839  00001B                     ___ftmul@sign:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x1A
   843  00001B                     	ds	1
   844  00001C                     ?___ftadd:
   845                           	opt stack 0
   846  00001C                     printf@ap:
   847                           	opt stack 0
   848  00001C                     ___ftadd@f1:
   849                           	opt stack 0
   850                           
   851                           ; 3 bytes @ 0x1B
   852  00001C                     	ds	2
   853  00001E                     printf@len:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x1D
   857  00001E                     	ds	1
   858  00001F                     ___ftadd@f2:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x1E
   862  00001F                     	ds	1
   863  000020                     printf@prec:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x1F
   867  000020                     	ds	1
   868  000021                     printf@val:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x20
   872  000021                     	ds	1
   873  000022                     ??___ftadd:
   874                           
   875                           ; 1 bytes @ 0x21
   876  000022                     	ds	1
   877  000023                     printf@flag:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x22
   881  000023                     	ds	1
   882  000024                     printf@width:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x23
   886  000024                     	ds	1
   887  000025                     ___ftadd@sign:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x24
   891  000025                     	ds	1
   892  000026                     printf@c:
   893                           	opt stack 0
   894  000026                     ___ftadd@exp2:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x25
   898  000026                     	ds	1
   899  000027                     ___ftadd@exp1:
   900                           	opt stack 0
   901  000027                     stand_by@time:
   902                           	opt stack 0
   903  000027                     message@line1:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x26
   907  000027                     	ds	1
   908  000028                     ?___ftsub:
   909                           	opt stack 0
   910  000028                     ?_eval_poly:
   911                           	opt stack 0
   912  000028                     ?___fttol:
   913                           	opt stack 0
   914  000028                     ___ftsub@f1:
   915                           	opt stack 0
   916  000028                     ___fttol@f1:
   917                           	opt stack 0
   918  000028                     eval_poly@x:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x27
   922  000028                     	ds	1
   923  000029                     ??_stand_by:
   924  000029                     message@line2:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x28
   928  000029                     	ds	2
   929  00002B                     end_phase@time:
   930                           	opt stack 0
   931  00002B                     eval_poly@d:
   932                           	opt stack 0
   933  00002B                     ___ftsub@f2:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x2A
   937  00002B                     	ds	1
   938  00002C                     ??___fttol:
   939                           
   940                           ; 1 bytes @ 0x2B
   941  00002C                     	ds	1
   942  00002D                     ??_end_phase:
   943  00002D                     eval_poly@n:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x2C
   947  00002D                     	ds	1
   948  00002E                     
   949                           ; 1 bytes @ 0x2D
   950  00002E                     	ds	1
   951  00002F                     ??_eval_poly:
   952  00002F                     end_phase@hours:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x2E
   956  00002F                     	ds	2
   957  000031                     ___fttol@sign1:
   958                           	opt stack 0
   959  000031                     end_phase@min:
   960                           	opt stack 0
   961  000031                     eval_poly@res:
   962                           	opt stack 0
   963                           
   964                           ; 3 bytes @ 0x30
   965  000031                     	ds	1
   966  000032                     ___fttol@lval:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x31
   970  000032                     	ds	1
   971  000033                     end_phase@sec:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x32
   975  000033                     	ds	1
   976  000034                     ?_log:
   977                           	opt stack 0
   978  000034                     ?_ldexp:
   979                           	opt stack 0
   980  000034                     ldexp@value:
   981                           	opt stack 0
   982  000034                     log@x:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x33
   986  000034                     	ds	1
   987  000035                     end_phase@pg:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x34
   991  000035                     	ds	1
   992  000036                     ___fttol@exp1:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x35
   996  000036                     	ds	1
   997  000037                     ?___altoft:
   998                           	opt stack 0
   999  000037                     ldexp@newexp:
  1000                           	opt stack 0
  1001  000037                     log@exponent:
  1002                           	opt stack 0
  1003  000037                     ___altoft@c:
  1004                           	opt stack 0
  1005                           
  1006                           ; 4 bytes @ 0x36
  1007  000037                     	ds	2
  1008  000039                     ??_ldexp:
  1009                           
  1010                           ; 1 bytes @ 0x38
  1011  000039                     	ds	2
  1012  00003B                     ??___altoft:
  1013                           
  1014                           ; 1 bytes @ 0x3A
  1015  00003B                     	ds	4
  1016  00003F                     ___altoft@exp:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x3E
  1020  00003F                     	ds	1
  1021  000040                     ___altoft@sign:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x3F
  1025  000040                     	ds	1
  1026  000041                     ?_floor:
  1027                           	opt stack 0
  1028  000041                     floor@x:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x40
  1032  000041                     	ds	3
  1033  000044                     floor@i:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x43
  1037  000044                     	ds	3
  1038  000047                     floor@expon:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x46
  1042  000047                     	ds	2
  1043  000049                     ?_exp:
  1044                           	opt stack 0
  1045  000049                     exp@x:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x48
  1049  000049                     	ds	3
  1050  00004C                     _exp$1019:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x4B
  1054  00004C                     	ds	3
  1055  00004F                     exp@exponent:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x4E
  1059  00004F                     	ds	2
  1060  000051                     exp@sign:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x50
  1064  000051                     	ds	1
  1065  000052                     ?_pow:
  1066                           	opt stack 0
  1067  000052                     pow@x:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x51
  1071  000052                     	ds	3
  1072  000055                     pow@y:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0x54
  1076  000055                     	ds	3
  1077  000058                     _pow$1017:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x57
  1081  000058                     	ds	3
  1082  00005B                     _pow$1018:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x5A
  1086  00005B                     	ds	3
  1087  00005E                     pow@sign:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x5D
  1091  00005E                     	ds	1
  1092  00005F                     pow@yi:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x5E
  1096  00005F                     	ds	4
  1097  000063                     ?_dec_to_hex:
  1098                           	opt stack 0
  1099  000063                     dec_to_hex@num:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x62
  1103  000063                     	ds	2
  1104  000065                     _dec_to_hex$1015:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x64
  1108  000065                     	ds	3
  1109  000068                     _dec_to_hex$1016:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x67
  1113  000068                     	ds	3
  1114  00006B                     dec_to_hex@temp:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x6A
  1118  00006B                     	ds	2
  1119  00006D                     dec_to_hex@i:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x6C
  1123  00006D                     	ds	2
  1124  00006F                     dec_to_hex@hexnum:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x6E
  1128  00006F                     	ds	2
  1129  000071                     dec_to_hex@quotient:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x70
  1133  000071                     	ds	2
  1134  000073                     ?_time_difference:
  1135                           	opt stack 0
  1136  000073                     time_difference@time1:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x72
  1140  000073                     	ds	2
  1141  000075                     time_difference@time2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x74
  1145  000075                     	ds	2
  1146  000077                     ??_time_difference:
  1147                           
  1148                           ; 1 bytes @ 0x76
  1149  000077                     	ds	1
  1150  000078                     ??_main:
  1151                           
  1152                           ; 1 bytes @ 0x77
  1153  000078                     	ds	2
  1154                           tblptru	equ	0xFF8
  1155                           
  1156 ;;
  1157 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1158 ;;
  1159 ;; *************** function _main *****************
  1160 ;; Defined at:
  1161 ;;		line 38 in file "main.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  end_time        7   29[BANK0 ] unsigned char [7]
  1166 ;;  start_time      7   22[BANK0 ] unsigned char [7]
  1167 ;;  time            7   15[BANK0 ] unsigned char [7]
  1168 ;;  d               2   36[BANK0 ] int 
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Totals:         2      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;Total ram usage:       25 bytes
  1183 ;; Hardware stack levels required when called:    7
  1184 ;; This function calls:
  1185 ;;		_I2C_Master_Init
  1186 ;;		_delay
  1187 ;;		_end_phase
  1188 ;;		_initLCD
  1189 ;;		_lcdInst
  1190 ;;		_printf
  1191 ;;		_stand_by
  1192 ;;		_time_difference
  1193 ;;		_update_time
  1194 ;; This function is called by:
  1195 ;;		Startup code after reset
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           	psect	text0
  1200  00F2EC                     __ptext0:
  1201                           	opt stack 0
  1202  00F2EC                     _main:
  1203                           	opt stack 24
  1204                           
  1205                           ;main.c: 42: TRISA = 0xFF;
  1206                           
  1207                           ;incstack = 0
  1208  00F2EC  6892               	setf	3986,c	;volatile
  1209                           
  1210                           ;main.c: 43: TRISB = 0xFF;
  1211  00F2EE  6893               	setf	3987,c	;volatile
  1212                           
  1213                           ;main.c: 44: TRISC = 0x00;
  1214  00F2F0  0E00               	movlw	0
  1215  00F2F2  6E94               	movwf	3988,c	;volatile
  1216                           
  1217                           ;main.c: 45: TRISD = 0x00;
  1218  00F2F4  0E00               	movlw	0
  1219  00F2F6  6E95               	movwf	3989,c	;volatile
  1220                           
  1221                           ;main.c: 46: TRISE = 0x00;
  1222  00F2F8  0E00               	movlw	0
  1223  00F2FA  6E96               	movwf	3990,c	;volatile
  1224                           
  1225                           ;main.c: 48: LATA = 0x00;
  1226  00F2FC  0E00               	movlw	0
  1227  00F2FE  6E89               	movwf	3977,c	;volatile
  1228                           
  1229                           ;main.c: 49: LATB = 0x00;
  1230  00F300  0E00               	movlw	0
  1231  00F302  6E8A               	movwf	3978,c	;volatile
  1232                           
  1233                           ;main.c: 50: LATC = 0x00;
  1234  00F304  0E00               	movlw	0
  1235  00F306  6E8B               	movwf	3979,c	;volatile
  1236                           
  1237                           ;main.c: 51: LATD = 0x00;
  1238  00F308  0E00               	movlw	0
  1239  00F30A  6E8C               	movwf	3980,c	;volatile
  1240                           
  1241                           ;main.c: 52: LATE = 0x00;
  1242  00F30C  0E00               	movlw	0
  1243  00F30E  6E8D               	movwf	3981,c	;volatile
  1244                           
  1245                           ;main.c: 54: ADCON0 = 0x00;
  1246  00F310  0E00               	movlw	0
  1247  00F312  6EC2               	movwf	4034,c	;volatile
  1248                           
  1249                           ;main.c: 55: ADCON1 = 0xFF;
  1250  00F314  68C1               	setf	4033,c	;volatile
  1251                           
  1252                           ;main.c: 57: nRBPU = 0;
  1253  00F316  9EF1               	bcf	intcon2,7,c	;volatile
  1254                           
  1255                           ;main.c: 61: initLCD();
  1256  00F318  ECE4  F071         	call	_initLCD	;wreg free
  1257                           
  1258                           ;main.c: 62: lcdInst(0b00000001);;
  1259  00F31C  0E01               	movlw	1
  1260  00F31E  ECEF  F070         	call	_lcdInst
  1261                           
  1262                           ;main.c: 63: unsigned char time[7];
  1263                           ;main.c: 64: unsigned char start_time[7];
  1264                           ;main.c: 65: unsigned char end_time[7];
  1265                           ;main.c: 67: I2C_Master_Init(10000);
  1266  00F322  0E10               	movlw	16
  1267  00F324  6E0E               	movwf	I2C_Master_Init@c,c
  1268  00F326  0E27               	movlw	39
  1269  00F328  6E0F               	movwf	I2C_Master_Init@c+1,c
  1270  00F32A  0E00               	movlw	0
  1271  00F32C  6E10               	movwf	I2C_Master_Init@c+2,c
  1272  00F32E  0E00               	movlw	0
  1273  00F330  6E11               	movwf	I2C_Master_Init@c+3,c
  1274  00F332  EC5A  F072         	call	_I2C_Master_Init	;wreg free
  1275                           
  1276                           ;main.c: 72: lcdInst(0b00000001);;
  1277  00F336  0E01               	movlw	1
  1278  00F338  ECEF  F070         	call	_lcdInst
  1279                           
  1280                           ;main.c: 73: initLCD();
  1281  00F33C  ECE4  F071         	call	_initLCD	;wreg free
  1282                           
  1283                           ;main.c: 74: lcdInst(0b10000000);;
  1284  00F340  0E80               	movlw	128
  1285  00F342  ECEF  F070         	call	_lcdInst
  1286                           
  1287                           ;main.c: 75: while (PORTBbits.RB1 == 0 || keys[(PORTB & 0xF0)>>4] != '#') {
  1288  00F346  D006               	goto	l3239
  1289  00F348                     l3237:
  1290                           
  1291                           ;main.c: 78: stand_by(time);
  1292  00F348  0E8F               	movlw	low main@time
  1293  00F34A  6E27               	movwf	stand_by@time,c
  1294  00F34C  0E00               	movlw	high main@time
  1295  00F34E  6E28               	movwf	stand_by@time+1,c
  1296  00F350  ECCC  F074         	call	_stand_by	;wreg free
  1297  00F354                     l3239:
  1298  00F354  A281               	btfss	3969,1,c	;volatile
  1299  00F356  D7F8               	goto	l3237
  1300  00F358  3881               	swapf	3969,w,c	;volatile
  1301  00F35A  0B0F               	andlw	15
  1302  00F35C  0B0F               	andlw	15
  1303  00F35E  6E78               	movwf	??_main& (0+255),c
  1304  00F360  6A79               	clrf	(??_main+1)& (0+255),c
  1305  00F362  0EAD               	movlw	low _keys
  1306  00F364  2478               	addwf	??_main,w,c
  1307  00F366  6EF6               	movwf	tblptrl,c
  1308  00F368  0EFE               	movlw	high _keys
  1309  00F36A  2079               	addwfc	??_main+1,w,c
  1310  00F36C  6EF7               	movwf	tblptrh,c
  1311  00F36E                     	if	0	;There are less than 3 active tblptr bytes
  1312  00F36E                     	endif
  1313  00F36E  0008               	tblrd		*
  1314  00F370  50F5               	movf	tablat,w,c
  1315  00F372  0A23               	xorlw	35
  1316  00F374  A4D8               	btfss	status,2,c
  1317  00F376  D7E8               	goto	l3237
  1318                           
  1319                           ;main.c: 79: }
  1320                           ;main.c: 80: update_time(start_time);
  1321  00F378  0E96               	movlw	low main@start_time
  1322  00F37A  6E04               	movwf	update_time@time,c
  1323  00F37C  0E00               	movlw	high main@start_time
  1324  00F37E  6E05               	movwf	update_time@time+1,c
  1325  00F380  ECED  F072         	call	_update_time	;wreg free
  1326                           
  1327                           ;main.c: 81: lcdInst(0b00000001);;
  1328  00F384  0E01               	movlw	1
  1329  00F386  ECEF  F070         	call	_lcdInst
  1330                           
  1331                           ;main.c: 82: initLCD();
  1332  00F38A  ECE4  F071         	call	_initLCD	;wreg free
  1333                           
  1334                           ;main.c: 83: lcdInst(0b10000000);;
  1335  00F38E  0E80               	movlw	128
  1336  00F390  ECEF  F070         	call	_lcdInst
  1337                           
  1338                           ;main.c: 84: printf("You have begun");
  1339  00F394  0ECC               	movlw	low STR_1
  1340  00F396  6E0D               	movwf	printf@f,c
  1341  00F398  0EFF               	movlw	high STR_1
  1342  00F39A  6E0E               	movwf	printf@f+1,c
  1343  00F39C  EC99  F07D         	call	_printf	;wreg free
  1344                           
  1345                           ;main.c: 85: lcdInst(0b11000000);;
  1346  00F3A0  0EC0               	movlw	192
  1347  00F3A2  ECEF  F070         	call	_lcdInst
  1348                           
  1349                           ;main.c: 86: printf("the operation!");
  1350  00F3A6  0EAE               	movlw	low STR_2
  1351  00F3A8  6E0D               	movwf	printf@f,c
  1352  00F3AA  0EFF               	movlw	high STR_2
  1353  00F3AC  6E0E               	movwf	printf@f+1,c
  1354  00F3AE  EC99  F07D         	call	_printf	;wreg free
  1355                           
  1356                           ;main.c: 87: delay(3);
  1357  00F3B2  0E00               	movlw	0
  1358  00F3B4  6E02               	movwf	delay@seconds+1,c
  1359  00F3B6  0E03               	movlw	3
  1360  00F3B8  6E01               	movwf	delay@seconds,c
  1361  00F3BA  ECC2  F071         	call	_delay	;wreg free
  1362                           
  1363                           ;main.c: 88: lcdInst(0b00000001);;
  1364  00F3BE  0E01               	movlw	1
  1365  00F3C0  ECEF  F070         	call	_lcdInst
  1366                           
  1367                           ;main.c: 89: initLCD();
  1368  00F3C4  ECE4  F071         	call	_initLCD	;wreg free
  1369                           
  1370                           ;main.c: 90: lcdInst(0b10000000);;
  1371  00F3C8  0E80               	movlw	128
  1372  00F3CA  ECEF  F070         	call	_lcdInst
  1373                           
  1374                           ;main.c: 91: printf("Sorting...");
  1375  00F3CE  0EF4               	movlw	low STR_3
  1376  00F3D0  6E0D               	movwf	printf@f,c
  1377  00F3D2  0EFF               	movlw	high STR_3
  1378  00F3D4  6E0E               	movwf	printf@f+1,c
  1379  00F3D6  EC99  F07D         	call	_printf	;wreg free
  1380                           
  1381                           ;main.c: 92: lcdInst(0b11000000);;
  1382  00F3DA  0EC0               	movlw	192
  1383  00F3DC  ECEF  F070         	call	_lcdInst
  1384                           
  1385                           ;main.c: 93: printf("'*' to STOP");
  1386  00F3E0  0EE8               	movlw	low STR_4
  1387  00F3E2  6E0D               	movwf	printf@f,c
  1388  00F3E4  0EFF               	movlw	high STR_4
  1389  00F3E6  6E0E               	movwf	printf@f+1,c
  1390  00F3E8  EC99  F07D         	call	_printf	;wreg free
  1391  00F3EC                     l74:
  1392  00F3EC  A281               	btfss	3969,1,c	;volatile
  1393  00F3EE  D7FE               	goto	l74
  1394  00F3F0  3881               	swapf	3969,w,c	;volatile
  1395  00F3F2  0B0F               	andlw	15
  1396  00F3F4  0B0F               	andlw	15
  1397  00F3F6  6E78               	movwf	??_main& (0+255),c
  1398  00F3F8  6A79               	clrf	(??_main+1)& (0+255),c
  1399  00F3FA  0EAD               	movlw	low _keys
  1400  00F3FC  2478               	addwf	??_main,w,c
  1401  00F3FE  6EF6               	movwf	tblptrl,c
  1402  00F400  0EFE               	movlw	high _keys
  1403  00F402  2079               	addwfc	??_main+1,w,c
  1404  00F404  6EF7               	movwf	tblptrh,c
  1405  00F406                     	if	0	;There are less than 3 active tblptr bytes
  1406  00F406                     	endif
  1407  00F406  0008               	tblrd		*
  1408  00F408  50F5               	movf	tablat,w,c
  1409  00F40A  0A2A               	xorlw	42
  1410  00F40C  A4D8               	btfss	status,2,c
  1411  00F40E  D7EE               	goto	l74
  1412                           
  1413                           ;main.c: 97: }
  1414                           ;main.c: 99: update_time(end_time);
  1415  00F410  0E9D               	movlw	low main@end_time
  1416  00F412  6E04               	movwf	update_time@time,c
  1417  00F414  0E00               	movlw	high main@end_time
  1418  00F416  6E05               	movwf	update_time@time+1,c
  1419  00F418  ECED  F072         	call	_update_time	;wreg free
  1420                           
  1421                           ;main.c: 101: int d;
  1422                           ;main.c: 102: d = time_difference(end_time, start_time);
  1423  00F41C  0E9D               	movlw	low main@end_time
  1424  00F41E  6E73               	movwf	time_difference@time1,c
  1425  00F420  0E00               	movlw	high main@end_time
  1426  00F422  6E74               	movwf	time_difference@time1+1,c
  1427  00F424  0E96               	movlw	low main@start_time
  1428  00F426  6E75               	movwf	time_difference@time2,c
  1429  00F428  0E00               	movlw	high main@start_time
  1430  00F42A  6E76               	movwf	time_difference@time2+1,c
  1431  00F42C  ECD8  F078         	call	_time_difference	;wreg free
  1432  00F430  C073  F0A4         	movff	?_time_difference,main@d
  1433  00F434  C074  F0A5         	movff	?_time_difference+1,main@d+1
  1434                           
  1435                           ;main.c: 103: end_phase(d);
  1436  00F438  C0A4  F02B         	movff	main@d,end_phase@time
  1437  00F43C  C0A5  F02C         	movff	main@d+1,end_phase@time+1
  1438  00F440  ECA5  F07C         	call	_end_phase	;wreg free
  1439                           
  1440                           ;main.c: 104: return;
  1441  00F444  EF00  F000         	goto	start
  1442  00F448                     __end_of_main:
  1443                           	opt stack 0
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           intcon2	equ	0xFF1
  1449                           status	equ	0xFD8
  1450                           
  1451 ;; *************** function _time_difference *****************
  1452 ;; Defined at:
  1453 ;;		line 239 in file "main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  time1           2  114[COMRAM] PTR unsigned char 
  1456 ;;		 -> main@end_time(7), 
  1457 ;;  time2           2  116[COMRAM] PTR unsigned char 
  1458 ;;		 -> main@start_time(7), 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;  s2              2   10[BANK0 ] int 
  1461 ;;  s1              2    8[BANK0 ] int 
  1462 ;;  min2            2    6[BANK0 ] int 
  1463 ;;  min1            2    4[BANK0 ] int 
  1464 ;;  hr2             2    2[BANK0 ] int 
  1465 ;;  hr1             2    0[BANK0 ] int 
  1466 ;;  d3              1   14[BANK0 ] unsigned char 
  1467 ;;  d2              1   13[BANK0 ] unsigned char 
  1468 ;;  d1              1   12[BANK0 ] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  2  114[COMRAM] int 
  1471 ;; Registers used:
  1472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1479 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Totals:         5      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;Total ram usage:       20 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    6
  1485 ;; This function calls:
  1486 ;;		___wmul
  1487 ;;		_dec_to_hex
  1488 ;;		_initLCD
  1489 ;;		_lcdInst
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text1
  1496  00F1B0                     __ptext1:
  1497                           	opt stack 0
  1498  00F1B0                     _time_difference:
  1499                           	opt stack 24
  1500                           
  1501                           ;main.c: 240: int hr1, hr2, min1, min2, s1, s2;
  1502                           ;main.c: 241: char d1, d2, d3;
  1503                           ;main.c: 242: hr1 = time1[2]; hr2 = time2[2]; min1 = time1[1]; min2 = time2[1];
  1504                           
  1505                           ;incstack = 0
  1506  00F1B0  EE20 F002          	lfsr	2,2
  1507  00F1B4  5073               	movf	time_difference@time1,w,c
  1508  00F1B6  26D9               	addwf	fsr2l,f,c
  1509  00F1B8  5074               	movf	time_difference@time1+1,w,c
  1510  00F1BA  22DA               	addwfc	fsr2h,f,c
  1511  00F1BC  50DF               	movf	indf2,w,c
  1512  00F1BE  6E77               	movwf	??_time_difference& (0+255),c
  1513  00F1C0  5077               	movf	??_time_difference,w,c
  1514  00F1C2  0100               	movlb	0	; () banked
  1515  00F1C4  6F80               	movwf	time_difference@hr1& (0+255),b
  1516  00F1C6  6B81               	clrf	(time_difference@hr1+1)& (0+255),b
  1517  00F1C8  EE20 F002          	lfsr	2,2
  1518  00F1CC  5075               	movf	time_difference@time2,w,c
  1519  00F1CE  26D9               	addwf	fsr2l,f,c
  1520  00F1D0  5076               	movf	time_difference@time2+1,w,c
  1521  00F1D2  22DA               	addwfc	fsr2h,f,c
  1522  00F1D4  50DF               	movf	indf2,w,c
  1523  00F1D6  6E77               	movwf	??_time_difference& (0+255),c
  1524  00F1D8  5077               	movf	??_time_difference,w,c
  1525  00F1DA  0100               	movlb	0	; () banked
  1526  00F1DC  6F82               	movwf	time_difference@hr2& (0+255),b
  1527  00F1DE  6B83               	clrf	(time_difference@hr2+1)& (0+255),b
  1528  00F1E0  EE20 F001          	lfsr	2,1
  1529  00F1E4  5073               	movf	time_difference@time1,w,c
  1530  00F1E6  26D9               	addwf	fsr2l,f,c
  1531  00F1E8  5074               	movf	time_difference@time1+1,w,c
  1532  00F1EA  22DA               	addwfc	fsr2h,f,c
  1533  00F1EC  50DF               	movf	indf2,w,c
  1534  00F1EE  6E77               	movwf	??_time_difference& (0+255),c
  1535  00F1F0  5077               	movf	??_time_difference,w,c
  1536  00F1F2  0100               	movlb	0	; () banked
  1537  00F1F4  6F84               	movwf	time_difference@min1& (0+255),b
  1538  00F1F6  6B85               	clrf	(time_difference@min1+1)& (0+255),b
  1539  00F1F8  EE20 F001          	lfsr	2,1
  1540  00F1FC  5075               	movf	time_difference@time2,w,c
  1541  00F1FE  26D9               	addwf	fsr2l,f,c
  1542  00F200  5076               	movf	time_difference@time2+1,w,c
  1543  00F202  22DA               	addwfc	fsr2h,f,c
  1544  00F204  50DF               	movf	indf2,w,c
  1545  00F206  6E77               	movwf	??_time_difference& (0+255),c
  1546  00F208  5077               	movf	??_time_difference,w,c
  1547  00F20A  0100               	movlb	0	; () banked
  1548  00F20C  6F86               	movwf	time_difference@min2& (0+255),b
  1549  00F20E  6B87               	clrf	(time_difference@min2+1)& (0+255),b
  1550                           
  1551                           ;main.c: 243: s1 = time1[0]; s2 = time2[0];
  1552  00F210  C073  FFD9         	movff	time_difference@time1,fsr2l
  1553  00F214  C074  FFDA         	movff	time_difference@time1+1,fsr2h
  1554  00F218  50DF               	movf	indf2,w,c
  1555  00F21A  6E77               	movwf	??_time_difference& (0+255),c
  1556  00F21C  5077               	movf	??_time_difference,w,c
  1557  00F21E  0100               	movlb	0	; () banked
  1558  00F220  6F88               	movwf	time_difference@s1& (0+255),b
  1559  00F222  6B89               	clrf	(time_difference@s1+1)& (0+255),b
  1560  00F224  C075  FFD9         	movff	time_difference@time2,fsr2l
  1561  00F228  C076  FFDA         	movff	time_difference@time2+1,fsr2h
  1562  00F22C  50DF               	movf	indf2,w,c
  1563  00F22E  6E77               	movwf	??_time_difference& (0+255),c
  1564  00F230  5077               	movf	??_time_difference,w,c
  1565  00F232  0100               	movlb	0	; () banked
  1566  00F234  6F8A               	movwf	time_difference@s2& (0+255),b
  1567  00F236  6B8B               	clrf	(time_difference@s2+1)& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 245: d1 = dec_to_hex(hr1) - dec_to_hex(hr2);
  1571  00F238  C082  F063         	movff	time_difference@hr2,dec_to_hex@num
  1572  00F23C  C083  F064         	movff	time_difference@hr2+1,dec_to_hex@num+1
  1573  00F240  ECCD  F077         	call	_dec_to_hex	;wreg free
  1574  00F244  5063               	movf	?_dec_to_hex,w,c
  1575  00F246  0800               	sublw	0
  1576  00F248  6E77               	movwf	??_time_difference& (0+255),c
  1577  00F24A  C080  F063         	movff	time_difference@hr1,dec_to_hex@num
  1578  00F24E  C081  F064         	movff	time_difference@hr1+1,dec_to_hex@num+1
  1579  00F252  ECCD  F077         	call	_dec_to_hex	;wreg free
  1580  00F256  5063               	movf	?_dec_to_hex,w,c
  1581  00F258  2477               	addwf	??_time_difference,w,c
  1582  00F25A  0100               	movlb	0	; () banked
  1583  00F25C  6F8C               	movwf	time_difference@d1& (0+255),b
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 246: d2 = dec_to_hex(min1) - dec_to_hex(min2);
  1587  00F25E  C086  F063         	movff	time_difference@min2,dec_to_hex@num
  1588  00F262  C087  F064         	movff	time_difference@min2+1,dec_to_hex@num+1
  1589  00F266  ECCD  F077         	call	_dec_to_hex	;wreg free
  1590  00F26A  5063               	movf	?_dec_to_hex,w,c
  1591  00F26C  0800               	sublw	0
  1592  00F26E  6E77               	movwf	??_time_difference& (0+255),c
  1593  00F270  C084  F063         	movff	time_difference@min1,dec_to_hex@num
  1594  00F274  C085  F064         	movff	time_difference@min1+1,dec_to_hex@num+1
  1595  00F278  ECCD  F077         	call	_dec_to_hex	;wreg free
  1596  00F27C  5063               	movf	?_dec_to_hex,w,c
  1597  00F27E  2477               	addwf	??_time_difference,w,c
  1598  00F280  0100               	movlb	0	; () banked
  1599  00F282  6F8D               	movwf	time_difference@d2& (0+255),b
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 247: d3 = dec_to_hex(s1) - dec_to_hex(s2);
  1603  00F284  C08A  F063         	movff	time_difference@s2,dec_to_hex@num
  1604  00F288  C08B  F064         	movff	time_difference@s2+1,dec_to_hex@num+1
  1605  00F28C  ECCD  F077         	call	_dec_to_hex	;wreg free
  1606  00F290  5063               	movf	?_dec_to_hex,w,c
  1607  00F292  0800               	sublw	0
  1608  00F294  6E77               	movwf	??_time_difference& (0+255),c
  1609  00F296  C088  F063         	movff	time_difference@s1,dec_to_hex@num
  1610  00F29A  C089  F064         	movff	time_difference@s1+1,dec_to_hex@num+1
  1611  00F29E  ECCD  F077         	call	_dec_to_hex	;wreg free
  1612  00F2A2  5063               	movf	?_dec_to_hex,w,c
  1613  00F2A4  2477               	addwf	??_time_difference,w,c
  1614  00F2A6  0100               	movlb	0	; () banked
  1615  00F2A8  6F8E               	movwf	time_difference@d3& (0+255),b
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;main.c: 249: lcdInst(0b00000001);;
  1619  00F2AA  0E01               	movlw	1
  1620  00F2AC  ECEF  F070         	call	_lcdInst
  1621                           
  1622                           ;main.c: 250: lcdInst(0b10000000);;
  1623  00F2B0  0E80               	movlw	128
  1624  00F2B2  ECEF  F070         	call	_lcdInst
  1625                           
  1626                           ;main.c: 251: initLCD();
  1627  00F2B6  ECE4  F071         	call	_initLCD	;wreg free
  1628                           
  1629                           ;main.c: 252: return 3600*d1 + 60*d2 + d3;
  1630  00F2BA  C08C  F001         	movff	time_difference@d1,___wmul@multiplier
  1631  00F2BE  6A02               	clrf	___wmul@multiplier+1,c
  1632  00F2C0  0E0E               	movlw	14
  1633  00F2C2  6E04               	movwf	___wmul@multiplicand+1,c
  1634  00F2C4  0E10               	movlw	16
  1635  00F2C6  6E03               	movwf	___wmul@multiplicand,c
  1636  00F2C8  EC2C  F071         	call	___wmul	;wreg free
  1637  00F2CC  0100               	movlb	0	; () banked
  1638  00F2CE  518D               	movf	time_difference@d2& (0+255),w,b
  1639  00F2D0  0D3C               	mullw	60
  1640  00F2D2  50F3               	movf	prodl,w,c
  1641  00F2D4  2601               	addwf	?___wmul,f,c
  1642  00F2D6  50F4               	movf	prodh,w,c
  1643  00F2D8  2202               	addwfc	?___wmul+1,f,c
  1644  00F2DA  0100               	movlb	0	; () banked
  1645  00F2DC  518E               	movf	time_difference@d3& (0+255),w,b
  1646  00F2DE  2401               	addwf	?___wmul,w,c
  1647  00F2E0  6E73               	movwf	?_time_difference,c
  1648  00F2E2  0100               	movlb	0	; () banked
  1649  00F2E4  0E00               	movlw	0
  1650  00F2E6  2002               	addwfc	?___wmul+1,w,c
  1651  00F2E8  6E74               	movwf	?_time_difference+1,c
  1652  00F2EA  0012               	return	
  1653  00F2EC                     __end_of_time_difference:
  1654                           	opt stack 0
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           prodh	equ	0xFF4
  1660                           prodl	equ	0xFF3
  1661                           intcon2	equ	0xFF1
  1662                           indf2	equ	0xFDF
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function _dec_to_hex *****************
  1668 ;; Defined at:
  1669 ;;		line 255 in file "main.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  num             2   98[COMRAM] int 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  quotient        2  112[COMRAM] int 
  1674 ;;  hexnum          2  110[COMRAM] int 
  1675 ;;  i               2  108[COMRAM] int 
  1676 ;;  temp            2  106[COMRAM] int 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2   98[COMRAM] int 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;Total ram usage:       16 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    5
  1693 ;; This function calls:
  1694 ;;		___awdiv
  1695 ;;		___awtoft
  1696 ;;		___ftadd
  1697 ;;		___ftmul
  1698 ;;		___fttol
  1699 ;;		_pow
  1700 ;; This function is called by:
  1701 ;;		_time_difference
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text2
  1706  00EF9A                     __ptext2:
  1707                           	opt stack 0
  1708  00EF9A                     _dec_to_hex:
  1709                           	opt stack 24
  1710                           
  1711                           ;main.c: 256: int i = 0, quotient = num, temp, hexnum = 0;
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;incstack = 0
  1715  00EF9A  0E00               	movlw	0
  1716  00EF9C  6E6E               	movwf	dec_to_hex@i+1,c
  1717  00EF9E  0E00               	movlw	0
  1718  00EFA0  6E6D               	movwf	dec_to_hex@i,c
  1719  00EFA2  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
  1720  00EFA6  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
  1721  00EFAA  0E00               	movlw	0
  1722  00EFAC  6E70               	movwf	dec_to_hex@hexnum+1,c
  1723  00EFAE  0E00               	movlw	0
  1724  00EFB0  6E6F               	movwf	dec_to_hex@hexnum,c
  1725                           
  1726                           ;main.c: 259: while (quotient != 0) {
  1727  00EFB2  D068               	goto	l3039
  1728  00EFB4                     l3027:
  1729                           
  1730                           ;main.c: 260: temp = quotient % 16;
  1731  00EFB4  0E0F               	movlw	15
  1732  00EFB6  1471               	andwf	dec_to_hex@quotient,w,c
  1733  00EFB8  6E6B               	movwf	dec_to_hex@temp,c
  1734  00EFBA  6A6C               	clrf	dec_to_hex@temp+1,c
  1735                           
  1736                           ;main.c: 262: hexnum += temp*pow(10, i);
  1737  00EFBC  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
  1738  00EFC0  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
  1739  00EFC4  EC65  F071         	call	___awtoft	;wreg free
  1740  00EFC8  C009  F065         	movff	?___awtoft,_dec_to_hex$1015
  1741  00EFCC  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1015+1
  1742  00EFD0  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1015+2
  1743                           
  1744                           ;main.c: 262: hexnum += temp*pow(10, i);
  1745  00EFD4  C065  F055         	movff	_dec_to_hex$1015,pow@y
  1746  00EFD8  C066  F056         	movff	_dec_to_hex$1015+1,pow@y+1
  1747  00EFDC  C067  F057         	movff	_dec_to_hex$1015+2,pow@y+2
  1748  00EFE0  0E00               	movlw	0
  1749  00EFE2  6E52               	movwf	pow@x,c
  1750  00EFE4  0E20               	movlw	32
  1751  00EFE6  6E53               	movwf	pow@x+1,c
  1752  00EFE8  0E41               	movlw	65
  1753  00EFEA  6E54               	movwf	pow@x+2,c
  1754  00EFEC  EC24  F07A         	call	_pow	;wreg free
  1755  00EFF0  C052  F068         	movff	?_pow,_dec_to_hex$1016
  1756  00EFF4  C053  F069         	movff	?_pow+1,_dec_to_hex$1016+1
  1757  00EFF8  C054  F06A         	movff	?_pow+2,_dec_to_hex$1016+2
  1758                           
  1759                           ;main.c: 262: hexnum += temp*pow(10, i);
  1760  00EFFC  C068  F010         	movff	_dec_to_hex$1016,___ftmul@f2
  1761  00F000  C069  F011         	movff	_dec_to_hex$1016+1,___ftmul@f2+1
  1762  00F004  C06A  F012         	movff	_dec_to_hex$1016+2,___ftmul@f2+2
  1763  00F008  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
  1764  00F00C  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
  1765  00F010  EC65  F071         	call	___awtoft	;wreg free
  1766  00F014  C009  F00D         	movff	?___awtoft,___ftmul@f1
  1767  00F018  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  1768  00F01C  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  1769  00F020  ECD9  F076         	call	___ftmul	;wreg free
  1770  00F024  C00D  F01F         	movff	?___ftmul,___ftadd@f2
  1771  00F028  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
  1772  00F02C  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
  1773  00F030  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
  1774  00F034  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
  1775  00F038  EC65  F071         	call	___awtoft	;wreg free
  1776  00F03C  C009  F01C         	movff	?___awtoft,___ftadd@f1
  1777  00F040  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
  1778  00F044  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
  1779  00F048  ECDD  F07A         	call	___ftadd	;wreg free
  1780  00F04C  C01C  F028         	movff	?___ftadd,___fttol@f1
  1781  00F050  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
  1782  00F054  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
  1783  00F058  EC53  F077         	call	___fttol	;wreg free
  1784  00F05C  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
  1785  00F060  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
  1786                           
  1787                           ;main.c: 264: quotient = quotient / 16;
  1788  00F064  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
  1789  00F068  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
  1790  00F06C  0E00               	movlw	0
  1791  00F06E  6E0A               	movwf	___awdiv@divisor+1,c
  1792  00F070  0E10               	movlw	16
  1793  00F072  6E09               	movwf	___awdiv@divisor,c
  1794  00F074  ECA3  F073         	call	___awdiv	;wreg free
  1795  00F078  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
  1796  00F07C  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
  1797                           
  1798                           ;main.c: 265: i += 1;
  1799  00F080  4A6D               	infsnz	dec_to_hex@i,f,c
  1800  00F082  2A6E               	incf	dec_to_hex@i+1,f,c
  1801  00F084                     l3039:
  1802  00F084  5071               	movf	dec_to_hex@quotient,w,c
  1803  00F086  1072               	iorwf	dec_to_hex@quotient+1,w,c
  1804  00F088  A4D8               	btfss	status,2,c
  1805  00F08A  D794               	goto	l3027
  1806                           
  1807                           ;main.c: 266: }
  1808                           ;main.c: 267: return hexnum;
  1809  00F08C  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
  1810  00F090  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
  1811  00F094  0012               	return		;funcret
  1812  00F096                     __end_of_dec_to_hex:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           intcon2	equ	0xFF1
  1821                           indf2	equ	0xFDF
  1822                           fsr2h	equ	0xFDA
  1823                           fsr2l	equ	0xFD9
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _pow *****************
  1827 ;; Defined at:
  1828 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\pow.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  x               3   81[COMRAM] int 
  1831 ;;  y               3   84[COMRAM] int 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  yi              4   94[COMRAM] unsigned long 
  1834 ;;  sign            1   93[COMRAM] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  3   81[COMRAM] unsigned char 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:       17 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    4
  1851 ;; This function calls:
  1852 ;;		___ftge
  1853 ;;		___ftmul
  1854 ;;		___ftneg
  1855 ;;		___fttol
  1856 ;;		___lltoft
  1857 ;;		_exp
  1858 ;;		_log
  1859 ;; This function is called by:
  1860 ;;		_dec_to_hex
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text3
  1865  00F448                     __ptext3:
  1866                           	opt stack 0
  1867  00F448                     _pow:
  1868                           	opt stack 24
  1869                           
  1870                           ;incstack = 0
  1871  00F448  0E00               	movlw	0
  1872  00F44A  6E5E               	movwf	pow@sign,c
  1873  00F44C  5052               	movf	pow@x,w,c
  1874  00F44E  1053               	iorwf	pow@x+1,w,c
  1875  00F450  1054               	iorwf	pow@x+2,w,c
  1876  00F452  A4D8               	btfss	status,2,c
  1877  00F454  D01B               	goto	l2907
  1878  00F456  0E00               	movlw	0
  1879  00F458  6E01               	movwf	___ftge@ff1,c
  1880  00F45A  0E00               	movlw	0
  1881  00F45C  6E02               	movwf	___ftge@ff1+1,c
  1882  00F45E  0E00               	movlw	0
  1883  00F460  6E03               	movwf	___ftge@ff1+2,c
  1884  00F462  C055  F004         	movff	pow@y,___ftge@ff2
  1885  00F466  C056  F005         	movff	pow@y+1,___ftge@ff2+1
  1886  00F46A  C057  F006         	movff	pow@y+2,___ftge@ff2+2
  1887  00F46E  ECE5  F073         	call	___ftge	;wreg free
  1888  00F472  A0D8               	btfss	status,0,c
  1889  00F474  D004               	goto	l753
  1890  00F476  0E00               	movlw	0
  1891  00F478  6E7B               	movwf	_errno+1,c
  1892  00F47A  0E21               	movlw	33
  1893  00F47C  6E7A               	movwf	_errno,c
  1894  00F47E                     l753:
  1895  00F47E  0E00               	movlw	0
  1896  00F480  6E52               	movwf	?_pow,c
  1897  00F482  0E00               	movlw	0
  1898  00F484  6E53               	movwf	?_pow+1,c
  1899  00F486  0E00               	movlw	0
  1900  00F488  6E54               	movwf	?_pow+2,c
  1901  00F48A  0012               	return	
  1902  00F48C                     l2907:
  1903  00F48C  5055               	movf	pow@y,w,c
  1904  00F48E  1056               	iorwf	pow@y+1,w,c
  1905  00F490  1057               	iorwf	pow@y+2,w,c
  1906  00F492  A4D8               	btfss	status,2,c
  1907  00F494  D007               	goto	l2913
  1908  00F496  0E00               	movlw	0
  1909  00F498  6E52               	movwf	?_pow,c
  1910  00F49A  0E80               	movlw	128
  1911  00F49C  6E53               	movwf	?_pow+1,c
  1912  00F49E  0E3F               	movlw	63
  1913  00F4A0  6E54               	movwf	?_pow+2,c
  1914  00F4A2  0012               	return	
  1915  00F4A4                     l2913:
  1916  00F4A4  AE54               	btfss	pow@x+2,7,c
  1917  00F4A6  D040               	goto	l2925
  1918  00F4A8  C055  F028         	movff	pow@y,___fttol@f1
  1919  00F4AC  C056  F029         	movff	pow@y+1,___fttol@f1+1
  1920  00F4B0  C057  F02A         	movff	pow@y+2,___fttol@f1+2
  1921  00F4B4  EC53  F077         	call	___fttol	;wreg free
  1922  00F4B8  C028  F05F         	movff	?___fttol,pow@yi
  1923  00F4BC  C029  F060         	movff	?___fttol+1,pow@yi+1
  1924  00F4C0  C02A  F061         	movff	?___fttol+2,pow@yi+2
  1925  00F4C4  C02B  F062         	movff	?___fttol+3,pow@yi+3
  1926  00F4C8  C05F  F009         	movff	pow@yi,___lltoft@c
  1927  00F4CC  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
  1928  00F4D0  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
  1929  00F4D4  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
  1930  00F4D8  EC87  F072         	call	___lltoft	;wreg free
  1931  00F4DC  5055               	movf	pow@y,w,c
  1932  00F4DE  1809               	xorwf	?___lltoft,w,c
  1933  00F4E0  E107               	bnz	u2900
  1934  00F4E2  5056               	movf	pow@y+1,w,c
  1935  00F4E4  180A               	xorwf	?___lltoft+1,w,c
  1936  00F4E6  E104               	bnz	u2900
  1937  00F4E8  5057               	movf	pow@y+2,w,c
  1938  00F4EA  180B               	xorwf	?___lltoft+2,w,c
  1939  00F4EC  B4D8               	btfsc	status,2,c
  1940  00F4EE  D00B               	goto	l2921
  1941  00F4F0                     u2900:
  1942  00F4F0  0E00               	movlw	0
  1943  00F4F2  6E7B               	movwf	_errno+1,c
  1944  00F4F4  0E21               	movlw	33
  1945  00F4F6  6E7A               	movwf	_errno,c
  1946  00F4F8  0E00               	movlw	0
  1947  00F4FA  6E52               	movwf	?_pow,c
  1948  00F4FC  0E00               	movlw	0
  1949  00F4FE  6E53               	movwf	?_pow+1,c
  1950  00F500  0E00               	movlw	0
  1951  00F502  6E54               	movwf	?_pow+2,c
  1952  00F504  0012               	return	
  1953  00F506                     l2921:
  1954  00F506  505F               	movf	pow@yi,w,c
  1955  00F508  0B01               	andlw	1
  1956  00F50A  6E5E               	movwf	pow@sign,c
  1957  00F50C  C052  F001         	movff	pow@x,___ftneg@f1
  1958  00F510  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  1959  00F514  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  1960  00F518  EC1A  F071         	call	___ftneg	;wreg free
  1961  00F51C  C001  F052         	movff	?___ftneg,pow@x
  1962  00F520  C002  F053         	movff	?___ftneg+1,pow@x+1
  1963  00F524  C003  F054         	movff	?___ftneg+2,pow@x+2
  1964  00F528                     l2925:
  1965  00F528  C052  F034         	movff	pow@x,log@x
  1966  00F52C  C053  F035         	movff	pow@x+1,log@x+1
  1967  00F530  C054  F036         	movff	pow@x+2,log@x+2
  1968  00F534  EC4B  F078         	call	_log	;wreg free
  1969  00F538  C034  F058         	movff	?_log,_pow$1017
  1970  00F53C  C035  F059         	movff	?_log+1,_pow$1017+1
  1971  00F540  C036  F05A         	movff	?_log+2,_pow$1017+2
  1972  00F544  C058  F00D         	movff	_pow$1017,___ftmul@f1
  1973  00F548  C059  F00E         	movff	_pow$1017+1,___ftmul@f1+1
  1974  00F54C  C05A  F00F         	movff	_pow$1017+2,___ftmul@f1+2
  1975  00F550  C055  F010         	movff	pow@y,___ftmul@f2
  1976  00F554  C056  F011         	movff	pow@y+1,___ftmul@f2+1
  1977  00F558  C057  F012         	movff	pow@y+2,___ftmul@f2+2
  1978  00F55C  ECD9  F076         	call	___ftmul	;wreg free
  1979  00F560  C00D  F05B         	movff	?___ftmul,_pow$1018
  1980  00F564  C00E  F05C         	movff	?___ftmul+1,_pow$1018+1
  1981  00F568  C00F  F05D         	movff	?___ftmul+2,_pow$1018+2
  1982  00F56C  C05B  F049         	movff	_pow$1018,exp@x
  1983  00F570  C05C  F04A         	movff	_pow$1018+1,exp@x+1
  1984  00F574  C05D  F04B         	movff	_pow$1018+2,exp@x+2
  1985  00F578  ECB3  F07B         	call	_exp	;wreg free
  1986  00F57C  C049  F052         	movff	?_exp,pow@x
  1987  00F580  C04A  F053         	movff	?_exp+1,pow@x+1
  1988  00F584  C04B  F054         	movff	?_exp+2,pow@x+2
  1989  00F588  505E               	movf	pow@sign,w,c
  1990  00F58A  B4D8               	btfsc	status,2,c
  1991  00F58C  D00F               	goto	l758
  1992  00F58E  C052  F001         	movff	pow@x,___ftneg@f1
  1993  00F592  C053  F002         	movff	pow@x+1,___ftneg@f1+1
  1994  00F596  C054  F003         	movff	pow@x+2,___ftneg@f1+2
  1995  00F59A  EC1A  F071         	call	___ftneg	;wreg free
  1996  00F59E  C001  F052         	movff	?___ftneg,?_pow
  1997  00F5A2  C002  F053         	movff	?___ftneg+1,?_pow+1
  1998  00F5A6  C003  F054         	movff	?___ftneg+2,?_pow+2
  1999  00F5AA  0012               	return	
  2000  00F5AC                     l758:
  2001  00F5AC  C052  F052         	movff	pow@x,?_pow
  2002  00F5B0  C053  F053         	movff	pow@x+1,?_pow+1
  2003  00F5B4  C054  F054         	movff	pow@x+2,?_pow+2
  2004  00F5B8  0012               	return		;funcret
  2005  00F5BA                     __end_of_pow:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           intcon2	equ	0xFF1
  2014                           indf2	equ	0xFDF
  2015                           fsr2h	equ	0xFDA
  2016                           fsr2l	equ	0xFD9
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _log *****************
  2020 ;; Defined at:
  2021 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\log.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  x               3   51[COMRAM] unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  exponent        2   54[COMRAM] int 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  3   51[COMRAM] int 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2035 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;Total ram usage:        5 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    3
  2042 ;; This function calls:
  2043 ;;		___awtoft
  2044 ;;		___ftadd
  2045 ;;		___ftmul
  2046 ;;		_eval_poly
  2047 ;;		_frexp
  2048 ;; This function is called by:
  2049 ;;		_pow
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text4
  2054  00F096                     __ptext4:
  2055                           	opt stack 0
  2056  00F096                     _log:
  2057                           	opt stack 24
  2058                           
  2059                           ;incstack = 0
  2060  00F096  AE36               	btfss	log@x+2,7,c
  2061  00F098  D00B               	goto	l2657
  2062  00F09A  0E00               	movlw	0
  2063  00F09C  6E7B               	movwf	_errno+1,c
  2064  00F09E  0E21               	movlw	33
  2065  00F0A0  6E7A               	movwf	_errno,c
  2066  00F0A2  0E00               	movlw	0
  2067  00F0A4  6E34               	movwf	?_log,c
  2068  00F0A6  0E00               	movlw	0
  2069  00F0A8  6E35               	movwf	?_log+1,c
  2070  00F0AA  0E00               	movlw	0
  2071  00F0AC  6E36               	movwf	?_log+2,c
  2072  00F0AE  0012               	return	
  2073  00F0B0                     l2657:
  2074  00F0B0  5034               	movf	log@x,w,c
  2075  00F0B2  1035               	iorwf	log@x+1,w,c
  2076  00F0B4  1036               	iorwf	log@x+2,w,c
  2077  00F0B6  A4D8               	btfss	status,2,c
  2078  00F0B8  D00B               	goto	l2663
  2079  00F0BA  0E00               	movlw	0
  2080  00F0BC  6E7B               	movwf	_errno+1,c
  2081  00F0BE  0E22               	movlw	34
  2082  00F0C0  6E7A               	movwf	_errno,c
  2083  00F0C2  0E00               	movlw	0
  2084  00F0C4  6E34               	movwf	?_log,c
  2085  00F0C6  0E00               	movlw	0
  2086  00F0C8  6E35               	movwf	?_log+1,c
  2087  00F0CA  0E00               	movlw	0
  2088  00F0CC  6E36               	movwf	?_log+2,c
  2089  00F0CE  0012               	return	
  2090  00F0D0                     l2663:
  2091  00F0D0  0E00               	movlw	0
  2092  00F0D2  6E10               	movwf	___ftmul@f2,c
  2093  00F0D4  0E00               	movlw	0
  2094  00F0D6  6E11               	movwf	___ftmul@f2+1,c
  2095  00F0D8  0E40               	movlw	64
  2096  00F0DA  6E12               	movwf	___ftmul@f2+2,c
  2097  00F0DC  0E37               	movlw	low log@exponent
  2098  00F0DE  6E04               	movwf	frexp@eptr,c
  2099  00F0E0  0E00               	movlw	high log@exponent
  2100  00F0E2  6E05               	movwf	frexp@eptr+1,c
  2101  00F0E4  C034  F001         	movff	log@x,frexp@value
  2102  00F0E8  C035  F002         	movff	log@x+1,frexp@value+1
  2103  00F0EC  C036  F003         	movff	log@x+2,frexp@value+2
  2104  00F0F0  EC2D  F074         	call	_frexp	;wreg free
  2105  00F0F4  C001  F00D         	movff	?_frexp,___ftmul@f1
  2106  00F0F8  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
  2107  00F0FC  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
  2108  00F100  ECD9  F076         	call	___ftmul	;wreg free
  2109  00F104  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  2110  00F108  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  2111  00F10C  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  2112  00F110  0E00               	movlw	0
  2113  00F112  6E1F               	movwf	___ftadd@f2,c
  2114  00F114  0E80               	movlw	128
  2115  00F116  6E20               	movwf	___ftadd@f2+1,c
  2116  00F118  0EBF               	movlw	191
  2117  00F11A  6E21               	movwf	___ftadd@f2+2,c
  2118  00F11C  ECDD  F07A         	call	___ftadd	;wreg free
  2119  00F120  C01C  F034         	movff	?___ftadd,log@x
  2120  00F124  C01D  F035         	movff	?___ftadd+1,log@x+1
  2121  00F128  C01E  F036         	movff	?___ftadd+2,log@x+2
  2122  00F12C  0637               	decf	log@exponent,f,c
  2123  00F12E  A0D8               	btfss	status,0,c
  2124  00F130  0638               	decf	log@exponent+1,f,c
  2125  00F132  C034  F028         	movff	log@x,eval_poly@x
  2126  00F136  C035  F029         	movff	log@x+1,eval_poly@x+1
  2127  00F13A  C036  F02A         	movff	log@x+2,eval_poly@x+2
  2128  00F13E  0EF5               	movlw	low log@coeff
  2129  00F140  6E2B               	movwf	eval_poly@d,c
  2130  00F142  0EFE               	movlw	high log@coeff
  2131  00F144  6E2C               	movwf	eval_poly@d+1,c
  2132  00F146  0E00               	movlw	0
  2133  00F148  6E2E               	movwf	eval_poly@n+1,c
  2134  00F14A  0E08               	movlw	8
  2135  00F14C  6E2D               	movwf	eval_poly@n,c
  2136  00F14E  EC8E  F075         	call	_eval_poly	;wreg free
  2137  00F152  C028  F034         	movff	?_eval_poly,log@x
  2138  00F156  C029  F035         	movff	?_eval_poly+1,log@x+1
  2139  00F15A  C02A  F036         	movff	?_eval_poly+2,log@x+2
  2140  00F15E  0E72               	movlw	114
  2141  00F160  6E10               	movwf	___ftmul@f2,c
  2142  00F162  0E31               	movlw	49
  2143  00F164  6E11               	movwf	___ftmul@f2+1,c
  2144  00F166  0E3F               	movlw	63
  2145  00F168  6E12               	movwf	___ftmul@f2+2,c
  2146  00F16A  C037  F009         	movff	log@exponent,___awtoft@c
  2147  00F16E  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
  2148  00F172  EC65  F071         	call	___awtoft	;wreg free
  2149  00F176  C009  F00D         	movff	?___awtoft,___ftmul@f1
  2150  00F17A  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  2151  00F17E  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  2152  00F182  ECD9  F076         	call	___ftmul	;wreg free
  2153  00F186  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  2154  00F18A  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  2155  00F18E  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  2156  00F192  C034  F01F         	movff	log@x,___ftadd@f2
  2157  00F196  C035  F020         	movff	log@x+1,___ftadd@f2+1
  2158  00F19A  C036  F021         	movff	log@x+2,___ftadd@f2+2
  2159  00F19E  ECDD  F07A         	call	___ftadd	;wreg free
  2160  00F1A2  C01C  F034         	movff	?___ftadd,?_log
  2161  00F1A6  C01D  F035         	movff	?___ftadd+1,?_log+1
  2162  00F1AA  C01E  F036         	movff	?___ftadd+2,?_log+2
  2163  00F1AE  0012               	return	
  2164  00F1B0                     __end_of_log:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           prodh	equ	0xFF4
  2171                           prodl	equ	0xFF3
  2172                           intcon2	equ	0xFF1
  2173                           indf2	equ	0xFDF
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _exp *****************
  2179 ;; Defined at:
  2180 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\exp.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  x               3   72[COMRAM] int 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  exponent        2   78[COMRAM] int 
  2185 ;;  sign            1   80[COMRAM] unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  3   72[COMRAM] unsigned char 
  2188 ;; Registers used:
  2189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2195 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;Total ram usage:        9 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    3
  2202 ;; This function calls:
  2203 ;;		___awtoft
  2204 ;;		___ftdiv
  2205 ;;		___ftge
  2206 ;;		___ftmul
  2207 ;;		___ftneg
  2208 ;;		___ftsub
  2209 ;;		___fttol
  2210 ;;		_eval_poly
  2211 ;;		_floor
  2212 ;;		_ldexp
  2213 ;; This function is called by:
  2214 ;;		_pow
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text5
  2219  00F766                     __ptext5:
  2220                           	opt stack 0
  2221  00F766                     _exp:
  2222                           	opt stack 24
  2223                           
  2224                           ;incstack = 0
  2225  00F766  5049               	movf	exp@x,w,c
  2226  00F768  104A               	iorwf	exp@x+1,w,c
  2227  00F76A  104B               	iorwf	exp@x+2,w,c
  2228  00F76C  A4D8               	btfss	status,2,c
  2229  00F76E  D007               	goto	l2679
  2230  00F770  0E00               	movlw	0
  2231  00F772  6E49               	movwf	?_exp,c
  2232  00F774  0E80               	movlw	128
  2233  00F776  6E4A               	movwf	?_exp+1,c
  2234  00F778  0E3F               	movlw	63
  2235  00F77A  6E4B               	movwf	?_exp+2,c
  2236  00F77C  0012               	return	
  2237  00F77E                     l2679:
  2238  00F77E  0E72               	movlw	114
  2239  00F780  6E01               	movwf	___ftge@ff1,c
  2240  00F782  0E31               	movlw	49
  2241  00F784  6E02               	movwf	___ftge@ff1+1,c
  2242  00F786  0E44               	movlw	68
  2243  00F788  6E03               	movwf	___ftge@ff1+2,c
  2244  00F78A  C049  F004         	movff	exp@x,___ftge@ff2
  2245  00F78E  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
  2246  00F792  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
  2247  00F796  ECE5  F073         	call	___ftge	;wreg free
  2248  00F79A  B0D8               	btfsc	status,0,c
  2249  00F79C  D00B               	goto	l2685
  2250  00F79E  0E00               	movlw	0
  2251  00F7A0  6E7B               	movwf	_errno+1,c
  2252  00F7A2  0E22               	movlw	34
  2253  00F7A4  6E7A               	movwf	_errno,c
  2254  00F7A6  0EFF               	movlw	255
  2255  00F7A8  6E49               	movwf	?_exp,c
  2256  00F7AA  0E7F               	movlw	127
  2257  00F7AC  6E4A               	movwf	?_exp+1,c
  2258  00F7AE  0E7F               	movlw	127
  2259  00F7B0  6E4B               	movwf	?_exp+2,c
  2260  00F7B2  0012               	return	
  2261  00F7B4                     l2685:
  2262  00F7B4  C049  F001         	movff	exp@x,___ftge@ff1
  2263  00F7B8  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
  2264  00F7BC  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
  2265  00F7C0  0E49               	movlw	73
  2266  00F7C2  6E04               	movwf	___ftge@ff2,c
  2267  00F7C4  0E3A               	movlw	58
  2268  00F7C6  6E05               	movwf	___ftge@ff2+1,c
  2269  00F7C8  0EC4               	movlw	196
  2270  00F7CA  6E06               	movwf	___ftge@ff2+2,c
  2271  00F7CC  ECE5  F073         	call	___ftge	;wreg free
  2272  00F7D0  B0D8               	btfsc	status,0,c
  2273  00F7D2  D00B               	goto	l2691
  2274  00F7D4  0E00               	movlw	0
  2275  00F7D6  6E7B               	movwf	_errno+1,c
  2276  00F7D8  0E22               	movlw	34
  2277  00F7DA  6E7A               	movwf	_errno,c
  2278  00F7DC  0E00               	movlw	0
  2279  00F7DE  6E49               	movwf	?_exp,c
  2280  00F7E0  0E00               	movlw	0
  2281  00F7E2  6E4A               	movwf	?_exp+1,c
  2282  00F7E4  0E00               	movlw	0
  2283  00F7E6  6E4B               	movwf	?_exp+2,c
  2284  00F7E8  0012               	return	
  2285  00F7EA                     l2691:
  2286  00F7EA  AE4B               	btfss	exp@x+2,7,c
  2287  00F7EC  D002               	goto	u2530
  2288  00F7EE  0E01               	movlw	1
  2289  00F7F0  D001               	goto	u2540
  2290  00F7F2                     u2530:
  2291  00F7F2  0E00               	movlw	0
  2292  00F7F4                     u2540:
  2293  00F7F4  6E51               	movwf	exp@sign,c
  2294  00F7F6  5051               	movf	exp@sign,w,c
  2295  00F7F8  B4D8               	btfsc	status,2,c
  2296  00F7FA  D00E               	goto	l916
  2297  00F7FC  C049  F001         	movff	exp@x,___ftneg@f1
  2298  00F800  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
  2299  00F804  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
  2300  00F808  EC1A  F071         	call	___ftneg	;wreg free
  2301  00F80C  C001  F049         	movff	?___ftneg,exp@x
  2302  00F810  C002  F04A         	movff	?___ftneg+1,exp@x+1
  2303  00F814  C003  F04B         	movff	?___ftneg+2,exp@x+2
  2304  00F818                     l916:
  2305  00F818  C049  F00D         	movff	exp@x,___ftmul@f1
  2306  00F81C  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
  2307  00F820  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
  2308  00F824  0EAA               	movlw	170
  2309  00F826  6E10               	movwf	___ftmul@f2,c
  2310  00F828  0EB8               	movlw	184
  2311  00F82A  6E11               	movwf	___ftmul@f2+1,c
  2312  00F82C  0E3F               	movlw	63
  2313  00F82E  6E12               	movwf	___ftmul@f2+2,c
  2314  00F830  ECD9  F076         	call	___ftmul	;wreg free
  2315  00F834  C00D  F049         	movff	?___ftmul,exp@x
  2316  00F838  C00E  F04A         	movff	?___ftmul+1,exp@x+1
  2317  00F83C  C00F  F04B         	movff	?___ftmul+2,exp@x+2
  2318  00F840  C049  F041         	movff	exp@x,floor@x
  2319  00F844  C04A  F042         	movff	exp@x+1,floor@x+1
  2320  00F848  C04B  F043         	movff	exp@x+2,floor@x+2
  2321  00F84C  ECF7  F075         	call	_floor	;wreg free
  2322  00F850  C041  F04C         	movff	?_floor,_exp$1019
  2323  00F854  C042  F04D         	movff	?_floor+1,_exp$1019+1
  2324  00F858  C043  F04E         	movff	?_floor+2,_exp$1019+2
  2325  00F85C  C04C  F028         	movff	_exp$1019,___fttol@f1
  2326  00F860  C04D  F029         	movff	_exp$1019+1,___fttol@f1+1
  2327  00F864  C04E  F02A         	movff	_exp$1019+2,___fttol@f1+2
  2328  00F868  EC53  F077         	call	___fttol	;wreg free
  2329  00F86C  C028  F04F         	movff	?___fttol,exp@exponent
  2330  00F870  C029  F050         	movff	?___fttol+1,exp@exponent+1
  2331  00F874  C049  F028         	movff	exp@x,___ftsub@f1
  2332  00F878  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
  2333  00F87C  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
  2334  00F880  C04F  F009         	movff	exp@exponent,___awtoft@c
  2335  00F884  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
  2336  00F888  EC65  F071         	call	___awtoft	;wreg free
  2337  00F88C  C009  F02B         	movff	?___awtoft,___ftsub@f2
  2338  00F890  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
  2339  00F894  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
  2340  00F898  EC81  F071         	call	___ftsub	;wreg free
  2341  00F89C  C028  F049         	movff	?___ftsub,exp@x
  2342  00F8A0  C029  F04A         	movff	?___ftsub+1,exp@x+1
  2343  00F8A4  C02A  F04B         	movff	?___ftsub+2,exp@x+2
  2344  00F8A8  C049  F028         	movff	exp@x,eval_poly@x
  2345  00F8AC  C04A  F029         	movff	exp@x+1,eval_poly@x+1
  2346  00F8B0  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
  2347  00F8B4  0ED7               	movlw	low exp@coeff
  2348  00F8B6  6E2B               	movwf	eval_poly@d,c
  2349  00F8B8  0EFE               	movlw	high exp@coeff
  2350  00F8BA  6E2C               	movwf	eval_poly@d+1,c
  2351  00F8BC  0E00               	movlw	0
  2352  00F8BE  6E2E               	movwf	eval_poly@n+1,c
  2353  00F8C0  0E09               	movlw	9
  2354  00F8C2  6E2D               	movwf	eval_poly@n,c
  2355  00F8C4  EC8E  F075         	call	_eval_poly	;wreg free
  2356  00F8C8  C028  F034         	movff	?_eval_poly,ldexp@value
  2357  00F8CC  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
  2358  00F8D0  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
  2359  00F8D4  C04F  F037         	movff	exp@exponent,ldexp@newexp
  2360  00F8D8  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
  2361  00F8DC  EC2D  F075         	call	_ldexp	;wreg free
  2362  00F8E0  C034  F049         	movff	?_ldexp,exp@x
  2363  00F8E4  C035  F04A         	movff	?_ldexp+1,exp@x+1
  2364  00F8E8  C036  F04B         	movff	?_ldexp+2,exp@x+2
  2365  00F8EC  5051               	movf	exp@sign,w,c
  2366  00F8EE  B4D8               	btfsc	status,2,c
  2367  00F8F0  D025               	goto	l917
  2368  00F8F2  2849               	incf	exp@x,w,c
  2369  00F8F4  E10E               	bnz	l2713
  2370  00F8F6  0E7F               	movlw	127
  2371  00F8F8  184A               	xorwf	exp@x+1,w,c
  2372  00F8FA  E10B               	bnz	l2713
  2373  00F8FC  0E7F               	movlw	127
  2374  00F8FE  184B               	xorwf	exp@x+2,w,c
  2375  00F900  A4D8               	btfss	status,2,c
  2376  00F902  D007               	goto	l2713
  2377  00F904  0E00               	movlw	0
  2378  00F906  6E49               	movwf	?_exp,c
  2379  00F908  0E00               	movlw	0
  2380  00F90A  6E4A               	movwf	?_exp+1,c
  2381  00F90C  0E00               	movlw	0
  2382  00F90E  6E4B               	movwf	?_exp+2,c
  2383  00F910  0012               	return	
  2384  00F912                     l2713:
  2385  00F912  0E00               	movlw	0
  2386  00F914  6E09               	movwf	___ftdiv@f1,c
  2387  00F916  0E80               	movlw	128
  2388  00F918  6E0A               	movwf	___ftdiv@f1+1,c
  2389  00F91A  0E3F               	movlw	63
  2390  00F91C  6E0B               	movwf	___ftdiv@f1+2,c
  2391  00F91E  C049  F00C         	movff	exp@x,___ftdiv@f2
  2392  00F922  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
  2393  00F926  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
  2394  00F92A  EC66  F076         	call	___ftdiv	;wreg free
  2395  00F92E  C009  F049         	movff	?___ftdiv,?_exp
  2396  00F932  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
  2397  00F936  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
  2398  00F93A  0012               	return	
  2399  00F93C                     l917:
  2400  00F93C  C049  F049         	movff	exp@x,?_exp
  2401  00F940  C04A  F04A         	movff	exp@x+1,?_exp+1
  2402  00F944  C04B  F04B         	movff	exp@x+2,?_exp+2
  2403  00F948  0012               	return		;funcret
  2404  00F94A                     __end_of_exp:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           prodh	equ	0xFF4
  2411                           prodl	equ	0xFF3
  2412                           intcon2	equ	0xFF1
  2413                           indf2	equ	0xFDF
  2414                           fsr2h	equ	0xFDA
  2415                           fsr2l	equ	0xFD9
  2416                           status	equ	0xFD8
  2417                           
  2418 ;; *************** function _ldexp *****************
  2419 ;; Defined at:
  2420 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  value           3   51[COMRAM] unsigned char 
  2423 ;;  newexp          2   54[COMRAM] int 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;		None
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  3   51[COMRAM] int 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2435 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;Total ram usage:        7 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; This function calls:
  2442 ;;		Nothing
  2443 ;; This function is called by:
  2444 ;;		_exp
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text6
  2449  00EA5A                     __ptext6:
  2450                           	opt stack 0
  2451  00EA5A                     _ldexp:
  2452                           	opt stack 26
  2453                           
  2454                           ;incstack = 0
  2455  00EA5A  5034               	movf	ldexp@value,w,c
  2456  00EA5C  1035               	iorwf	ldexp@value+1,w,c
  2457  00EA5E  1036               	iorwf	ldexp@value+2,w,c
  2458  00EA60  A4D8               	btfss	status,2,c
  2459  00EA62  D007               	goto	l2553
  2460  00EA64  0E00               	movlw	0
  2461  00EA66  6E34               	movwf	?_ldexp,c
  2462  00EA68  0E00               	movlw	0
  2463  00EA6A  6E35               	movwf	?_ldexp+1,c
  2464  00EA6C  0E00               	movlw	0
  2465  00EA6E  6E36               	movwf	?_ldexp+2,c
  2466  00EA70  0012               	return	
  2467  00EA72                     l2553:
  2468  00EA72  5036               	movf	ldexp@value+2,w,c
  2469  00EA74  0B7F               	andlw	127
  2470  00EA76  6E39               	movwf	??_ldexp& (0+255),c
  2471  00EA78  6A3A               	clrf	(??_ldexp+1)& (0+255),c
  2472  00EA7A  90D8               	bcf	status,0,c
  2473  00EA7C  3639               	rlcf	??_ldexp,f,c
  2474  00EA7E  363A               	rlcf	??_ldexp+1,f,c
  2475  00EA80  5039               	movf	??_ldexp,w,c
  2476  00EA82  2637               	addwf	ldexp@newexp,f,c
  2477  00EA84  503A               	movf	??_ldexp+1,w,c
  2478  00EA86  2238               	addwfc	ldexp@newexp+1,f,c
  2479  00EA88  AE35               	btfss	ldexp@value+1,7,c
  2480  00EA8A  D003               	goto	u2330
  2481  00EA8C  6A39               	clrf	??_ldexp& (0+255),c
  2482  00EA8E  2A39               	incf	??_ldexp& (0+255),f,c
  2483  00EA90  D001               	goto	u2338
  2484  00EA92                     u2330:
  2485  00EA92  6A39               	clrf	??_ldexp& (0+255),c
  2486  00EA94                     u2338:
  2487  00EA94  5039               	movf	??_ldexp,w,c
  2488  00EA96  2637               	addwf	ldexp@newexp,f,c
  2489  00EA98  0E00               	movlw	0
  2490  00EA9A  2238               	addwfc	ldexp@newexp+1,f,c
  2491  00EA9C  AE38               	btfss	ldexp@newexp+1,7,c
  2492  00EA9E  D00B               	goto	l2561
  2493  00EAA0  0E00               	movlw	0
  2494  00EAA2  6E7B               	movwf	_errno+1,c
  2495  00EAA4  0E22               	movlw	34
  2496  00EAA6  6E7A               	movwf	_errno,c
  2497  00EAA8  0E00               	movlw	0
  2498  00EAAA  6E34               	movwf	?_ldexp,c
  2499  00EAAC  0E00               	movlw	0
  2500  00EAAE  6E35               	movwf	?_ldexp+1,c
  2501  00EAB0  0E00               	movlw	0
  2502  00EAB2                     L1:
  2503  00EAB2  6E36               	movwf	?_ldexp+2,c
  2504  00EAB4  0012               	return	
  2505  00EAB6                     l2561:
  2506  00EAB6  BE38               	btfsc	ldexp@newexp+1,7,c
  2507  00EAB8  D015               	goto	l2577
  2508  00EABA  0438               	decf	ldexp@newexp+1,w,c
  2509  00EABC  A0D8               	btfss	status,0,c
  2510  00EABE  D012               	goto	l2577
  2511  00EAC0  0E00               	movlw	0
  2512  00EAC2  6E7B               	movwf	_errno+1,c
  2513  00EAC4  0E22               	movlw	34
  2514  00EAC6  6E7A               	movwf	_errno,c
  2515  00EAC8  AE36               	btfss	ldexp@value+2,7,c
  2516  00EACA  D006               	goto	l2573
  2517  00EACC  0EFF               	movlw	255
  2518  00EACE  6E34               	movwf	?_ldexp,c
  2519  00EAD0  0E7F               	movlw	127
  2520  00EAD2  6E35               	movwf	?_ldexp+1,c
  2521  00EAD4  0EFF               	movlw	255
  2522  00EAD6  D7ED               	goto	L1
  2523  00EAD8                     l2573:
  2524  00EAD8  0EFF               	movlw	255
  2525  00EADA  6E34               	movwf	?_ldexp,c
  2526  00EADC  0E7F               	movlw	127
  2527  00EADE  6E35               	movwf	?_ldexp+1,c
  2528  00EAE0  0E7F               	movlw	127
  2529  00EAE2  D7E7               	goto	L1
  2530  00EAE4                     l2577:
  2531  00EAE4  3438               	rlcf	ldexp@newexp+1,w,c
  2532  00EAE6  3038               	rrcf	ldexp@newexp+1,w,c
  2533  00EAE8  6E3A               	movwf	(??_ldexp+1)& (0+255),c
  2534  00EAEA  3037               	rrcf	ldexp@newexp,w,c
  2535  00EAEC  6E39               	movwf	??_ldexp& (0+255),c
  2536  00EAEE  5036               	movf	ldexp@value+2,w,c
  2537  00EAF0  1839               	xorwf	??_ldexp,w,c
  2538  00EAF2  0B80               	andlw	-128
  2539  00EAF4  1839               	xorwf	??_ldexp,w,c
  2540  00EAF6  6E36               	movwf	ldexp@value+2,c
  2541  00EAF8  C037  F039         	movff	ldexp@newexp,??_ldexp
  2542  00EAFC  0E01               	movlw	1
  2543  00EAFE  1639               	andwf	??_ldexp,f,c
  2544  00EB00  3239               	rrcf	??_ldexp,f,c
  2545  00EB02  3239               	rrcf	??_ldexp,f,c
  2546  00EB04  5035               	movf	ldexp@value+1,w,c
  2547  00EB06  1839               	xorwf	??_ldexp,w,c
  2548  00EB08  0B7F               	andlw	-129
  2549  00EB0A  1839               	xorwf	??_ldexp,w,c
  2550  00EB0C  6E35               	movwf	ldexp@value+1,c
  2551  00EB0E  C034  F034         	movff	ldexp@value,?_ldexp
  2552  00EB12  C035  F035         	movff	ldexp@value+1,?_ldexp+1
  2553  00EB16  C036  F036         	movff	ldexp@value+2,?_ldexp+2
  2554  00EB1A  0012               	return	
  2555  00EB1C                     __end_of_ldexp:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon2	equ	0xFF1
  2564                           indf2	equ	0xFDF
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function _floor *****************
  2570 ;; Defined at:
  2571 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\floor.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  x               3   64[COMRAM] int 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  i               3   67[COMRAM] int 
  2576 ;;  expon           2   70[COMRAM] int 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  3   64[COMRAM] int 
  2579 ;; Registers used:
  2580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2586 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;Total ram usage:        8 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    2
  2593 ;; This function calls:
  2594 ;;		___altoft
  2595 ;;		___ftadd
  2596 ;;		___ftge
  2597 ;;		___fttol
  2598 ;;		_frexp
  2599 ;; This function is called by:
  2600 ;;		_exp
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text7
  2605  00EBEE                     __ptext7:
  2606                           	opt stack 0
  2607  00EBEE                     _floor:
  2608                           	opt stack 24
  2609                           
  2610                           ;incstack = 0
  2611  00EBEE  C041  F001         	movff	floor@x,frexp@value
  2612  00EBF2  C042  F002         	movff	floor@x+1,frexp@value+1
  2613  00EBF6  C043  F003         	movff	floor@x+2,frexp@value+2
  2614  00EBFA  0E47               	movlw	low floor@expon
  2615  00EBFC  6E04               	movwf	frexp@eptr,c
  2616  00EBFE  0E00               	movlw	high floor@expon
  2617  00EC00  6E05               	movwf	frexp@eptr+1,c
  2618  00EC02  EC2D  F074         	call	_frexp	;wreg free
  2619  00EC06  AE48               	btfss	floor@expon+1,7,c
  2620  00EC08  D010               	goto	l2531
  2621  00EC0A  AE43               	btfss	floor@x+2,7,c
  2622  00EC0C  D007               	goto	l2527
  2623  00EC0E  0E00               	movlw	0
  2624  00EC10  6E41               	movwf	?_floor,c
  2625  00EC12  0E80               	movlw	128
  2626  00EC14  6E42               	movwf	?_floor+1,c
  2627  00EC16  0EBF               	movlw	191
  2628  00EC18  6E43               	movwf	?_floor+2,c
  2629  00EC1A  0012               	return	
  2630  00EC1C                     l2527:
  2631  00EC1C  0E00               	movlw	0
  2632  00EC1E  6E41               	movwf	?_floor,c
  2633  00EC20  0E00               	movlw	0
  2634  00EC22  6E42               	movwf	?_floor+1,c
  2635  00EC24  0E00               	movlw	0
  2636  00EC26  6E43               	movwf	?_floor+2,c
  2637  00EC28  0012               	return	
  2638  00EC2A                     l2531:
  2639  00EC2A  5048               	movf	floor@expon+1,w,c
  2640  00EC2C  E104               	bnz	u2290
  2641  00EC2E  0E15               	movlw	21
  2642  00EC30  5C47               	subwf	floor@expon,w,c
  2643  00EC32  A0D8               	btfss	status,0,c
  2644  00EC34  D007               	goto	l2535
  2645  00EC36                     u2290:
  2646  00EC36  C041  F041         	movff	floor@x,?_floor
  2647  00EC3A  C042  F042         	movff	floor@x+1,?_floor+1
  2648  00EC3E  C043  F043         	movff	floor@x+2,?_floor+2
  2649  00EC42  0012               	return	
  2650  00EC44                     l2535:
  2651  00EC44  C041  F028         	movff	floor@x,___fttol@f1
  2652  00EC48  C042  F029         	movff	floor@x+1,___fttol@f1+1
  2653  00EC4C  C043  F02A         	movff	floor@x+2,___fttol@f1+2
  2654  00EC50  EC53  F077         	call	___fttol	;wreg free
  2655  00EC54  C028  F037         	movff	?___fttol,___altoft@c
  2656  00EC58  C029  F038         	movff	?___fttol+1,___altoft@c+1
  2657  00EC5C  C02A  F039         	movff	?___fttol+2,___altoft@c+2
  2658  00EC60  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
  2659  00EC64  EC26  F073         	call	___altoft	;wreg free
  2660  00EC68  C037  F044         	movff	?___altoft,floor@i
  2661  00EC6C  C038  F045         	movff	?___altoft+1,floor@i+1
  2662  00EC70  C039  F046         	movff	?___altoft+2,floor@i+2
  2663  00EC74  C041  F001         	movff	floor@x,___ftge@ff1
  2664  00EC78  C042  F002         	movff	floor@x+1,___ftge@ff1+1
  2665  00EC7C  C043  F003         	movff	floor@x+2,___ftge@ff1+2
  2666  00EC80  C044  F004         	movff	floor@i,___ftge@ff2
  2667  00EC84  C045  F005         	movff	floor@i+1,___ftge@ff2+1
  2668  00EC88  C046  F006         	movff	floor@i+2,___ftge@ff2+2
  2669  00EC8C  ECE5  F073         	call	___ftge	;wreg free
  2670  00EC90  B0D8               	btfsc	status,0,c
  2671  00EC92  D015               	goto	l927
  2672  00EC94  C044  F01C         	movff	floor@i,___ftadd@f1
  2673  00EC98  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
  2674  00EC9C  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
  2675  00ECA0  0E00               	movlw	0
  2676  00ECA2  6E1F               	movwf	___ftadd@f2,c
  2677  00ECA4  0E80               	movlw	128
  2678  00ECA6  6E20               	movwf	___ftadd@f2+1,c
  2679  00ECA8  0EBF               	movlw	191
  2680  00ECAA  6E21               	movwf	___ftadd@f2+2,c
  2681  00ECAC  ECDD  F07A         	call	___ftadd	;wreg free
  2682  00ECB0  C01C  F041         	movff	?___ftadd,?_floor
  2683  00ECB4  C01D  F042         	movff	?___ftadd+1,?_floor+1
  2684  00ECB8  C01E  F043         	movff	?___ftadd+2,?_floor+2
  2685  00ECBC  0012               	return	
  2686  00ECBE                     l927:
  2687  00ECBE  C044  F041         	movff	floor@i,?_floor
  2688  00ECC2  C045  F042         	movff	floor@i+1,?_floor+1
  2689  00ECC6  C046  F043         	movff	floor@i+2,?_floor+2
  2690  00ECCA  0012               	return		;funcret
  2691  00ECCC                     __end_of_floor:
  2692                           	opt stack 0
  2693                           tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           prodh	equ	0xFF4
  2698                           prodl	equ	0xFF3
  2699                           intcon2	equ	0xFF1
  2700                           indf2	equ	0xFDF
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _frexp *****************
  2706 ;; Defined at:
  2707 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\frexp.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  value           3    0[COMRAM] int 
  2710 ;;  eptr            2    3[COMRAM] PTR int 
  2711 ;;		 -> log@exponent(2), floor@expon(2), 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  3    0[COMRAM] PTR int 
  2716 ;; Registers used:
  2717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2723 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;Total ram usage:        7 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_floor
  2733 ;;		_log
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text8
  2738  00E85A                     __ptext8:
  2739                           	opt stack 0
  2740  00E85A                     _frexp:
  2741                           	opt stack 26
  2742                           
  2743                           ;incstack = 0
  2744  00E85A  5001               	movf	frexp@value,w,c
  2745  00E85C  1002               	iorwf	frexp@value+1,w,c
  2746  00E85E  1003               	iorwf	frexp@value+2,w,c
  2747  00E860  A4D8               	btfss	status,2,c
  2748  00E862  D00F               	goto	l2417
  2749  00E864  C004  FFD9         	movff	frexp@eptr,fsr2l
  2750  00E868  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2751  00E86C  0E00               	movlw	0
  2752  00E86E  6EDE               	movwf	postinc2,c
  2753  00E870  0E00               	movlw	0
  2754  00E872  6EDD               	movwf	postdec2,c
  2755  00E874  0E00               	movlw	0
  2756  00E876  6E01               	movwf	?_frexp,c
  2757  00E878  0E00               	movlw	0
  2758  00E87A  6E02               	movwf	?_frexp+1,c
  2759  00E87C  0E00               	movlw	0
  2760  00E87E  6E03               	movwf	?_frexp+2,c
  2761  00E880  0012               	return	
  2762  00E882                     l2417:
  2763  00E882  5003               	movf	frexp@value+2,w,c
  2764  00E884  0B7F               	andlw	127
  2765  00E886  6E06               	movwf	??_frexp& (0+255),c
  2766  00E888  6A07               	clrf	(??_frexp+1)& (0+255),c
  2767  00E88A  90D8               	bcf	status,0,c
  2768  00E88C  3606               	rlcf	??_frexp,f,c
  2769  00E88E  3607               	rlcf	??_frexp+1,f,c
  2770  00E890  C004  FFD9         	movff	frexp@eptr,fsr2l
  2771  00E894  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2772  00E898  C006  FFDE         	movff	??_frexp,postinc2
  2773  00E89C  C007  FFDD         	movff	??_frexp+1,postdec2
  2774  00E8A0  AE02               	btfss	frexp@value+1,7,c
  2775  00E8A2  D003               	goto	u2180
  2776  00E8A4  6A06               	clrf	??_frexp& (0+255),c
  2777  00E8A6  2A06               	incf	??_frexp& (0+255),f,c
  2778  00E8A8  D001               	goto	u2188
  2779  00E8AA                     u2180:
  2780  00E8AA  6A06               	clrf	??_frexp& (0+255),c
  2781  00E8AC                     u2188:
  2782  00E8AC  5006               	movf	??_frexp,w,c
  2783  00E8AE  C004  FFD9         	movff	frexp@eptr,fsr2l
  2784  00E8B2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2785  00E8B6  12DE               	iorwf	postinc2,f,c
  2786  00E8B8  0E00               	movlw	0
  2787  00E8BA  12DD               	iorwf	postdec2,f,c
  2788  00E8BC  C004  FFD9         	movff	frexp@eptr,fsr2l
  2789  00E8C0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2790  00E8C4  0E82               	movlw	130
  2791  00E8C6  26DE               	addwf	postinc2,f,c
  2792  00E8C8  0EFF               	movlw	255
  2793  00E8CA  22DD               	addwfc	postdec2,f,c
  2794  00E8CC  8003               	bsf	frexp@value+2,0,c
  2795  00E8CE  8203               	bsf	frexp@value+2,1,c
  2796  00E8D0  8403               	bsf	frexp@value+2,2,c
  2797  00E8D2  8603               	bsf	frexp@value+2,3,c
  2798  00E8D4  8803               	bsf	frexp@value+2,4,c
  2799  00E8D6  8A03               	bsf	frexp@value+2,5,c
  2800  00E8D8  9C03               	bcf	frexp@value+2,6,c
  2801  00E8DA  9E02               	bcf	frexp@value+1,7,c
  2802  00E8DC  C001  F001         	movff	frexp@value,?_frexp
  2803  00E8E0  C002  F002         	movff	frexp@value+1,?_frexp+1
  2804  00E8E4  C003  F003         	movff	frexp@value+2,?_frexp+2
  2805  00E8E8  0012               	return	
  2806  00E8EA                     __end_of_frexp:
  2807                           	opt stack 0
  2808                           tblptru	equ	0xFF8
  2809                           tblptrh	equ	0xFF7
  2810                           tblptrl	equ	0xFF6
  2811                           tablat	equ	0xFF5
  2812                           prodh	equ	0xFF4
  2813                           prodl	equ	0xFF3
  2814                           intcon2	equ	0xFF1
  2815                           indf2	equ	0xFDF
  2816                           postinc2	equ	0xFDE
  2817                           postdec2	equ	0xFDD
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function ___fttol *****************
  2823 ;; Defined at:
  2824 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  f1              3   39[COMRAM] float 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  lval            4   49[COMRAM] unsigned long 
  2829 ;;  exp1            1   53[COMRAM] unsigned char 
  2830 ;;  sign1           1   48[COMRAM] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  4   39[COMRAM] long 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:       15 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_dec_to_hex
  2850 ;;		_pow
  2851 ;;		_exp
  2852 ;;		_floor
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text9
  2857  00EEA6                     __ptext9:
  2858                           	opt stack 0
  2859  00EEA6                     ___fttol:
  2860                           	opt stack 25
  2861                           
  2862                           ;incstack = 0
  2863  00EEA6  C02A  F02C         	movff	___fttol@f1+2,??___fttol
  2864  00EEAA  6A2D               	clrf	(??___fttol+1)& (0+255),c
  2865  00EEAC  6A2E               	clrf	(??___fttol+2)& (0+255),c
  2866  00EEAE  3429               	rlcf	___fttol@f1+1,w,c
  2867  00EEB0  362C               	rlcf	??___fttol& (0+255),f,c
  2868  00EEB2  E301               	bnc	u2091
  2869  00EEB4  802D               	bsf	(??___fttol+1)& (0+255),0,c
  2870  00EEB6                     u2091:
  2871  00EEB6  502C               	movf	??___fttol,w,c
  2872  00EEB8  6E36               	movwf	___fttol@exp1,c
  2873  00EEBA  5036               	movf	___fttol@exp1,w,c
  2874  00EEBC  A4D8               	btfss	status,2,c
  2875  00EEBE  D009               	goto	l2369
  2876  00EEC0  0E00               	movlw	0
  2877  00EEC2  6E28               	movwf	?___fttol,c
  2878  00EEC4  0E00               	movlw	0
  2879  00EEC6  6E29               	movwf	?___fttol+1,c
  2880  00EEC8  0E00               	movlw	0
  2881  00EECA  6E2A               	movwf	?___fttol+2,c
  2882  00EECC  0E00               	movlw	0
  2883  00EECE  6E2B               	movwf	?___fttol+3,c
  2884  00EED0  0012               	return	
  2885  00EED2                     l2369:
  2886  00EED2  0E17               	movlw	23
  2887  00EED4  6E2C               	movwf	??___fttol& (0+255),c
  2888  00EED6  C028  F02D         	movff	___fttol@f1,??___fttol+1
  2889  00EEDA  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
  2890  00EEDE  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
  2891  00EEE2  282C               	incf	??___fttol,w,c
  2892  00EEE4  6E30               	movwf	(??___fttol+4)& (0+255),c
  2893  00EEE6  D004               	goto	u2110
  2894  00EEE8                     u2115:
  2895  00EEE8  90D8               	bcf	status,0,c
  2896  00EEEA  322F               	rrcf	??___fttol+3,f,c
  2897  00EEEC  322E               	rrcf	??___fttol+2,f,c
  2898  00EEEE  322D               	rrcf	??___fttol+1,f,c
  2899  00EEF0                     u2110:
  2900  00EEF0  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
  2901  00EEF2  D7FA               	goto	u2115
  2902  00EEF4  502D               	movf	??___fttol+1,w,c
  2903  00EEF6  6E31               	movwf	___fttol@sign1,c
  2904  00EEF8  8E29               	bsf	___fttol@f1+1,7,c
  2905  00EEFA  0EFF               	movlw	255
  2906  00EEFC  1628               	andwf	___fttol@f1,f,c
  2907  00EEFE  0EFF               	movlw	255
  2908  00EF00  1629               	andwf	___fttol@f1+1,f,c
  2909  00EF02  0E00               	movlw	0
  2910  00EF04  162A               	andwf	___fttol@f1+2,f,c
  2911  00EF06  5028               	movf	___fttol@f1,w,c
  2912  00EF08  6E32               	movwf	___fttol@lval,c
  2913  00EF0A  5029               	movf	___fttol@f1+1,w,c
  2914  00EF0C  6E33               	movwf	___fttol@lval+1,c
  2915  00EF0E  502A               	movf	___fttol@f1+2,w,c
  2916  00EF10  6E34               	movwf	___fttol@lval+2,c
  2917  00EF12  6A35               	clrf	___fttol@lval+3,c
  2918  00EF14  0E8E               	movlw	142
  2919  00EF16  5E36               	subwf	___fttol@exp1,f,c
  2920  00EF18  AE36               	btfss	___fttol@exp1,7,c
  2921  00EF1A  D016               	goto	l2391
  2922  00EF1C  5036               	movf	___fttol@exp1,w,c
  2923  00EF1E  0A80               	xorlw	128
  2924  00EF20  0F8F               	addlw	143
  2925  00EF22  B0D8               	btfsc	status,0,c
  2926  00EF24  D009               	goto	l2387
  2927  00EF26  0E00               	movlw	0
  2928  00EF28  6E28               	movwf	?___fttol,c
  2929  00EF2A  0E00               	movlw	0
  2930  00EF2C  6E29               	movwf	?___fttol+1,c
  2931  00EF2E  0E00               	movlw	0
  2932  00EF30  6E2A               	movwf	?___fttol+2,c
  2933  00EF32  0E00               	movlw	0
  2934  00EF34  6E2B               	movwf	?___fttol+3,c
  2935  00EF36  0012               	return	
  2936  00EF38                     l2387:
  2937  00EF38  90D8               	bcf	status,0,c
  2938  00EF3A  3235               	rrcf	___fttol@lval+3,f,c
  2939  00EF3C  3234               	rrcf	___fttol@lval+2,f,c
  2940  00EF3E  3233               	rrcf	___fttol@lval+1,f,c
  2941  00EF40  3232               	rrcf	___fttol@lval,f,c
  2942  00EF42  3E36               	incfsz	___fttol@exp1,f,c
  2943  00EF44  D7F9               	goto	l2387
  2944  00EF46  D015               	goto	l2401
  2945  00EF48                     l2391:
  2946  00EF48  0E17               	movlw	23
  2947  00EF4A  6436               	cpfsgt	___fttol@exp1,c
  2948  00EF4C  D00F               	goto	l2399
  2949  00EF4E  0E00               	movlw	0
  2950  00EF50  6E28               	movwf	?___fttol,c
  2951  00EF52  0E00               	movlw	0
  2952  00EF54  6E29               	movwf	?___fttol+1,c
  2953  00EF56  0E00               	movlw	0
  2954  00EF58  6E2A               	movwf	?___fttol+2,c
  2955  00EF5A  0E00               	movlw	0
  2956  00EF5C  6E2B               	movwf	?___fttol+3,c
  2957  00EF5E  0012               	return	
  2958  00EF60                     l2397:
  2959  00EF60  90D8               	bcf	status,0,c
  2960  00EF62  3632               	rlcf	___fttol@lval,f,c
  2961  00EF64  3633               	rlcf	___fttol@lval+1,f,c
  2962  00EF66  3634               	rlcf	___fttol@lval+2,f,c
  2963  00EF68  3635               	rlcf	___fttol@lval+3,f,c
  2964  00EF6A  0636               	decf	___fttol@exp1,f,c
  2965  00EF6C                     l2399:
  2966  00EF6C  5036               	movf	___fttol@exp1,w,c
  2967  00EF6E  A4D8               	btfss	status,2,c
  2968  00EF70  D7F7               	goto	l2397
  2969  00EF72                     l2401:
  2970  00EF72  5031               	movf	___fttol@sign1,w,c
  2971  00EF74  B4D8               	btfsc	status,2,c
  2972  00EF76  D008               	goto	l2405
  2973  00EF78  1E35               	comf	___fttol@lval+3,f,c
  2974  00EF7A  1E34               	comf	___fttol@lval+2,f,c
  2975  00EF7C  1E33               	comf	___fttol@lval+1,f,c
  2976  00EF7E  6C32               	negf	___fttol@lval,c
  2977  00EF80  0E00               	movlw	0
  2978  00EF82  2233               	addwfc	___fttol@lval+1,f,c
  2979  00EF84  2234               	addwfc	___fttol@lval+2,f,c
  2980  00EF86  2235               	addwfc	___fttol@lval+3,f,c
  2981  00EF88                     l2405:
  2982  00EF88  C032  F028         	movff	___fttol@lval,?___fttol
  2983  00EF8C  C033  F029         	movff	___fttol@lval+1,?___fttol+1
  2984  00EF90  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
  2985  00EF94  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
  2986  00EF98  0012               	return	
  2987  00EF9A                     __end_of___fttol:
  2988                           	opt stack 0
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           prodh	equ	0xFF4
  2994                           prodl	equ	0xFF3
  2995                           intcon2	equ	0xFF1
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function ___ftge *****************
  3004 ;; Defined at:
  3005 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  ff1             3    0[COMRAM] float 
  3008 ;;  ff2             3    3[COMRAM] float 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;		None               void
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3020 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;Total ram usage:        9 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_pow
  3030 ;;		_exp
  3031 ;;		_floor
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text10
  3036  00E7CA                     __ptext10:
  3037                           	opt stack 0
  3038  00E7CA                     ___ftge:
  3039                           	opt stack 25
  3040                           
  3041                           ;incstack = 0
  3042  00E7CA  AE03               	btfss	___ftge@ff1+2,7,c
  3043  00E7CC  D016               	goto	l2349
  3044  00E7CE  C001  F007         	movff	___ftge@ff1,??___ftge
  3045  00E7D2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  3046  00E7D6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  3047  00E7DA  1E07               	comf	??___ftge,f,c
  3048  00E7DC  1E08               	comf	??___ftge+1,f,c
  3049  00E7DE  1E09               	comf	??___ftge+2,f,c
  3050  00E7E0  2A07               	incf	??___ftge,f,c
  3051  00E7E2  0E00               	movlw	0
  3052  00E7E4  2208               	addwfc	??___ftge+1,f,c
  3053  00E7E6  2209               	addwfc	??___ftge+2,f,c
  3054  00E7E8  0E00               	movlw	0
  3055  00E7EA  2407               	addwf	??___ftge,w,c
  3056  00E7EC  6E01               	movwf	___ftge@ff1,c
  3057  00E7EE  0E00               	movlw	0
  3058  00E7F0  2008               	addwfc	??___ftge+1,w,c
  3059  00E7F2  6E02               	movwf	___ftge@ff1+1,c
  3060  00E7F4  0E80               	movlw	128
  3061  00E7F6  2009               	addwfc	??___ftge+2,w,c
  3062  00E7F8  6E03               	movwf	___ftge@ff1+2,c
  3063  00E7FA                     l2349:
  3064  00E7FA  AE06               	btfss	___ftge@ff2+2,7,c
  3065  00E7FC  D016               	goto	l2353
  3066  00E7FE  C004  F007         	movff	___ftge@ff2,??___ftge
  3067  00E802  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  3068  00E806  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  3069  00E80A  1E07               	comf	??___ftge,f,c
  3070  00E80C  1E08               	comf	??___ftge+1,f,c
  3071  00E80E  1E09               	comf	??___ftge+2,f,c
  3072  00E810  2A07               	incf	??___ftge,f,c
  3073  00E812  0E00               	movlw	0
  3074  00E814  2208               	addwfc	??___ftge+1,f,c
  3075  00E816  2209               	addwfc	??___ftge+2,f,c
  3076  00E818  0E00               	movlw	0
  3077  00E81A  2407               	addwf	??___ftge,w,c
  3078  00E81C  6E04               	movwf	___ftge@ff2,c
  3079  00E81E  0E00               	movlw	0
  3080  00E820  2008               	addwfc	??___ftge+1,w,c
  3081  00E822  6E05               	movwf	___ftge@ff2+1,c
  3082  00E824  0E80               	movlw	128
  3083  00E826  2009               	addwfc	??___ftge+2,w,c
  3084  00E828  6E06               	movwf	___ftge@ff2+2,c
  3085  00E82A                     l2353:
  3086  00E82A  0E00               	movlw	0
  3087  00E82C  1A01               	xorwf	___ftge@ff1,f,c
  3088  00E82E  0E00               	movlw	0
  3089  00E830  1A02               	xorwf	___ftge@ff1+1,f,c
  3090  00E832  0E80               	movlw	128
  3091  00E834  1A03               	xorwf	___ftge@ff1+2,f,c
  3092  00E836  0E00               	movlw	0
  3093  00E838  1A04               	xorwf	___ftge@ff2,f,c
  3094  00E83A  0E00               	movlw	0
  3095  00E83C  1A05               	xorwf	___ftge@ff2+1,f,c
  3096  00E83E  0E80               	movlw	128
  3097  00E840  1A06               	xorwf	___ftge@ff2+2,f,c
  3098  00E842  5004               	movf	___ftge@ff2,w,c
  3099  00E844  5C01               	subwf	___ftge@ff1,w,c
  3100  00E846  5005               	movf	___ftge@ff2+1,w,c
  3101  00E848  5802               	subwfb	___ftge@ff1+1,w,c
  3102  00E84A  5006               	movf	___ftge@ff2+2,w,c
  3103  00E84C  5803               	subwfb	___ftge@ff1+2,w,c
  3104  00E84E  B0D8               	btfsc	status,0,c
  3105  00E850  D002               	goto	l2359
  3106  00E852  90D8               	bcf	status,0,c
  3107  00E854  0012               	return	
  3108  00E856                     l2359:
  3109  00E856  80D8               	bsf	status,0,c
  3110  00E858  0012               	return	
  3111  00E85A                     __end_of___ftge:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon2	equ	0xFF1
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function ___altoft *****************
  3128 ;; Defined at:
  3129 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  c               4   54[COMRAM] long 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  sign            1   63[COMRAM] unsigned char 
  3134 ;;  exp             1   62[COMRAM] unsigned char 
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  3   54[COMRAM] float 
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, status,0, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3144 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;Total ram usage:       10 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    1
  3151 ;; This function calls:
  3152 ;;		___ftpack
  3153 ;; This function is called by:
  3154 ;;		_floor
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text11
  3159  00E64C                     __ptext11:
  3160                           	opt stack 0
  3161  00E64C                     ___altoft:
  3162                           	opt stack 24
  3163                           
  3164                           ;incstack = 0
  3165  00E64C  0E00               	movlw	0
  3166  00E64E  6E40               	movwf	___altoft@sign,c
  3167  00E650  0E8E               	movlw	142
  3168  00E652  6E3F               	movwf	___altoft@exp,c
  3169  00E654  AE3A               	btfss	___altoft@c+3,7,c
  3170  00E656  D011               	goto	l2221
  3171  00E658  1E3A               	comf	___altoft@c+3,f,c
  3172  00E65A  1E39               	comf	___altoft@c+2,f,c
  3173  00E65C  1E38               	comf	___altoft@c+1,f,c
  3174  00E65E  6C37               	negf	___altoft@c,c
  3175  00E660  0E00               	movlw	0
  3176  00E662  2238               	addwfc	___altoft@c+1,f,c
  3177  00E664  2239               	addwfc	___altoft@c+2,f,c
  3178  00E666  223A               	addwfc	___altoft@c+3,f,c
  3179  00E668  0E01               	movlw	1
  3180  00E66A  6E40               	movwf	___altoft@sign,c
  3181  00E66C  D006               	goto	l2221
  3182  00E66E                     l2219:
  3183  00E66E  90D8               	bcf	status,0,c
  3184  00E670  323A               	rrcf	___altoft@c+3,f,c
  3185  00E672  3239               	rrcf	___altoft@c+2,f,c
  3186  00E674  3238               	rrcf	___altoft@c+1,f,c
  3187  00E676  3237               	rrcf	___altoft@c,f,c
  3188  00E678  2A3F               	incf	___altoft@exp,f,c
  3189  00E67A                     l2221:
  3190  00E67A  0E00               	movlw	0
  3191  00E67C  1437               	andwf	___altoft@c,w,c
  3192  00E67E  6E3B               	movwf	??___altoft& (0+255),c
  3193  00E680  0E00               	movlw	0
  3194  00E682  1438               	andwf	___altoft@c+1,w,c
  3195  00E684  6E3C               	movwf	(??___altoft+1)& (0+255),c
  3196  00E686  0E00               	movlw	0
  3197  00E688  1439               	andwf	___altoft@c+2,w,c
  3198  00E68A  6E3D               	movwf	(??___altoft+2)& (0+255),c
  3199  00E68C  0EFF               	movlw	255
  3200  00E68E  143A               	andwf	___altoft@c+3,w,c
  3201  00E690  6E3E               	movwf	(??___altoft+3)& (0+255),c
  3202  00E692  503B               	movf	??___altoft,w,c
  3203  00E694  103C               	iorwf	??___altoft+1,w,c
  3204  00E696  103D               	iorwf	??___altoft+2,w,c
  3205  00E698  103E               	iorwf	??___altoft+3,w,c
  3206  00E69A  A4D8               	btfss	status,2,c
  3207  00E69C  D7E8               	goto	l2219
  3208  00E69E  C037  F001         	movff	___altoft@c,___ftpack@arg
  3209  00E6A2  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3210  00E6A6  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3211  00E6AA  C03F  F004         	movff	___altoft@exp,___ftpack@exp
  3212  00E6AE  C040  F005         	movff	___altoft@sign,___ftpack@sign
  3213  00E6B2  EC75  F074         	call	___ftpack	;wreg free
  3214  00E6B6  C001  F037         	movff	?___ftpack,?___altoft
  3215  00E6BA  C002  F038         	movff	?___ftpack+1,?___altoft+1
  3216  00E6BE  C003  F039         	movff	?___ftpack+2,?___altoft+2
  3217  00E6C2  0012               	return	
  3218  00E6C4                     __end_of___altoft:
  3219                           	opt stack 0
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           intcon2	equ	0xFF1
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           fsr2h	equ	0xFDA
  3231                           fsr2l	equ	0xFD9
  3232                           status	equ	0xFD8
  3233                           
  3234 ;; *************** function _eval_poly *****************
  3235 ;; Defined at:
  3236 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\evalpoly.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  x               3   39[COMRAM] float 
  3239 ;;  d               2   42[COMRAM] PTR const 
  3240 ;;		 -> log@coeff(27), exp@coeff(30), 
  3241 ;;  n               2   44[COMRAM] int 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  res             3   48[COMRAM] int 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  3   39[COMRAM] int 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3253 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;Total ram usage:       12 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    2
  3260 ;; This function calls:
  3261 ;;		___ftadd
  3262 ;;		___ftmul
  3263 ;;		___wmul
  3264 ;; This function is called by:
  3265 ;;		_exp
  3266 ;;		_log
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text12
  3271  00EB1C                     __ptext12:
  3272                           	opt stack 0
  3273  00EB1C                     _eval_poly:
  3274                           	opt stack 24
  3275                           
  3276                           ;incstack = 0
  3277  00EB1C  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  3278  00EB20  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3279  00EB24  0E00               	movlw	0
  3280  00EB26  6E04               	movwf	___wmul@multiplicand+1,c
  3281  00EB28  0E03               	movlw	3
  3282  00EB2A  6E03               	movwf	___wmul@multiplicand,c
  3283  00EB2C  EC2C  F071         	call	___wmul	;wreg free
  3284  00EB30  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  3285  00EB34  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  3286  00EB38  5001               	movf	?___wmul,w,c
  3287  00EB3A  262F               	addwf	??_eval_poly,f,c
  3288  00EB3C  5002               	movf	?___wmul+1,w,c
  3289  00EB3E  2230               	addwfc	??_eval_poly+1,f,c
  3290  00EB40  C02F  FFF6         	movff	??_eval_poly,tblptrl
  3291  00EB44  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  3292  00EB48                     	if	0	;tblptru may be non-zero
  3293  00EB48                     	endif
  3294  00EB48                     	if	0	;tblptru may be non-zero
  3295  00EB48                     	endif
  3296  00EB48  0009               	tblrd		*+
  3297  00EB4A  CFF5 F031          	movff	tablat,eval_poly@res
  3298  00EB4E  0009               	tblrd		*+
  3299  00EB50  CFF5 F032          	movff	tablat,eval_poly@res+1
  3300  00EB54  000A               	tblrd		*-
  3301  00EB56  CFF5 F033          	movff	tablat,eval_poly@res+2
  3302  00EB5A  D03E               	goto	l2545
  3303  00EB5C                     l2543:
  3304  00EB5C  C031  F010         	movff	eval_poly@res,___ftmul@f2
  3305  00EB60  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
  3306  00EB64  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
  3307  00EB68  C028  F00D         	movff	eval_poly@x,___ftmul@f1
  3308  00EB6C  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
  3309  00EB70  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
  3310  00EB74  ECD9  F076         	call	___ftmul	;wreg free
  3311  00EB78  C00D  F01C         	movff	?___ftmul,___ftadd@f1
  3312  00EB7C  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
  3313  00EB80  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
  3314  00EB84  0E00               	movlw	0
  3315  00EB86  6E04               	movwf	___wmul@multiplicand+1,c
  3316  00EB88  0E03               	movlw	3
  3317  00EB8A  6E03               	movwf	___wmul@multiplicand,c
  3318  00EB8C  062D               	decf	eval_poly@n,f,c
  3319  00EB8E  A0D8               	btfss	status,0,c
  3320  00EB90  062E               	decf	eval_poly@n+1,f,c
  3321  00EB92  C02D  F001         	movff	eval_poly@n,___wmul@multiplier
  3322  00EB96  C02E  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  3323  00EB9A  EC2C  F071         	call	___wmul	;wreg free
  3324  00EB9E  C02B  F02F         	movff	eval_poly@d,??_eval_poly
  3325  00EBA2  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
  3326  00EBA6  5001               	movf	?___wmul,w,c
  3327  00EBA8  262F               	addwf	??_eval_poly,f,c
  3328  00EBAA  5002               	movf	?___wmul+1,w,c
  3329  00EBAC  2230               	addwfc	??_eval_poly+1,f,c
  3330  00EBAE  C02F  FFF6         	movff	??_eval_poly,tblptrl
  3331  00EBB2  C030  FFF7         	movff	??_eval_poly+1,tblptrh
  3332  00EBB6                     	if	0	;tblptru may be non-zero
  3333  00EBB6                     	endif
  3334  00EBB6                     	if	0	;tblptru may be non-zero
  3335  00EBB6                     	endif
  3336  00EBB6  0009               	tblrd		*+
  3337  00EBB8  CFF5 F01F          	movff	tablat,___ftadd@f2
  3338  00EBBC  0009               	tblrd		*+
  3339  00EBBE  CFF5 F020          	movff	tablat,___ftadd@f2+1
  3340  00EBC2  000A               	tblrd		*-
  3341  00EBC4  CFF5 F021          	movff	tablat,___ftadd@f2+2
  3342  00EBC8  ECDD  F07A         	call	___ftadd	;wreg free
  3343  00EBCC  C01C  F031         	movff	?___ftadd,eval_poly@res
  3344  00EBD0  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
  3345  00EBD4  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
  3346  00EBD8                     l2545:
  3347  00EBD8  502D               	movf	eval_poly@n,w,c
  3348  00EBDA  102E               	iorwf	eval_poly@n+1,w,c
  3349  00EBDC  A4D8               	btfss	status,2,c
  3350  00EBDE  D7BE               	goto	l2543
  3351  00EBE0  C031  F028         	movff	eval_poly@res,?_eval_poly
  3352  00EBE4  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
  3353  00EBE8  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
  3354  00EBEC  0012               	return		;funcret
  3355  00EBEE                     __end_of_eval_poly:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon2	equ	0xFF1
  3364                           indf2	equ	0xFDF
  3365                           postinc2	equ	0xFDE
  3366                           postdec2	equ	0xFDD
  3367                           fsr2h	equ	0xFDA
  3368                           fsr2l	equ	0xFD9
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function ___ftmul *****************
  3372 ;; Defined at:
  3373 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  f1              3   12[COMRAM] float 
  3376 ;;  f2              3   15[COMRAM] float 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  3379 ;;  sign            1   26[COMRAM] unsigned char 
  3380 ;;  cntr            1   25[COMRAM] unsigned char 
  3381 ;;  exp             1   21[COMRAM] unsigned char 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  3   12[COMRAM] float 
  3384 ;; Registers used:
  3385 ;;		wreg, status,2, status,0, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:       15 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    1
  3398 ;; This function calls:
  3399 ;;		___ftpack
  3400 ;; This function is called by:
  3401 ;;		_dec_to_hex
  3402 ;;		_pow
  3403 ;;		_exp
  3404 ;;		_log
  3405 ;;		_eval_poly
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text13
  3410  00EDB2                     __ptext13:
  3411                           	opt stack 0
  3412  00EDB2                     ___ftmul:
  3413                           	opt stack 24
  3414                           
  3415                           ;incstack = 0
  3416  00EDB2  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  3417  00EDB6  6A14               	clrf	(??___ftmul+1)& (0+255),c
  3418  00EDB8  6A15               	clrf	(??___ftmul+2)& (0+255),c
  3419  00EDBA  340E               	rlcf	___ftmul@f1+1,w,c
  3420  00EDBC  3613               	rlcf	??___ftmul& (0+255),f,c
  3421  00EDBE  E301               	bnc	u2001
  3422  00EDC0  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  3423  00EDC2                     u2001:
  3424  00EDC2  5013               	movf	??___ftmul,w,c
  3425  00EDC4  6E16               	movwf	___ftmul@exp,c
  3426  00EDC6  5016               	movf	___ftmul@exp,w,c
  3427  00EDC8  A4D8               	btfss	status,2,c
  3428  00EDCA  D007               	goto	l2303
  3429  00EDCC  0E00               	movlw	0
  3430  00EDCE  6E0D               	movwf	?___ftmul,c
  3431  00EDD0  0E00               	movlw	0
  3432  00EDD2  6E0E               	movwf	?___ftmul+1,c
  3433  00EDD4  0E00               	movlw	0
  3434  00EDD6  6E0F               	movwf	?___ftmul+2,c
  3435  00EDD8  0012               	return	
  3436  00EDDA                     l2303:
  3437  00EDDA  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  3438  00EDDE  6A14               	clrf	(??___ftmul+1)& (0+255),c
  3439  00EDE0  6A15               	clrf	(??___ftmul+2)& (0+255),c
  3440  00EDE2  3411               	rlcf	___ftmul@f2+1,w,c
  3441  00EDE4  3613               	rlcf	??___ftmul& (0+255),f,c
  3442  00EDE6  E301               	bnc	u2021
  3443  00EDE8  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  3444  00EDEA                     u2021:
  3445  00EDEA  5013               	movf	??___ftmul,w,c
  3446  00EDEC  6E1B               	movwf	___ftmul@sign,c
  3447  00EDEE  501B               	movf	___ftmul@sign,w,c
  3448  00EDF0  A4D8               	btfss	status,2,c
  3449  00EDF2  D007               	goto	l2309
  3450  00EDF4  0E00               	movlw	0
  3451  00EDF6  6E0D               	movwf	?___ftmul,c
  3452  00EDF8  0E00               	movlw	0
  3453  00EDFA  6E0E               	movwf	?___ftmul+1,c
  3454  00EDFC  0E00               	movlw	0
  3455  00EDFE  6E0F               	movwf	?___ftmul+2,c
  3456  00EE00  0012               	return	
  3457  00EE02                     l2309:
  3458  00EE02  501B               	movf	___ftmul@sign,w,c
  3459  00EE04  0F7B               	addlw	123
  3460  00EE06  2616               	addwf	___ftmul@exp,f,c
  3461  00EE08  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  3462  00EE0C  5012               	movf	___ftmul@f2+2,w,c
  3463  00EE0E  1A1B               	xorwf	___ftmul@sign,f,c
  3464  00EE10  0E80               	movlw	128
  3465  00EE12  161B               	andwf	___ftmul@sign,f,c
  3466  00EE14  8E0E               	bsf	___ftmul@f1+1,7,c
  3467  00EE16  8E11               	bsf	___ftmul@f2+1,7,c
  3468  00EE18  0EFF               	movlw	255
  3469  00EE1A  1610               	andwf	___ftmul@f2,f,c
  3470  00EE1C  0EFF               	movlw	255
  3471  00EE1E  1611               	andwf	___ftmul@f2+1,f,c
  3472  00EE20  0E00               	movlw	0
  3473  00EE22  1612               	andwf	___ftmul@f2+2,f,c
  3474  00EE24  0E00               	movlw	0
  3475  00EE26  6E17               	movwf	___ftmul@f3_as_product,c
  3476  00EE28  0E00               	movlw	0
  3477  00EE2A  6E18               	movwf	___ftmul@f3_as_product+1,c
  3478  00EE2C  0E00               	movlw	0
  3479  00EE2E  6E19               	movwf	___ftmul@f3_as_product+2,c
  3480  00EE30  0E07               	movlw	7
  3481  00EE32  6E1A               	movwf	___ftmul@cntr,c
  3482  00EE34                     l2323:
  3483  00EE34  A00D               	btfss	___ftmul@f1,0,c
  3484  00EE36  D006               	goto	l2327
  3485  00EE38  5010               	movf	___ftmul@f2,w,c
  3486  00EE3A  2617               	addwf	___ftmul@f3_as_product,f,c
  3487  00EE3C  5011               	movf	___ftmul@f2+1,w,c
  3488  00EE3E  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  3489  00EE40  5012               	movf	___ftmul@f2+2,w,c
  3490  00EE42  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  3491  00EE44                     l2327:
  3492  00EE44  90D8               	bcf	status,0,c
  3493  00EE46  320F               	rrcf	___ftmul@f1+2,f,c
  3494  00EE48  320E               	rrcf	___ftmul@f1+1,f,c
  3495  00EE4A  320D               	rrcf	___ftmul@f1,f,c
  3496  00EE4C  90D8               	bcf	status,0,c
  3497  00EE4E  3610               	rlcf	___ftmul@f2,f,c
  3498  00EE50  3611               	rlcf	___ftmul@f2+1,f,c
  3499  00EE52  3612               	rlcf	___ftmul@f2+2,f,c
  3500  00EE54  2E1A               	decfsz	___ftmul@cntr,f,c
  3501  00EE56  D7EE               	goto	l2323
  3502  00EE58  0E09               	movlw	9
  3503  00EE5A  6E1A               	movwf	___ftmul@cntr,c
  3504  00EE5C                     l2333:
  3505  00EE5C  A00D               	btfss	___ftmul@f1,0,c
  3506  00EE5E  D006               	goto	l2337
  3507  00EE60  5010               	movf	___ftmul@f2,w,c
  3508  00EE62  2617               	addwf	___ftmul@f3_as_product,f,c
  3509  00EE64  5011               	movf	___ftmul@f2+1,w,c
  3510  00EE66  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  3511  00EE68  5012               	movf	___ftmul@f2+2,w,c
  3512  00EE6A  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  3513  00EE6C                     l2337:
  3514  00EE6C  90D8               	bcf	status,0,c
  3515  00EE6E  320F               	rrcf	___ftmul@f1+2,f,c
  3516  00EE70  320E               	rrcf	___ftmul@f1+1,f,c
  3517  00EE72  320D               	rrcf	___ftmul@f1,f,c
  3518  00EE74  90D8               	bcf	status,0,c
  3519  00EE76  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  3520  00EE78  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  3521  00EE7A  3217               	rrcf	___ftmul@f3_as_product,f,c
  3522  00EE7C  2E1A               	decfsz	___ftmul@cntr,f,c
  3523  00EE7E  D7EE               	goto	l2333
  3524  00EE80  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3525  00EE84  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3526  00EE88  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3527  00EE8C  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  3528  00EE90  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  3529  00EE94  EC75  F074         	call	___ftpack	;wreg free
  3530  00EE98  C001  F00D         	movff	?___ftpack,?___ftmul
  3531  00EE9C  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  3532  00EEA0  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  3533  00EEA4  0012               	return	
  3534  00EEA6                     __end_of___ftmul:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           intcon2	equ	0xFF1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           fsr2h	equ	0xFDA
  3547                           fsr2l	equ	0xFD9
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function ___ftsub *****************
  3551 ;; Defined at:
  3552 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  f1              3   39[COMRAM] float 
  3555 ;;  f2              3   42[COMRAM] float 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  3   39[COMRAM] float 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:        6 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    2
  3574 ;; This function calls:
  3575 ;;		___ftadd
  3576 ;; This function is called by:
  3577 ;;		_exp
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text14
  3582  00E302                     __ptext14:
  3583                           	opt stack 0
  3584  00E302                     ___ftsub:
  3585                           	opt stack 24
  3586                           
  3587                           ;incstack = 0
  3588  00E302  502B               	movf	___ftsub@f2,w,c
  3589  00E304  102C               	iorwf	___ftsub@f2+1,w,c
  3590  00E306  102D               	iorwf	___ftsub@f2+2,w,c
  3591  00E308  B4D8               	btfsc	status,2,c
  3592  00E30A  D006               	goto	l2497
  3593  00E30C  0E00               	movlw	0
  3594  00E30E  1A2B               	xorwf	___ftsub@f2,f,c
  3595  00E310  0E00               	movlw	0
  3596  00E312  1A2C               	xorwf	___ftsub@f2+1,f,c
  3597  00E314  0E80               	movlw	128
  3598  00E316  1A2D               	xorwf	___ftsub@f2+2,f,c
  3599  00E318                     l2497:
  3600  00E318  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
  3601  00E31C  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
  3602  00E320  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
  3603  00E324  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
  3604  00E328  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
  3605  00E32C  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
  3606  00E330  ECDD  F07A         	call	___ftadd	;wreg free
  3607  00E334  C01C  F028         	movff	?___ftadd,?___ftsub
  3608  00E338  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
  3609  00E33C  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
  3610  00E340  0012               	return	
  3611  00E342                     __end_of___ftsub:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon2	equ	0xFF1
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function ___ftadd *****************
  3628 ;; Defined at:
  3629 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  f1              3   27[COMRAM] float 
  3632 ;;  f2              3   30[COMRAM] float 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  exp1            1   38[COMRAM] unsigned char 
  3635 ;;  exp2            1   37[COMRAM] unsigned char 
  3636 ;;  sign            1   36[COMRAM] unsigned char 
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  3   27[COMRAM] float 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:       12 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    1
  3653 ;; This function calls:
  3654 ;;		___ftpack
  3655 ;; This function is called by:
  3656 ;;		_dec_to_hex
  3657 ;;		___ftsub
  3658 ;;		_floor
  3659 ;;		_log
  3660 ;;		_eval_poly
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text15
  3665  00F5BA                     __ptext15:
  3666                           	opt stack 0
  3667  00F5BA                     ___ftadd:
  3668                           	opt stack 24
  3669                           
  3670                           ;incstack = 0
  3671  00F5BA  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
  3672  00F5BE  6A23               	clrf	(??___ftadd+1)& (0+255),c
  3673  00F5C0  6A24               	clrf	(??___ftadd+2)& (0+255),c
  3674  00F5C2  341D               	rlcf	___ftadd@f1+1,w,c
  3675  00F5C4  3622               	rlcf	??___ftadd& (0+255),f,c
  3676  00F5C6  E301               	bnc	u1791
  3677  00F5C8  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  3678  00F5CA                     u1791:
  3679  00F5CA  5022               	movf	??___ftadd,w,c
  3680  00F5CC  6E27               	movwf	___ftadd@exp1,c
  3681  00F5CE  C021  F022         	movff	___ftadd@f2+2,??___ftadd
  3682  00F5D2  6A23               	clrf	(??___ftadd+1)& (0+255),c
  3683  00F5D4  6A24               	clrf	(??___ftadd+2)& (0+255),c
  3684  00F5D6  3420               	rlcf	___ftadd@f2+1,w,c
  3685  00F5D8  3622               	rlcf	??___ftadd& (0+255),f,c
  3686  00F5DA  E301               	bnc	u1801
  3687  00F5DC  8023               	bsf	(??___ftadd+1)& (0+255),0,c
  3688  00F5DE                     u1801:
  3689  00F5DE  5022               	movf	??___ftadd,w,c
  3690  00F5E0  6E26               	movwf	___ftadd@exp2,c
  3691  00F5E2  5027               	movf	___ftadd@exp1,w,c
  3692  00F5E4  B4D8               	btfsc	status,2,c
  3693  00F5E6  D00B               	goto	l561
  3694  00F5E8  5026               	movf	___ftadd@exp2,w,c
  3695  00F5EA  5C27               	subwf	___ftadd@exp1,w,c
  3696  00F5EC  B0D8               	btfsc	status,0,c
  3697  00F5EE  D00E               	goto	l2235
  3698  00F5F0  5027               	movf	___ftadd@exp1,w,c
  3699  00F5F2  0800               	sublw	0
  3700  00F5F4  2426               	addwf	___ftadd@exp2,w,c
  3701  00F5F6  6E22               	movwf	??___ftadd& (0+255),c
  3702  00F5F8  0E18               	movlw	24
  3703  00F5FA  6422               	cpfsgt	??___ftadd,c
  3704  00F5FC  D007               	goto	l2235
  3705  00F5FE                     l561:
  3706  00F5FE  C01F  F01C         	movff	___ftadd@f2,?___ftadd
  3707  00F602  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
  3708  00F606  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
  3709  00F60A  0012               	return	
  3710  00F60C                     l2235:
  3711  00F60C  5026               	movf	___ftadd@exp2,w,c
  3712  00F60E  B4D8               	btfsc	status,2,c
  3713  00F610  D00B               	goto	l565
  3714  00F612  5027               	movf	___ftadd@exp1,w,c
  3715  00F614  5C26               	subwf	___ftadd@exp2,w,c
  3716  00F616  B0D8               	btfsc	status,0,c
  3717  00F618  D00E               	goto	l2241
  3718  00F61A  5026               	movf	___ftadd@exp2,w,c
  3719  00F61C  0800               	sublw	0
  3720  00F61E  2427               	addwf	___ftadd@exp1,w,c
  3721  00F620  6E22               	movwf	??___ftadd& (0+255),c
  3722  00F622  0E18               	movlw	24
  3723  00F624  6422               	cpfsgt	??___ftadd,c
  3724  00F626  D007               	goto	l2241
  3725  00F628                     l565:
  3726  00F628  C01C  F01C         	movff	___ftadd@f1,?___ftadd
  3727  00F62C  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
  3728  00F630  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
  3729  00F634  0012               	return	
  3730  00F636                     l2241:
  3731  00F636  0E06               	movlw	6
  3732  00F638  6E25               	movwf	___ftadd@sign,c
  3733  00F63A  BE1E               	btfsc	___ftadd@f1+2,7,c
  3734  00F63C  8E25               	bsf	___ftadd@sign,7,c
  3735  00F63E  BE21               	btfsc	___ftadd@f2+2,7,c
  3736  00F640  8C25               	bsf	___ftadd@sign,6,c
  3737  00F642  8E1D               	bsf	___ftadd@f1+1,7,c
  3738  00F644  0EFF               	movlw	255
  3739  00F646  161C               	andwf	___ftadd@f1,f,c
  3740  00F648  0EFF               	movlw	255
  3741  00F64A  161D               	andwf	___ftadd@f1+1,f,c
  3742  00F64C  0E00               	movlw	0
  3743  00F64E  161E               	andwf	___ftadd@f1+2,f,c
  3744  00F650  8E20               	bsf	___ftadd@f2+1,7,c
  3745  00F652  0EFF               	movlw	255
  3746  00F654  161F               	andwf	___ftadd@f2,f,c
  3747  00F656  0EFF               	movlw	255
  3748  00F658  1620               	andwf	___ftadd@f2+1,f,c
  3749  00F65A  0E00               	movlw	0
  3750  00F65C  1621               	andwf	___ftadd@f2+2,f,c
  3751  00F65E  5026               	movf	___ftadd@exp2,w,c
  3752  00F660  5C27               	subwf	___ftadd@exp1,w,c
  3753  00F662  B0D8               	btfsc	status,0,c
  3754  00F664  D01B               	goto	l2267
  3755  00F666                     l2257:
  3756  00F666  90D8               	bcf	status,0,c
  3757  00F668  361F               	rlcf	___ftadd@f2,f,c
  3758  00F66A  3620               	rlcf	___ftadd@f2+1,f,c
  3759  00F66C  3621               	rlcf	___ftadd@f2+2,f,c
  3760  00F66E  0626               	decf	___ftadd@exp2,f,c
  3761  00F670  5027               	movf	___ftadd@exp1,w,c
  3762  00F672  1826               	xorwf	___ftadd@exp2,w,c
  3763  00F674  B4D8               	btfsc	status,2,c
  3764  00F676  D00D               	goto	l2265
  3765  00F678  0625               	decf	___ftadd@sign,f,c
  3766  00F67A  C025  F022         	movff	___ftadd@sign,??___ftadd
  3767  00F67E  0E07               	movlw	7
  3768  00F680  1622               	andwf	??___ftadd,f,c
  3769  00F682  B4D8               	btfsc	status,2,c
  3770  00F684  D006               	goto	l2265
  3771  00F686  D7EF               	goto	l2257
  3772  00F688                     l2263:
  3773  00F688  90D8               	bcf	status,0,c
  3774  00F68A  321E               	rrcf	___ftadd@f1+2,f,c
  3775  00F68C  321D               	rrcf	___ftadd@f1+1,f,c
  3776  00F68E  321C               	rrcf	___ftadd@f1,f,c
  3777  00F690  2A27               	incf	___ftadd@exp1,f,c
  3778  00F692                     l2265:
  3779  00F692  5026               	movf	___ftadd@exp2,w,c
  3780  00F694  1827               	xorwf	___ftadd@exp1,w,c
  3781  00F696  B4D8               	btfsc	status,2,c
  3782  00F698  D01F               	goto	l576
  3783  00F69A  D7F6               	goto	l2263
  3784  00F69C                     l2267:
  3785  00F69C  5027               	movf	___ftadd@exp1,w,c
  3786  00F69E  5C26               	subwf	___ftadd@exp2,w,c
  3787  00F6A0  B0D8               	btfsc	status,0,c
  3788  00F6A2  D01A               	goto	l576
  3789  00F6A4                     l2269:
  3790  00F6A4  90D8               	bcf	status,0,c
  3791  00F6A6  361C               	rlcf	___ftadd@f1,f,c
  3792  00F6A8  361D               	rlcf	___ftadd@f1+1,f,c
  3793  00F6AA  361E               	rlcf	___ftadd@f1+2,f,c
  3794  00F6AC  0627               	decf	___ftadd@exp1,f,c
  3795  00F6AE  5027               	movf	___ftadd@exp1,w,c
  3796  00F6B0  1826               	xorwf	___ftadd@exp2,w,c
  3797  00F6B2  B4D8               	btfsc	status,2,c
  3798  00F6B4  D00D               	goto	l2277
  3799  00F6B6  0625               	decf	___ftadd@sign,f,c
  3800  00F6B8  C025  F022         	movff	___ftadd@sign,??___ftadd
  3801  00F6BC  0E07               	movlw	7
  3802  00F6BE  1622               	andwf	??___ftadd,f,c
  3803  00F6C0  B4D8               	btfsc	status,2,c
  3804  00F6C2  D006               	goto	l2277
  3805  00F6C4  D7EF               	goto	l2269
  3806  00F6C6                     l2275:
  3807  00F6C6  90D8               	bcf	status,0,c
  3808  00F6C8  3221               	rrcf	___ftadd@f2+2,f,c
  3809  00F6CA  3220               	rrcf	___ftadd@f2+1,f,c
  3810  00F6CC  321F               	rrcf	___ftadd@f2,f,c
  3811  00F6CE  2A26               	incf	___ftadd@exp2,f,c
  3812  00F6D0                     l2277:
  3813  00F6D0  5026               	movf	___ftadd@exp2,w,c
  3814  00F6D2  1827               	xorwf	___ftadd@exp1,w,c
  3815  00F6D4  A4D8               	btfss	status,2,c
  3816  00F6D6  D7F7               	goto	l2275
  3817  00F6D8                     l576:
  3818  00F6D8  AE25               	btfss	___ftadd@sign,7,c
  3819  00F6DA  D00C               	goto	l585
  3820  00F6DC  0EFF               	movlw	255
  3821  00F6DE  1A1C               	xorwf	___ftadd@f1,f,c
  3822  00F6E0  0EFF               	movlw	255
  3823  00F6E2  1A1D               	xorwf	___ftadd@f1+1,f,c
  3824  00F6E4  0EFF               	movlw	255
  3825  00F6E6  1A1E               	xorwf	___ftadd@f1+2,f,c
  3826  00F6E8  0E01               	movlw	1
  3827  00F6EA  261C               	addwf	___ftadd@f1,f,c
  3828  00F6EC  0E00               	movlw	0
  3829  00F6EE  221D               	addwfc	___ftadd@f1+1,f,c
  3830  00F6F0  0E00               	movlw	0
  3831  00F6F2  221E               	addwfc	___ftadd@f1+2,f,c
  3832  00F6F4                     l585:
  3833  00F6F4  AC25               	btfss	___ftadd@sign,6,c
  3834  00F6F6  D00C               	goto	l2283
  3835  00F6F8  0EFF               	movlw	255
  3836  00F6FA  1A1F               	xorwf	___ftadd@f2,f,c
  3837  00F6FC  0EFF               	movlw	255
  3838  00F6FE  1A20               	xorwf	___ftadd@f2+1,f,c
  3839  00F700  0EFF               	movlw	255
  3840  00F702  1A21               	xorwf	___ftadd@f2+2,f,c
  3841  00F704  0E01               	movlw	1
  3842  00F706  261F               	addwf	___ftadd@f2,f,c
  3843  00F708  0E00               	movlw	0
  3844  00F70A  2220               	addwfc	___ftadd@f2+1,f,c
  3845  00F70C  0E00               	movlw	0
  3846  00F70E  2221               	addwfc	___ftadd@f2+2,f,c
  3847  00F710                     l2283:
  3848  00F710  0E00               	movlw	0
  3849  00F712  6E25               	movwf	___ftadd@sign,c
  3850  00F714  501C               	movf	___ftadd@f1,w,c
  3851  00F716  261F               	addwf	___ftadd@f2,f,c
  3852  00F718  501D               	movf	___ftadd@f1+1,w,c
  3853  00F71A  2220               	addwfc	___ftadd@f2+1,f,c
  3854  00F71C  501E               	movf	___ftadd@f1+2,w,c
  3855  00F71E  2221               	addwfc	___ftadd@f2+2,f,c
  3856  00F720  AE21               	btfss	___ftadd@f2+2,7,c
  3857  00F722  D00E               	goto	l2293
  3858  00F724  0EFF               	movlw	255
  3859  00F726  1A1F               	xorwf	___ftadd@f2,f,c
  3860  00F728  0EFF               	movlw	255
  3861  00F72A  1A20               	xorwf	___ftadd@f2+1,f,c
  3862  00F72C  0EFF               	movlw	255
  3863  00F72E  1A21               	xorwf	___ftadd@f2+2,f,c
  3864  00F730  0E01               	movlw	1
  3865  00F732  261F               	addwf	___ftadd@f2,f,c
  3866  00F734  0E00               	movlw	0
  3867  00F736  2220               	addwfc	___ftadd@f2+1,f,c
  3868  00F738  0E00               	movlw	0
  3869  00F73A  2221               	addwfc	___ftadd@f2+2,f,c
  3870  00F73C  0E01               	movlw	1
  3871  00F73E  6E25               	movwf	___ftadd@sign,c
  3872  00F740                     l2293:
  3873  00F740  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
  3874  00F744  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3875  00F748  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3876  00F74C  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
  3877  00F750  C025  F005         	movff	___ftadd@sign,___ftpack@sign
  3878  00F754  EC75  F074         	call	___ftpack	;wreg free
  3879  00F758  C001  F01C         	movff	?___ftpack,?___ftadd
  3880  00F75C  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
  3881  00F760  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
  3882  00F764  0012               	return	
  3883  00F766                     __end_of___ftadd:
  3884                           	opt stack 0
  3885                           tblptru	equ	0xFF8
  3886                           tblptrh	equ	0xFF7
  3887                           tblptrl	equ	0xFF6
  3888                           tablat	equ	0xFF5
  3889                           prodh	equ	0xFF4
  3890                           prodl	equ	0xFF3
  3891                           intcon2	equ	0xFF1
  3892                           indf2	equ	0xFDF
  3893                           postinc2	equ	0xFDE
  3894                           postdec2	equ	0xFDD
  3895                           fsr2h	equ	0xFDA
  3896                           fsr2l	equ	0xFD9
  3897                           status	equ	0xFD8
  3898                           
  3899 ;; *************** function ___ftneg *****************
  3900 ;; Defined at:
  3901 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  f1              3    0[COMRAM] float 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  3    0[COMRAM] float 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3915 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;Total ram usage:        3 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; This function calls:
  3922 ;;		Nothing
  3923 ;; This function is called by:
  3924 ;;		_pow
  3925 ;;		_exp
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text16
  3930  00E234                     __ptext16:
  3931                           	opt stack 0
  3932  00E234                     ___ftneg:
  3933                           	opt stack 26
  3934                           
  3935                           ;incstack = 0
  3936  00E234  5001               	movf	___ftneg@f1,w,c
  3937  00E236  1002               	iorwf	___ftneg@f1+1,w,c
  3938  00E238  1003               	iorwf	___ftneg@f1+2,w,c
  3939  00E23A  B4D8               	btfsc	status,2,c
  3940  00E23C  D006               	goto	l618
  3941  00E23E  0E00               	movlw	0
  3942  00E240  1A01               	xorwf	___ftneg@f1,f,c
  3943  00E242  0E00               	movlw	0
  3944  00E244  1A02               	xorwf	___ftneg@f1+1,f,c
  3945  00E246  0E80               	movlw	128
  3946  00E248  1A03               	xorwf	___ftneg@f1+2,f,c
  3947  00E24A                     l618:
  3948  00E24A  C001  F001         	movff	___ftneg@f1,?___ftneg
  3949  00E24E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3950  00E252  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3951  00E256  0012               	return		;funcret
  3952  00E258                     __end_of___ftneg:
  3953                           	opt stack 0
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon2	equ	0xFF1
  3961                           indf2	equ	0xFDF
  3962                           postinc2	equ	0xFDE
  3963                           postdec2	equ	0xFDD
  3964                           fsr2h	equ	0xFDA
  3965                           fsr2l	equ	0xFD9
  3966                           status	equ	0xFD8
  3967                           
  3968 ;; *************** function ___ftdiv *****************
  3969 ;; Defined at:
  3970 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  f1              3    8[COMRAM] float 
  3973 ;;  f2              3   11[COMRAM] float 
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;  f3              3   18[COMRAM] float 
  3976 ;;  sign            1   22[COMRAM] unsigned char 
  3977 ;;  exp             1   21[COMRAM] unsigned char 
  3978 ;;  cntr            1   17[COMRAM] unsigned char 
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  3    8[COMRAM] float 
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0, cstack
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3988 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;Total ram usage:       15 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    1
  3995 ;; This function calls:
  3996 ;;		___ftpack
  3997 ;; This function is called by:
  3998 ;;		_exp
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text17
  4003  00ECCC                     __ptext17:
  4004                           	opt stack 0
  4005  00ECCC                     ___ftdiv:
  4006                           	opt stack 25
  4007                           
  4008                           ;incstack = 0
  4009  00ECCC  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
  4010  00ECD0  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  4011  00ECD2  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  4012  00ECD4  340A               	rlcf	___ftdiv@f1+1,w,c
  4013  00ECD6  360F               	rlcf	??___ftdiv& (0+255),f,c
  4014  00ECD8  E301               	bnc	u2191
  4015  00ECDA  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  4016  00ECDC                     u2191:
  4017  00ECDC  500F               	movf	??___ftdiv,w,c
  4018  00ECDE  6E16               	movwf	___ftdiv@exp,c
  4019  00ECE0  5016               	movf	___ftdiv@exp,w,c
  4020  00ECE2  A4D8               	btfss	status,2,c
  4021  00ECE4  D007               	goto	l2453
  4022  00ECE6  0E00               	movlw	0
  4023  00ECE8  6E09               	movwf	?___ftdiv,c
  4024  00ECEA  0E00               	movlw	0
  4025  00ECEC  6E0A               	movwf	?___ftdiv+1,c
  4026  00ECEE  0E00               	movlw	0
  4027  00ECF0  6E0B               	movwf	?___ftdiv+2,c
  4028  00ECF2  0012               	return	
  4029  00ECF4                     l2453:
  4030  00ECF4  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
  4031  00ECF8  6A10               	clrf	(??___ftdiv+1)& (0+255),c
  4032  00ECFA  6A11               	clrf	(??___ftdiv+2)& (0+255),c
  4033  00ECFC  340D               	rlcf	___ftdiv@f2+1,w,c
  4034  00ECFE  360F               	rlcf	??___ftdiv& (0+255),f,c
  4035  00ED00  E301               	bnc	u2211
  4036  00ED02  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
  4037  00ED04                     u2211:
  4038  00ED04  500F               	movf	??___ftdiv,w,c
  4039  00ED06  6E17               	movwf	___ftdiv@sign,c
  4040  00ED08  5017               	movf	___ftdiv@sign,w,c
  4041  00ED0A  A4D8               	btfss	status,2,c
  4042  00ED0C  D007               	goto	l2459
  4043  00ED0E  0E00               	movlw	0
  4044  00ED10  6E09               	movwf	?___ftdiv,c
  4045  00ED12  0E00               	movlw	0
  4046  00ED14  6E0A               	movwf	?___ftdiv+1,c
  4047  00ED16  0E00               	movlw	0
  4048  00ED18  6E0B               	movwf	?___ftdiv+2,c
  4049  00ED1A  0012               	return	
  4050  00ED1C                     l2459:
  4051  00ED1C  0E00               	movlw	0
  4052  00ED1E  6E13               	movwf	___ftdiv@f3,c
  4053  00ED20  0E00               	movlw	0
  4054  00ED22  6E14               	movwf	___ftdiv@f3+1,c
  4055  00ED24  0E00               	movlw	0
  4056  00ED26  6E15               	movwf	___ftdiv@f3+2,c
  4057  00ED28  5017               	movf	___ftdiv@sign,w,c
  4058  00ED2A  0F89               	addlw	137
  4059  00ED2C  5E16               	subwf	___ftdiv@exp,f,c
  4060  00ED2E  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
  4061  00ED32  500E               	movf	___ftdiv@f2+2,w,c
  4062  00ED34  1A17               	xorwf	___ftdiv@sign,f,c
  4063  00ED36  0E80               	movlw	128
  4064  00ED38  1617               	andwf	___ftdiv@sign,f,c
  4065  00ED3A  8E0A               	bsf	___ftdiv@f1+1,7,c
  4066  00ED3C  0EFF               	movlw	255
  4067  00ED3E  1609               	andwf	___ftdiv@f1,f,c
  4068  00ED40  0EFF               	movlw	255
  4069  00ED42  160A               	andwf	___ftdiv@f1+1,f,c
  4070  00ED44  0E00               	movlw	0
  4071  00ED46  160B               	andwf	___ftdiv@f1+2,f,c
  4072  00ED48  8E0D               	bsf	___ftdiv@f2+1,7,c
  4073  00ED4A  0EFF               	movlw	255
  4074  00ED4C  160C               	andwf	___ftdiv@f2,f,c
  4075  00ED4E  0EFF               	movlw	255
  4076  00ED50  160D               	andwf	___ftdiv@f2+1,f,c
  4077  00ED52  0E00               	movlw	0
  4078  00ED54  160E               	andwf	___ftdiv@f2+2,f,c
  4079  00ED56  0E18               	movlw	24
  4080  00ED58  6E12               	movwf	___ftdiv@cntr,c
  4081  00ED5A                     l2479:
  4082  00ED5A  90D8               	bcf	status,0,c
  4083  00ED5C  3613               	rlcf	___ftdiv@f3,f,c
  4084  00ED5E  3614               	rlcf	___ftdiv@f3+1,f,c
  4085  00ED60  3615               	rlcf	___ftdiv@f3+2,f,c
  4086  00ED62  500C               	movf	___ftdiv@f2,w,c
  4087  00ED64  5C09               	subwf	___ftdiv@f1,w,c
  4088  00ED66  500D               	movf	___ftdiv@f2+1,w,c
  4089  00ED68  580A               	subwfb	___ftdiv@f1+1,w,c
  4090  00ED6A  500E               	movf	___ftdiv@f2+2,w,c
  4091  00ED6C  580B               	subwfb	___ftdiv@f1+2,w,c
  4092  00ED6E  A0D8               	btfss	status,0,c
  4093  00ED70  D007               	goto	l596
  4094  00ED72  500C               	movf	___ftdiv@f2,w,c
  4095  00ED74  5E09               	subwf	___ftdiv@f1,f,c
  4096  00ED76  500D               	movf	___ftdiv@f2+1,w,c
  4097  00ED78  5A0A               	subwfb	___ftdiv@f1+1,f,c
  4098  00ED7A  500E               	movf	___ftdiv@f2+2,w,c
  4099  00ED7C  5A0B               	subwfb	___ftdiv@f1+2,f,c
  4100  00ED7E  8013               	bsf	___ftdiv@f3,0,c
  4101  00ED80                     l596:
  4102  00ED80  90D8               	bcf	status,0,c
  4103  00ED82  3609               	rlcf	___ftdiv@f1,f,c
  4104  00ED84  360A               	rlcf	___ftdiv@f1+1,f,c
  4105  00ED86  360B               	rlcf	___ftdiv@f1+2,f,c
  4106  00ED88  2E12               	decfsz	___ftdiv@cntr,f,c
  4107  00ED8A  D7E7               	goto	l2479
  4108  00ED8C  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
  4109  00ED90  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4110  00ED94  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4111  00ED98  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
  4112  00ED9C  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
  4113  00EDA0  EC75  F074         	call	___ftpack	;wreg free
  4114  00EDA4  C001  F009         	movff	?___ftpack,?___ftdiv
  4115  00EDA8  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  4116  00EDAC  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  4117  00EDB0  0012               	return	
  4118  00EDB2                     __end_of___ftdiv:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           prodh	equ	0xFF4
  4125                           prodl	equ	0xFF3
  4126                           intcon2	equ	0xFF1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function ___awtoft *****************
  4135 ;; Defined at:
  4136 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;  c               2    8[COMRAM] int 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  sign            1   11[COMRAM] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  3    8[COMRAM] float 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4150 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;Total ram usage:        4 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    1
  4157 ;; This function calls:
  4158 ;;		___ftpack
  4159 ;; This function is called by:
  4160 ;;		_dec_to_hex
  4161 ;;		_exp
  4162 ;;		_log
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text18
  4167  00E2CA                     __ptext18:
  4168                           	opt stack 0
  4169  00E2CA                     ___awtoft:
  4170                           	opt stack 25
  4171                           
  4172                           ;incstack = 0
  4173  00E2CA  0E00               	movlw	0
  4174  00E2CC  6E0C               	movwf	___awtoft@sign,c
  4175  00E2CE  AE0A               	btfss	___awtoft@c+1,7,c
  4176  00E2D0  D006               	goto	l2509
  4177  00E2D2  6C09               	negf	___awtoft@c,c
  4178  00E2D4  1E0A               	comf	___awtoft@c+1,f,c
  4179  00E2D6  B0D8               	btfsc	status,0,c
  4180  00E2D8  2A0A               	incf	___awtoft@c+1,f,c
  4181  00E2DA  0E01               	movlw	1
  4182  00E2DC  6E0C               	movwf	___awtoft@sign,c
  4183  00E2DE                     l2509:
  4184  00E2DE  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4185  00E2E2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4186  00E2E6  6A03               	clrf	___ftpack@arg+2,c
  4187  00E2E8  0E8E               	movlw	142
  4188  00E2EA  6E04               	movwf	___ftpack@exp,c
  4189  00E2EC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4190  00E2F0  EC75  F074         	call	___ftpack	;wreg free
  4191  00E2F4  C001  F009         	movff	?___ftpack,?___awtoft
  4192  00E2F8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4193  00E2FC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4194  00E300  0012               	return	
  4195  00E302                     __end_of___awtoft:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon2	equ	0xFF1
  4204                           indf2	equ	0xFDF
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function ___lltoft *****************
  4212 ;; Defined at:
  4213 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  c               4    8[COMRAM] unsigned long 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  exp             1   16[COMRAM] unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  3    8[COMRAM] float 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;Total ram usage:        9 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    1
  4234 ;; This function calls:
  4235 ;;		___ftpack
  4236 ;; This function is called by:
  4237 ;;		_pow
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text19
  4242  00E50E                     __ptext19:
  4243                           	opt stack 0
  4244  00E50E                     ___lltoft:
  4245                           	opt stack 26
  4246                           
  4247                           ;incstack = 0
  4248  00E50E  0E8E               	movlw	142
  4249  00E510  6E11               	movwf	___lltoft@exp,c
  4250  00E512  D006               	goto	l2607
  4251  00E514                     l2605:
  4252  00E514  90D8               	bcf	status,0,c
  4253  00E516  320C               	rrcf	___lltoft@c+3,f,c
  4254  00E518  320B               	rrcf	___lltoft@c+2,f,c
  4255  00E51A  320A               	rrcf	___lltoft@c+1,f,c
  4256  00E51C  3209               	rrcf	___lltoft@c,f,c
  4257  00E51E  2A11               	incf	___lltoft@exp,f,c
  4258  00E520                     l2607:
  4259  00E520  0E00               	movlw	0
  4260  00E522  1409               	andwf	___lltoft@c,w,c
  4261  00E524  6E0D               	movwf	??___lltoft& (0+255),c
  4262  00E526  0E00               	movlw	0
  4263  00E528  140A               	andwf	___lltoft@c+1,w,c
  4264  00E52A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4265  00E52C  0E00               	movlw	0
  4266  00E52E  140B               	andwf	___lltoft@c+2,w,c
  4267  00E530  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4268  00E532  0EFF               	movlw	255
  4269  00E534  140C               	andwf	___lltoft@c+3,w,c
  4270  00E536  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4271  00E538  500D               	movf	??___lltoft,w,c
  4272  00E53A  100E               	iorwf	??___lltoft+1,w,c
  4273  00E53C  100F               	iorwf	??___lltoft+2,w,c
  4274  00E53E  1010               	iorwf	??___lltoft+3,w,c
  4275  00E540  A4D8               	btfss	status,2,c
  4276  00E542  D7E8               	goto	l2605
  4277  00E544  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4278  00E548  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4279  00E54C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4280  00E550  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4281  00E554  0E00               	movlw	0
  4282  00E556  6E05               	movwf	___ftpack@sign,c
  4283  00E558  EC75  F074         	call	___ftpack	;wreg free
  4284  00E55C  C001  F009         	movff	?___ftpack,?___lltoft
  4285  00E560  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4286  00E564  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4287  00E568  0012               	return	
  4288  00E56A                     __end_of___lltoft:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon2	equ	0xFF1
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function ___ftpack *****************
  4305 ;; Defined at:
  4306 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  arg             3    0[COMRAM] unsigned um
  4309 ;;  exp             1    3[COMRAM] unsigned char 
  4310 ;;  sign            1    4[COMRAM] unsigned char 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  3    0[COMRAM] float 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        8 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		___altoft
  4332 ;;		___awtoft
  4333 ;;		___ftadd
  4334 ;;		___ftdiv
  4335 ;;		___ftmul
  4336 ;;		___lltoft
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text20
  4341  00E8EA                     __ptext20:
  4342                           	opt stack 0
  4343  00E8EA                     ___ftpack:
  4344                           	opt stack 24
  4345                           
  4346                           ;incstack = 0
  4347  00E8EA  5004               	movf	___ftpack@exp,w,c
  4348  00E8EC  B4D8               	btfsc	status,2,c
  4349  00E8EE  D005               	goto	l2173
  4350  00E8F0  5001               	movf	___ftpack@arg,w,c
  4351  00E8F2  1002               	iorwf	___ftpack@arg+1,w,c
  4352  00E8F4  1003               	iorwf	___ftpack@arg+2,w,c
  4353  00E8F6  A4D8               	btfss	status,2,c
  4354  00E8F8  D00C               	goto	l2179
  4355  00E8FA                     l2173:
  4356  00E8FA  0E00               	movlw	0
  4357  00E8FC  6E01               	movwf	?___ftpack,c
  4358  00E8FE  0E00               	movlw	0
  4359  00E900  6E02               	movwf	?___ftpack+1,c
  4360  00E902  0E00               	movlw	0
  4361  00E904  6E03               	movwf	?___ftpack+2,c
  4362  00E906  0012               	return	
  4363  00E908                     l2177:
  4364  00E908  2A04               	incf	___ftpack@exp,f,c
  4365  00E90A  90D8               	bcf	status,0,c
  4366  00E90C  3203               	rrcf	___ftpack@arg+2,f,c
  4367  00E90E  3202               	rrcf	___ftpack@arg+1,f,c
  4368  00E910  3201               	rrcf	___ftpack@arg,f,c
  4369  00E912                     l2179:
  4370  00E912  0E00               	movlw	0
  4371  00E914  1401               	andwf	___ftpack@arg,w,c
  4372  00E916  6E06               	movwf	??___ftpack& (0+255),c
  4373  00E918  0E00               	movlw	0
  4374  00E91A  1402               	andwf	___ftpack@arg+1,w,c
  4375  00E91C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4376  00E91E  0EFE               	movlw	254
  4377  00E920  1403               	andwf	___ftpack@arg+2,w,c
  4378  00E922  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4379  00E924  5006               	movf	??___ftpack,w,c
  4380  00E926  1007               	iorwf	??___ftpack+1,w,c
  4381  00E928  1008               	iorwf	??___ftpack+2,w,c
  4382  00E92A  B4D8               	btfsc	status,2,c
  4383  00E92C  D00C               	goto	l2185
  4384  00E92E  D7EC               	goto	l2177
  4385  00E930                     l2181:
  4386  00E930  2A04               	incf	___ftpack@exp,f,c
  4387  00E932  0E01               	movlw	1
  4388  00E934  2601               	addwf	___ftpack@arg,f,c
  4389  00E936  0E00               	movlw	0
  4390  00E938  2202               	addwfc	___ftpack@arg+1,f,c
  4391  00E93A  0E00               	movlw	0
  4392  00E93C  2203               	addwfc	___ftpack@arg+2,f,c
  4393  00E93E  90D8               	bcf	status,0,c
  4394  00E940  3203               	rrcf	___ftpack@arg+2,f,c
  4395  00E942  3202               	rrcf	___ftpack@arg+1,f,c
  4396  00E944  3201               	rrcf	___ftpack@arg,f,c
  4397  00E946                     l2185:
  4398  00E946  0E00               	movlw	0
  4399  00E948  1401               	andwf	___ftpack@arg,w,c
  4400  00E94A  6E06               	movwf	??___ftpack& (0+255),c
  4401  00E94C  0E00               	movlw	0
  4402  00E94E  1402               	andwf	___ftpack@arg+1,w,c
  4403  00E950  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4404  00E952  0EFF               	movlw	255
  4405  00E954  1403               	andwf	___ftpack@arg+2,w,c
  4406  00E956  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4407  00E958  5006               	movf	??___ftpack,w,c
  4408  00E95A  1007               	iorwf	??___ftpack+1,w,c
  4409  00E95C  1008               	iorwf	??___ftpack+2,w,c
  4410  00E95E  B4D8               	btfsc	status,2,c
  4411  00E960  D006               	goto	l2189
  4412  00E962  D7E6               	goto	l2181
  4413  00E964                     l2187:
  4414  00E964  0604               	decf	___ftpack@exp,f,c
  4415  00E966  90D8               	bcf	status,0,c
  4416  00E968  3601               	rlcf	___ftpack@arg,f,c
  4417  00E96A  3602               	rlcf	___ftpack@arg+1,f,c
  4418  00E96C  3603               	rlcf	___ftpack@arg+2,f,c
  4419  00E96E                     l2189:
  4420  00E96E  BE02               	btfsc	___ftpack@arg+1,7,c
  4421  00E970  D003               	goto	l538
  4422  00E972  0E02               	movlw	2
  4423  00E974  6004               	cpfslt	___ftpack@exp,c
  4424  00E976  D7F6               	goto	l2187
  4425  00E978                     l538:
  4426  00E978  A004               	btfss	___ftpack@exp,0,c
  4427  00E97A  9E02               	bcf	___ftpack@arg+1,7,c
  4428  00E97C  90D8               	bcf	status,0,c
  4429  00E97E  3204               	rrcf	___ftpack@exp,f,c
  4430  00E980  5004               	movf	___ftpack@exp,w,c
  4431  00E982  1203               	iorwf	___ftpack@arg+2,f,c
  4432  00E984  5005               	movf	___ftpack@sign,w,c
  4433  00E986  A4D8               	btfss	status,2,c
  4434  00E988  8E03               	bsf	___ftpack@arg+2,7,c
  4435  00E98A  C001  F001         	movff	___ftpack@arg,?___ftpack
  4436  00E98E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4437  00E992  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4438  00E996  0012               	return	
  4439  00E998                     __end_of___ftpack:
  4440                           	opt stack 0
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           intcon2	equ	0xFF1
  4448                           indf2	equ	0xFDF
  4449                           postinc2	equ	0xFDE
  4450                           postdec2	equ	0xFDD
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _stand_by *****************
  4456 ;; Defined at:
  4457 ;;		line 118 in file "main.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  time            2   38[COMRAM] PTR unsigned char 
  4460 ;;		 -> main@time(7), 
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:        5 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    3
  4479 ;; This function calls:
  4480 ;;		_lcdInst
  4481 ;;		_printf
  4482 ;;		_update_time
  4483 ;; This function is called by:
  4484 ;;		_main
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text21
  4489  00E998                     __ptext21:
  4490                           	opt stack 0
  4491  00E998                     _stand_by:
  4492                           	opt stack 27
  4493                           
  4494                           ;main.c: 120: update_time(time);
  4495                           
  4496                           ;incstack = 0
  4497  00E998  C027  F004         	movff	stand_by@time,update_time@time
  4498  00E99C  C028  F005         	movff	stand_by@time+1,update_time@time+1
  4499  00E9A0  ECED  F072         	call	_update_time	;wreg free
  4500                           
  4501                           ;main.c: 122: lcdInst(0b10000000);;
  4502  00E9A4  0E80               	movlw	128
  4503  00E9A6  ECEF  F070         	call	_lcdInst
  4504                           
  4505                           ;main.c: 123: printf("%02x/%02x/%02x '#' to", time[6],time[5],time[4]);
  4506  00E9AA  0E26               	movlw	low STR_5
  4507  00E9AC  6E0D               	movwf	printf@f,c
  4508  00E9AE  0EFF               	movlw	high STR_5
  4509  00E9B0  6E0E               	movwf	printf@f+1,c
  4510  00E9B2  EE20 F006          	lfsr	2,6
  4511  00E9B6  5027               	movf	stand_by@time,w,c
  4512  00E9B8  26D9               	addwf	fsr2l,f,c
  4513  00E9BA  5028               	movf	stand_by@time+1,w,c
  4514  00E9BC  22DA               	addwfc	fsr2h,f,c
  4515  00E9BE  50DF               	movf	indf2,w,c
  4516  00E9C0  6E29               	movwf	??_stand_by& (0+255),c
  4517  00E9C2  5029               	movf	??_stand_by,w,c
  4518  00E9C4  6E0F               	movwf	?_printf+2,c
  4519  00E9C6  6A10               	clrf	?_printf+3,c
  4520  00E9C8  EE20 F005          	lfsr	2,5
  4521  00E9CC  5027               	movf	stand_by@time,w,c
  4522  00E9CE  26D9               	addwf	fsr2l,f,c
  4523  00E9D0  5028               	movf	stand_by@time+1,w,c
  4524  00E9D2  22DA               	addwfc	fsr2h,f,c
  4525  00E9D4  50DF               	movf	indf2,w,c
  4526  00E9D6  6E2A               	movwf	(??_stand_by+1)& (0+255),c
  4527  00E9D8  502A               	movf	??_stand_by+1,w,c
  4528  00E9DA  6E11               	movwf	?_printf+4,c
  4529  00E9DC  6A12               	clrf	?_printf+5,c
  4530  00E9DE  EE20 F004          	lfsr	2,4
  4531  00E9E2  5027               	movf	stand_by@time,w,c
  4532  00E9E4  26D9               	addwf	fsr2l,f,c
  4533  00E9E6  5028               	movf	stand_by@time+1,w,c
  4534  00E9E8  22DA               	addwfc	fsr2h,f,c
  4535  00E9EA  50DF               	movf	indf2,w,c
  4536  00E9EC  6E2B               	movwf	(??_stand_by+2)& (0+255),c
  4537  00E9EE  502B               	movf	??_stand_by+2,w,c
  4538  00E9F0  6E13               	movwf	?_printf+6,c
  4539  00E9F2  6A14               	clrf	?_printf+7,c
  4540  00E9F4  EC99  F07D         	call	_printf	;wreg free
  4541                           
  4542                           ;main.c: 124: lcdInst(0b11000000);;
  4543  00E9F8  0EC0               	movlw	192
  4544  00E9FA  ECEF  F070         	call	_lcdInst
  4545                           
  4546                           ;main.c: 125: printf("%02x:%02x:%02x Start!", time[2],time[1],time[0]);
  4547  00E9FE  0E10               	movlw	low STR_6
  4548  00EA00  6E0D               	movwf	printf@f,c
  4549  00EA02  0EFF               	movlw	high STR_6
  4550  00EA04  6E0E               	movwf	printf@f+1,c
  4551  00EA06  EE20 F002          	lfsr	2,2
  4552  00EA0A  5027               	movf	stand_by@time,w,c
  4553  00EA0C  26D9               	addwf	fsr2l,f,c
  4554  00EA0E  5028               	movf	stand_by@time+1,w,c
  4555  00EA10  22DA               	addwfc	fsr2h,f,c
  4556  00EA12  50DF               	movf	indf2,w,c
  4557  00EA14  6E29               	movwf	??_stand_by& (0+255),c
  4558  00EA16  5029               	movf	??_stand_by,w,c
  4559  00EA18  6E0F               	movwf	?_printf+2,c
  4560  00EA1A  6A10               	clrf	?_printf+3,c
  4561  00EA1C  EE20 F001          	lfsr	2,1
  4562  00EA20  5027               	movf	stand_by@time,w,c
  4563  00EA22  26D9               	addwf	fsr2l,f,c
  4564  00EA24  5028               	movf	stand_by@time+1,w,c
  4565  00EA26  22DA               	addwfc	fsr2h,f,c
  4566  00EA28  50DF               	movf	indf2,w,c
  4567  00EA2A  6E2A               	movwf	(??_stand_by+1)& (0+255),c
  4568  00EA2C  502A               	movf	??_stand_by+1,w,c
  4569  00EA2E  6E11               	movwf	?_printf+4,c
  4570  00EA30  6A12               	clrf	?_printf+5,c
  4571  00EA32  C027  FFD9         	movff	stand_by@time,fsr2l
  4572  00EA36  C028  FFDA         	movff	stand_by@time+1,fsr2h
  4573  00EA3A  50DF               	movf	indf2,w,c
  4574  00EA3C  6E2B               	movwf	(??_stand_by+2)& (0+255),c
  4575  00EA3E  502B               	movf	??_stand_by+2,w,c
  4576  00EA40  6E13               	movwf	?_printf+6,c
  4577  00EA42  6A14               	clrf	?_printf+7,c
  4578  00EA44  EC99  F07D         	call	_printf	;wreg free
  4579                           
  4580                           ;main.c: 126: _delay((unsigned long)((10)*(8000000/4000.0)));
  4581  00EA48  0E1A               	movlw	26
  4582  00EA4A  6E29               	movwf	??_stand_by& (0+255),c
  4583  00EA4C  0EF8               	movlw	248
  4584  00EA4E                     u3367:
  4585  00EA4E  2EE8               	decfsz	wreg,f,c
  4586  00EA50  D7FE               	bra	u3367
  4587  00EA52  2E29               	decfsz	??_stand_by& (0+255),f,c
  4588  00EA54  D7FC               	bra	u3367
  4589  00EA56  D000               	nop2	
  4590  00EA58  0012               	return		;funcret
  4591  00EA5A                     __end_of_stand_by:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon2	equ	0xFF1
  4600                           wreg	equ	0xFE8
  4601                           indf2	equ	0xFDF
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _update_time *****************
  4609 ;; Defined at:
  4610 ;;		line 213 in file "main.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  time            2    3[COMRAM] PTR unsigned char 
  4613 ;;		 -> main@end_time(7), main@start_time(7), main@time(7), 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  i               1    5[COMRAM] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;Total ram usage:        3 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    2
  4632 ;; This function calls:
  4633 ;;		_I2C_Master_Read
  4634 ;;		_I2C_Master_Start
  4635 ;;		_I2C_Master_Stop
  4636 ;;		_I2C_Master_Write
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;;		_stand_by
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text22
  4644  00E5DA                     __ptext22:
  4645                           	opt stack 0
  4646  00E5DA                     _update_time:
  4647                           	opt stack 28
  4648                           
  4649                           ;main.c: 216: I2C_Master_Start();
  4650                           
  4651                           ;incstack = 0
  4652  00E5DA  ECE2  F070         	call	_I2C_Master_Start	;wreg free
  4653                           
  4654                           ;main.c: 217: I2C_Master_Write(0b11010000);
  4655  00E5DE  0E00               	movlw	0
  4656  00E5E0  6E03               	movwf	I2C_Master_Write@d+1,c
  4657  00E5E2  0ED0               	movlw	208
  4658  00E5E4  6E02               	movwf	I2C_Master_Write@d,c
  4659  00E5E6  ECEA  F070         	call	_I2C_Master_Write	;wreg free
  4660                           
  4661                           ;main.c: 218: I2C_Master_Write(0x00);
  4662  00E5EA  0E00               	movlw	0
  4663  00E5EC  6E03               	movwf	I2C_Master_Write@d+1,c
  4664  00E5EE  0E00               	movlw	0
  4665  00E5F0  6E02               	movwf	I2C_Master_Write@d,c
  4666  00E5F2  ECEA  F070         	call	_I2C_Master_Write	;wreg free
  4667                           
  4668                           ;main.c: 219: I2C_Master_Stop();
  4669  00E5F6  ECE6  F070         	call	_I2C_Master_Stop	;wreg free
  4670                           
  4671                           ;main.c: 222: I2C_Master_Start();
  4672  00E5FA  ECE2  F070         	call	_I2C_Master_Start	;wreg free
  4673                           
  4674                           ;main.c: 223: I2C_Master_Write(0b11010001);
  4675  00E5FE  0E00               	movlw	0
  4676  00E600  6E03               	movwf	I2C_Master_Write@d+1,c
  4677  00E602  0ED1               	movlw	209
  4678  00E604  6E02               	movwf	I2C_Master_Write@d,c
  4679  00E606  ECEA  F070         	call	_I2C_Master_Write	;wreg free
  4680                           
  4681                           ;main.c: 224: for(unsigned char i=0;i<0x06;i++){
  4682  00E60A  0E00               	movlw	0
  4683  00E60C  6E06               	movwf	update_time@i,c
  4684  00E60E                     l3003:
  4685  00E60E  0E05               	movlw	5
  4686  00E610  6406               	cpfsgt	update_time@i,c
  4687  00E612  D001               	goto	l3007
  4688  00E614  D00E               	goto	l3013
  4689  00E616                     l3007:
  4690                           
  4691                           ;main.c: 225: time[i] = I2C_Master_Read(1);
  4692  00E616  5006               	movf	update_time@i,w,c
  4693  00E618  0D01               	mullw	1
  4694  00E61A  50F3               	movf	prodl,w,c
  4695  00E61C  2404               	addwf	update_time@time,w,c
  4696  00E61E  6ED9               	movwf	fsr2l,c
  4697  00E620  50F4               	movf	prodh,w,c
  4698  00E622  2005               	addwfc	update_time@time+1,w,c
  4699  00E624  6EDA               	movwf	fsr2h,c
  4700  00E626  0E01               	movlw	1
  4701  00E628  EC52  F071         	call	_I2C_Master_Read
  4702  00E62C  6EDF               	movwf	indf2,c
  4703  00E62E  2A06               	incf	update_time@i,f,c
  4704  00E630  D7EE               	goto	l3003
  4705  00E632                     l3013:
  4706                           
  4707                           ;main.c: 226: }
  4708                           ;main.c: 228: time[6] = I2C_Master_Read(0);
  4709  00E632  EE20 F006          	lfsr	2,6
  4710  00E636  5004               	movf	update_time@time,w,c
  4711  00E638  26D9               	addwf	fsr2l,f,c
  4712  00E63A  5005               	movf	update_time@time+1,w,c
  4713  00E63C  22DA               	addwfc	fsr2h,f,c
  4714  00E63E  0E00               	movlw	0
  4715  00E640  EC52  F071         	call	_I2C_Master_Read
  4716  00E644  6EDF               	movwf	indf2,c
  4717                           
  4718                           ;main.c: 229: I2C_Master_Stop();
  4719  00E646  ECE6  F070         	call	_I2C_Master_Stop	;wreg free
  4720  00E64A  0012               	return		;funcret
  4721  00E64C                     __end_of_update_time:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           tblptrh	equ	0xFF7
  4725                           tblptrl	equ	0xFF6
  4726                           tablat	equ	0xFF5
  4727                           prodh	equ	0xFF4
  4728                           prodl	equ	0xFF3
  4729                           intcon2	equ	0xFF1
  4730                           wreg	equ	0xFE8
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _I2C_Master_Write *****************
  4739 ;; Defined at:
  4740 ;;		line 47 in file "I2C.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  d               2    1[COMRAM] unsigned int 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      void 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;Total ram usage:        2 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    1
  4761 ;; This function calls:
  4762 ;;		_I2C_Master_Wait
  4763 ;; This function is called by:
  4764 ;;		_update_time
  4765 ;;		_set_time
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text23
  4770  00E1D4                     __ptext23:
  4771                           	opt stack 0
  4772  00E1D4                     _I2C_Master_Write:
  4773                           	opt stack 28
  4774                           
  4775                           ;I2C.c: 49: I2C_Master_Wait();
  4776                           
  4777                           ;incstack = 0
  4778  00E1D4  EC02  F071         	call	_I2C_Master_Wait	;wreg free
  4779                           
  4780                           ;I2C.c: 50: SSPBUF = d;
  4781  00E1D8  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4782  00E1DC  0012               	return		;funcret
  4783  00E1DE                     __end_of_I2C_Master_Write:
  4784                           	opt stack 0
  4785                           tblptru	equ	0xFF8
  4786                           tblptrh	equ	0xFF7
  4787                           tblptrl	equ	0xFF6
  4788                           tablat	equ	0xFF5
  4789                           prodh	equ	0xFF4
  4790                           prodl	equ	0xFF3
  4791                           intcon2	equ	0xFF1
  4792                           wreg	equ	0xFE8
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           postdec2	equ	0xFDD
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _I2C_Master_Stop *****************
  4801 ;; Defined at:
  4802 ;;		line 41 in file "I2C.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  2   54[None  ] int 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    1
  4823 ;; This function calls:
  4824 ;;		_I2C_Master_Wait
  4825 ;; This function is called by:
  4826 ;;		_update_time
  4827 ;;		_set_time
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           	psect	text24
  4832  00E1CC                     __ptext24:
  4833                           	opt stack 0
  4834  00E1CC                     _I2C_Master_Stop:
  4835                           	opt stack 28
  4836                           
  4837                           ;I2C.c: 43: I2C_Master_Wait();
  4838                           
  4839                           ;incstack = 0
  4840  00E1CC  EC02  F071         	call	_I2C_Master_Wait	;wreg free
  4841                           
  4842                           ;I2C.c: 44: PEN = 1;
  4843  00E1D0  84C5               	bsf	4037,2,c	;volatile
  4844  00E1D2  0012               	return		;funcret
  4845  00E1D4                     __end_of_I2C_Master_Stop:
  4846                           	opt stack 0
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon2	equ	0xFF1
  4854                           wreg	equ	0xFE8
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _I2C_Master_Start *****************
  4863 ;; Defined at:
  4864 ;;		line 29 in file "I2C.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  2   50[None  ] int 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        0 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    1
  4885 ;; This function calls:
  4886 ;;		_I2C_Master_Wait
  4887 ;; This function is called by:
  4888 ;;		_update_time
  4889 ;;		_set_time
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text25
  4894  00E1C4                     __ptext25:
  4895                           	opt stack 0
  4896  00E1C4                     _I2C_Master_Start:
  4897                           	opt stack 28
  4898                           
  4899                           ;I2C.c: 31: I2C_Master_Wait();
  4900                           
  4901                           ;incstack = 0
  4902  00E1C4  EC02  F071         	call	_I2C_Master_Wait	;wreg free
  4903                           
  4904                           ;I2C.c: 32: SEN = 1;
  4905  00E1C8  80C5               	bsf	4037,0,c	;volatile
  4906  00E1CA  0012               	return		;funcret
  4907  00E1CC                     __end_of_I2C_Master_Start:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           intcon2	equ	0xFF1
  4916                           wreg	equ	0xFE8
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _I2C_Master_Read *****************
  4925 ;; Defined at:
  4926 ;;		line 53 in file "I2C.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  a               1    wreg     unsigned char 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  a               1    1[COMRAM] unsigned char 
  4931 ;;  temp            1    2[COMRAM] unsigned char 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      unsigned char 
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;Total ram usage:        2 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    1
  4948 ;; This function calls:
  4949 ;;		_I2C_Master_Wait
  4950 ;; This function is called by:
  4951 ;;		_update_time
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text26
  4956  00E2A4                     __ptext26:
  4957                           	opt stack 0
  4958  00E2A4                     _I2C_Master_Read:
  4959                           	opt stack 28
  4960                           
  4961                           ;incstack = 0
  4962                           ;I2C_Master_Read@a stored from wreg
  4963  00E2A4  6E02               	movwf	I2C_Master_Read@a,c
  4964                           
  4965                           ;I2C.c: 55: unsigned char temp;
  4966                           ;I2C.c: 56: I2C_Master_Wait();
  4967  00E2A6  EC02  F071         	call	_I2C_Master_Wait	;wreg free
  4968                           
  4969                           ;I2C.c: 57: RCEN = 1;
  4970  00E2AA  86C5               	bsf	4037,3,c	;volatile
  4971                           
  4972                           ;I2C.c: 58: I2C_Master_Wait();
  4973  00E2AC  EC02  F071         	call	_I2C_Master_Wait	;wreg free
  4974                           
  4975                           ;I2C.c: 59: temp = SSPBUF;
  4976  00E2B0  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  4977                           
  4978                           ;I2C.c: 60: I2C_Master_Wait();
  4979  00E2B4  EC02  F071         	call	_I2C_Master_Wait	;wreg free
  4980                           
  4981                           ;I2C.c: 61: ACKDT = (a)?0:1;
  4982  00E2B8  5002               	movf	I2C_Master_Read@a,w,c
  4983  00E2BA  A4D8               	btfss	status,2,c
  4984  00E2BC  D002               	goto	u2840
  4985  00E2BE  8AC5               	bsf	4037,5,c	;volatile
  4986  00E2C0  D001               	goto	l2891
  4987  00E2C2                     u2840:
  4988  00E2C2  9AC5               	bcf	4037,5,c	;volatile
  4989  00E2C4                     l2891:
  4990                           
  4991                           ;I2C.c: 62: ACKEN = 1;
  4992  00E2C4  88C5               	bsf	4037,4,c	;volatile
  4993                           
  4994                           ;I2C.c: 63: return temp;
  4995  00E2C6  5003               	movf	I2C_Master_Read@temp,w,c
  4996  00E2C8  0012               	return	
  4997  00E2CA                     __end_of_I2C_Master_Read:
  4998                           	opt stack 0
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon2	equ	0xFF1
  5006                           wreg	equ	0xFE8
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function _I2C_Master_Wait *****************
  5015 ;; Defined at:
  5016 ;;		line 24 in file "I2C.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;Total ram usage:        1 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; This function calls:
  5037 ;;		Nothing
  5038 ;; This function is called by:
  5039 ;;		_I2C_Master_Start
  5040 ;;		_I2C_Master_Stop
  5041 ;;		_I2C_Master_Write
  5042 ;;		_I2C_Master_Read
  5043 ;;		_I2C_Master_RepeatedStart
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text27
  5048  00E204                     __ptext27:
  5049                           	opt stack 0
  5050  00E204                     _I2C_Master_Wait:
  5051                           	opt stack 28
  5052  00E204                     l211:
  5053  00E204  B4C7               	btfsc	4039,2,c	;volatile
  5054  00E206  D7FE               	goto	l211
  5055  00E208  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  5056  00E20C  0E1F               	movlw	31
  5057  00E20E  1601               	andwf	??_I2C_Master_Wait,f,c
  5058  00E210  B4D8               	btfsc	status,2,c
  5059  00E212  0012               	return	
  5060  00E214  D7F7               	goto	l211
  5061  00E216                     __end_of_I2C_Master_Wait:
  5062                           	opt stack 0
  5063                           tblptru	equ	0xFF8
  5064                           tblptrh	equ	0xFF7
  5065                           tblptrl	equ	0xFF6
  5066                           tablat	equ	0xFF5
  5067                           prodh	equ	0xFF4
  5068                           prodl	equ	0xFF3
  5069                           intcon2	equ	0xFF1
  5070                           wreg	equ	0xFE8
  5071                           indf2	equ	0xFDF
  5072                           postinc2	equ	0xFDE
  5073                           postdec2	equ	0xFDD
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _end_phase *****************
  5079 ;; Defined at:
  5080 ;;		line 129 in file "main.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;  time            2   42[COMRAM] int 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  sec             2   50[COMRAM] int 
  5085 ;;  min             2   48[COMRAM] int 
  5086 ;;  hours           2   46[COMRAM] int 
  5087 ;;  pg              1   52[COMRAM] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5097 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;Total ram usage:       11 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    4
  5104 ;; This function calls:
  5105 ;;		___awdiv
  5106 ;;		___awmod
  5107 ;;		_initLCD
  5108 ;;		_lcdInst
  5109 ;;		_message
  5110 ;;		_printf
  5111 ;; This function is called by:
  5112 ;;		_main
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text28
  5117  00F94A                     __ptext28:
  5118                           	opt stack 0
  5119  00F94A                     _end_phase:
  5120                           	opt stack 26
  5121                           
  5122                           ;main.c: 130: int hours, min, sec;
  5123                           ;main.c: 131: char pg;
  5124                           ;main.c: 132: pg = 0;
  5125                           
  5126                           ;incstack = 0
  5127  00F94A  0E00               	movlw	0
  5128  00F94C  6E35               	movwf	end_phase@pg,c
  5129                           
  5130                           ;main.c: 133: lcdInst(0b00000001);;
  5131  00F94E  0E01               	movlw	1
  5132  00F950  ECEF  F070         	call	_lcdInst
  5133  00F954                     l3157:
  5134                           
  5135                           ;main.c: 136: if (pg == 0) {
  5136  00F954  5035               	movf	end_phase@pg,w,c
  5137  00F956  A4D8               	btfss	status,2,c
  5138  00F958  D026               	goto	l3171
  5139                           
  5140                           ;main.c: 137: initLCD();
  5141  00F95A  ECE4  F071         	call	_initLCD	;wreg free
  5142                           
  5143                           ;main.c: 138: while (PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != 'A') {
  5144  00F95E  D00A               	goto	l3163
  5145  00F960                     l3161:
  5146                           
  5147                           ;main.c: 140: message("Next Page: A", "Count Sorted:10");
  5148  00F960  0EDB               	movlw	low STR_7
  5149  00F962  6E27               	movwf	message@line1,c
  5150  00F964  0EFF               	movlw	high STR_7
  5151  00F966  6E28               	movwf	message@line1+1,c
  5152  00F968  0E5E               	movlw	low STR_8
  5153  00F96A  6E29               	movwf	message@line2,c
  5154  00F96C  0EFF               	movlw	high STR_8
  5155  00F96E  6E2A               	movwf	message@line2+1,c
  5156  00F970  EC3F  F071         	call	_message	;wreg free
  5157  00F974                     l3163:
  5158  00F974  B281               	btfsc	3969,1,c	;volatile
  5159  00F976  D010               	goto	l95
  5160  00F978  3881               	swapf	3969,w,c	;volatile
  5161  00F97A  0B0F               	andlw	15
  5162  00F97C  0B0F               	andlw	15
  5163  00F97E  6E2D               	movwf	??_end_phase& (0+255),c
  5164  00F980  6A2E               	clrf	(??_end_phase+1)& (0+255),c
  5165  00F982  0EAD               	movlw	low _keys
  5166  00F984  242D               	addwf	??_end_phase,w,c
  5167  00F986  6EF6               	movwf	tblptrl,c
  5168  00F988  0EFE               	movlw	high _keys
  5169  00F98A  202E               	addwfc	??_end_phase+1,w,c
  5170  00F98C  6EF7               	movwf	tblptrh,c
  5171  00F98E                     	if	0	;There are less than 3 active tblptr bytes
  5172  00F98E                     	endif
  5173  00F98E  0008               	tblrd		*
  5174  00F990  50F5               	movf	tablat,w,c
  5175  00F992  0A41               	xorlw	65
  5176  00F994  A4D8               	btfss	status,2,c
  5177  00F996  D7E4               	goto	l3161
  5178  00F998                     l95:
  5179  00F998  B281               	btfsc	3969,1,c	;volatile
  5180  00F99A  D7FE               	goto	l95
  5181                           
  5182                           ;main.c: 146: }
  5183                           ;main.c: 147: lcdInst(0b00000001);;
  5184  00F99C  0E01               	movlw	1
  5185  00F99E  ECEF  F070         	call	_lcdInst
  5186                           
  5187                           ;main.c: 148: pg = 1;
  5188  00F9A2  0E01               	movlw	1
  5189  00F9A4  D0C4               	goto	L4
  5190  00F9A6                     l3171:
  5191                           
  5192                           ;main.c: 151: else if (pg == 1) {
  5193  00F9A6  0435               	decf	end_phase@pg,w,c
  5194  00F9A8  A4D8               	btfss	status,2,c
  5195  00F9AA  D026               	goto	l3185
  5196                           
  5197                           ;main.c: 152: initLCD();
  5198  00F9AC  ECE4  F071         	call	_initLCD	;wreg free
  5199                           
  5200                           ;main.c: 153: while (PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != 'A') {
  5201  00F9B0  D00A               	goto	l3177
  5202  00F9B2                     l3175:
  5203                           
  5204                           ;main.c: 155: message("Cat1:3   Cat2:4", "Cat3:1   Cat4:0");
  5205  00F9B2  0E9E               	movlw	low STR_9
  5206  00F9B4  6E27               	movwf	message@line1,c
  5207  00F9B6  0EFF               	movlw	high STR_9
  5208  00F9B8  6E28               	movwf	message@line1+1,c
  5209  00F9BA  0E6E               	movlw	low STR_10
  5210  00F9BC  6E29               	movwf	message@line2,c
  5211  00F9BE  0EFF               	movlw	high STR_10
  5212  00F9C0  6E2A               	movwf	message@line2+1,c
  5213  00F9C2  EC3F  F071         	call	_message	;wreg free
  5214  00F9C6                     l3177:
  5215  00F9C6  B281               	btfsc	3969,1,c	;volatile
  5216  00F9C8  D010               	goto	l105
  5217  00F9CA  3881               	swapf	3969,w,c	;volatile
  5218  00F9CC  0B0F               	andlw	15
  5219  00F9CE  0B0F               	andlw	15
  5220  00F9D0  6E2D               	movwf	??_end_phase& (0+255),c
  5221  00F9D2  6A2E               	clrf	(??_end_phase+1)& (0+255),c
  5222  00F9D4  0EAD               	movlw	low _keys
  5223  00F9D6  242D               	addwf	??_end_phase,w,c
  5224  00F9D8  6EF6               	movwf	tblptrl,c
  5225  00F9DA  0EFE               	movlw	high _keys
  5226  00F9DC  202E               	addwfc	??_end_phase+1,w,c
  5227  00F9DE  6EF7               	movwf	tblptrh,c
  5228  00F9E0                     	if	0	;There are less than 3 active tblptr bytes
  5229  00F9E0                     	endif
  5230  00F9E0  0008               	tblrd		*
  5231  00F9E2  50F5               	movf	tablat,w,c
  5232  00F9E4  0A41               	xorlw	65
  5233  00F9E6  A4D8               	btfss	status,2,c
  5234  00F9E8  D7E4               	goto	l3175
  5235  00F9EA                     l105:
  5236  00F9EA  B281               	btfsc	3969,1,c	;volatile
  5237  00F9EC  D7FE               	goto	l105
  5238                           
  5239                           ;main.c: 161: }
  5240                           ;main.c: 162: lcdInst(0b00000001);;
  5241  00F9EE  0E01               	movlw	1
  5242  00F9F0  ECEF  F070         	call	_lcdInst
  5243                           
  5244                           ;main.c: 163: pg = 2;
  5245  00F9F4  0E02               	movlw	2
  5246  00F9F6  D09B               	goto	L4
  5247  00F9F8                     l3185:
  5248                           
  5249                           ;main.c: 166: else if (pg == 2) {
  5250  00F9F8  0E02               	movlw	2
  5251  00F9FA  1835               	xorwf	end_phase@pg,w,c
  5252  00F9FC  A4D8               	btfss	status,2,c
  5253  00F9FE  D026               	goto	l3199
  5254                           
  5255                           ;main.c: 167: initLCD();
  5256  00FA00  ECE4  F071         	call	_initLCD	;wreg free
  5257                           
  5258                           ;main.c: 168: while (PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != 'A') {
  5259  00FA04  D00A               	goto	l3191
  5260  00FA06                     l3189:
  5261                           
  5262                           ;main.c: 170: message("Cat5:3   Cat6:1", "Cat7:1   Cat8:0");
  5263  00FA06  0E8E               	movlw	low STR_11
  5264  00FA08  6E27               	movwf	message@line1,c
  5265  00FA0A  0EFF               	movlw	high STR_11
  5266  00FA0C  6E28               	movwf	message@line1+1,c
  5267  00FA0E  0E7E               	movlw	low STR_12
  5268  00FA10  6E29               	movwf	message@line2,c
  5269  00FA12  0EFF               	movlw	high STR_12
  5270  00FA14  6E2A               	movwf	message@line2+1,c
  5271  00FA16  EC3F  F071         	call	_message	;wreg free
  5272  00FA1A                     l3191:
  5273  00FA1A  B281               	btfsc	3969,1,c	;volatile
  5274  00FA1C  D010               	goto	l115
  5275  00FA1E  3881               	swapf	3969,w,c	;volatile
  5276  00FA20  0B0F               	andlw	15
  5277  00FA22  0B0F               	andlw	15
  5278  00FA24  6E2D               	movwf	??_end_phase& (0+255),c
  5279  00FA26  6A2E               	clrf	(??_end_phase+1)& (0+255),c
  5280  00FA28  0EAD               	movlw	low _keys
  5281  00FA2A  242D               	addwf	??_end_phase,w,c
  5282  00FA2C  6EF6               	movwf	tblptrl,c
  5283  00FA2E  0EFE               	movlw	high _keys
  5284  00FA30  202E               	addwfc	??_end_phase+1,w,c
  5285  00FA32  6EF7               	movwf	tblptrh,c
  5286  00FA34                     	if	0	;There are less than 3 active tblptr bytes
  5287  00FA34                     	endif
  5288  00FA34  0008               	tblrd		*
  5289  00FA36  50F5               	movf	tablat,w,c
  5290  00FA38  0A41               	xorlw	65
  5291  00FA3A  A4D8               	btfss	status,2,c
  5292  00FA3C  D7E4               	goto	l3189
  5293  00FA3E                     l115:
  5294  00FA3E  B281               	btfsc	3969,1,c	;volatile
  5295  00FA40  D7FE               	goto	l115
  5296                           
  5297                           ;main.c: 176: }
  5298                           ;main.c: 177: lcdInst(0b00000001);;
  5299  00FA42  0E01               	movlw	1
  5300  00FA44  ECEF  F070         	call	_lcdInst
  5301                           
  5302                           ;main.c: 178: pg = 3;
  5303  00FA48  0E03               	movlw	3
  5304  00FA4A  D071               	goto	L4
  5305  00FA4C                     l3199:
  5306                           
  5307                           ;main.c: 181: else if (pg == 3) {
  5308  00FA4C  0E03               	movlw	3
  5309  00FA4E  1835               	xorwf	end_phase@pg,w,c
  5310  00FA50  A4D8               	btfss	status,2,c
  5311  00FA52  D780               	goto	l3157
  5312                           
  5313                           ;main.c: 182: initLCD();
  5314  00FA54  ECE4  F071         	call	_initLCD	;wreg free
  5315                           
  5316                           ;main.c: 183: while (PORTBbits.RB1 == 0 && keys[(PORTB & 0xF0)>>4] != 'A') {
  5317  00FA58  D052               	goto	l3209
  5318  00FA5A                     l3203:
  5319                           
  5320                           ;main.c: 184: hours = time/3600;
  5321  00FA5A  C02B  F007         	movff	end_phase@time,___awdiv@dividend
  5322  00FA5E  C02C  F008         	movff	end_phase@time+1,___awdiv@dividend+1
  5323  00FA62  0E0E               	movlw	14
  5324  00FA64  6E0A               	movwf	___awdiv@divisor+1,c
  5325  00FA66  0E10               	movlw	16
  5326  00FA68  6E09               	movwf	___awdiv@divisor,c
  5327  00FA6A  ECA3  F073         	call	___awdiv	;wreg free
  5328  00FA6E  C007  F02F         	movff	?___awdiv,end_phase@hours
  5329  00FA72  C008  F030         	movff	?___awdiv+1,end_phase@hours+1
  5330                           
  5331                           ;main.c: 185: min = (time%3600)/60;
  5332  00FA76  0E0E               	movlw	14
  5333  00FA78  6E04               	movwf	___awmod@divisor+1,c
  5334  00FA7A  0E10               	movlw	16
  5335  00FA7C  6E03               	movwf	___awmod@divisor,c
  5336  00FA7E  C02B  F001         	movff	end_phase@time,___awmod@dividend
  5337  00FA82  C02C  F002         	movff	end_phase@time+1,___awmod@dividend+1
  5338  00FA86  ECB5  F072         	call	___awmod	;wreg free
  5339  00FA8A  C001  F007         	movff	?___awmod,___awdiv@dividend
  5340  00FA8E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5341  00FA92  0E00               	movlw	0
  5342  00FA94  6E0A               	movwf	___awdiv@divisor+1,c
  5343  00FA96  0E3C               	movlw	60
  5344  00FA98  6E09               	movwf	___awdiv@divisor,c
  5345  00FA9A  ECA3  F073         	call	___awdiv	;wreg free
  5346  00FA9E  C007  F031         	movff	?___awdiv,end_phase@min
  5347  00FAA2  C008  F032         	movff	?___awdiv+1,end_phase@min+1
  5348                           
  5349                           ;main.c: 186: sec = time%60;
  5350  00FAA6  C02B  F001         	movff	end_phase@time,___awmod@dividend
  5351  00FAAA  C02C  F002         	movff	end_phase@time+1,___awmod@dividend+1
  5352  00FAAE  0E00               	movlw	0
  5353  00FAB0  6E04               	movwf	___awmod@divisor+1,c
  5354  00FAB2  0E3C               	movlw	60
  5355  00FAB4  6E03               	movwf	___awmod@divisor,c
  5356  00FAB6  ECB5  F072         	call	___awmod	;wreg free
  5357  00FABA  C001  F033         	movff	?___awmod,end_phase@sec
  5358  00FABE  C002  F034         	movff	?___awmod+1,end_phase@sec+1
  5359                           
  5360                           ;main.c: 187: lcdInst(0b10000000);;
  5361  00FAC2  0E80               	movlw	128
  5362  00FAC4  ECEF  F070         	call	_lcdInst
  5363                           
  5364                           ;main.c: 188: printf("Time: %d:%d:%d", hours, min, sec);
  5365  00FAC8  0EBD               	movlw	low STR_13
  5366  00FACA  6E0D               	movwf	printf@f,c
  5367  00FACC  0EFF               	movlw	high STR_13
  5368  00FACE  6E0E               	movwf	printf@f+1,c
  5369  00FAD0  C02F  F00F         	movff	end_phase@hours,?_printf+2
  5370  00FAD4  C030  F010         	movff	end_phase@hours+1,?_printf+3
  5371  00FAD8  C031  F011         	movff	end_phase@min,?_printf+4
  5372  00FADC  C032  F012         	movff	end_phase@min+1,?_printf+5
  5373  00FAE0  C033  F013         	movff	end_phase@sec,?_printf+6
  5374  00FAE4  C034  F014         	movff	end_phase@sec+1,?_printf+7
  5375  00FAE8  EC99  F07D         	call	_printf	;wreg free
  5376                           
  5377                           ;main.c: 189: lcdInst(0b11000000);;
  5378  00FAEC  0EC0               	movlw	192
  5379  00FAEE  ECEF  F070         	call	_lcdInst
  5380                           
  5381                           ;main.c: 190: printf("End-A to go back");
  5382  00FAF2  0E4D               	movlw	low STR_14
  5383  00FAF4  6E0D               	movwf	printf@f,c
  5384  00FAF6  0EFF               	movlw	high STR_14
  5385  00FAF8  6E0E               	movwf	printf@f+1,c
  5386  00FAFA  EC99  F07D         	call	_printf	;wreg free
  5387  00FAFE                     l3209:
  5388  00FAFE  B281               	btfsc	3969,1,c	;volatile
  5389  00FB00  D010               	goto	l125
  5390  00FB02  3881               	swapf	3969,w,c	;volatile
  5391  00FB04  0B0F               	andlw	15
  5392  00FB06  0B0F               	andlw	15
  5393  00FB08  6E2D               	movwf	??_end_phase& (0+255),c
  5394  00FB0A  6A2E               	clrf	(??_end_phase+1)& (0+255),c
  5395  00FB0C  0EAD               	movlw	low _keys
  5396  00FB0E  242D               	addwf	??_end_phase,w,c
  5397  00FB10  6EF6               	movwf	tblptrl,c
  5398  00FB12  0EFE               	movlw	high _keys
  5399  00FB14  202E               	addwfc	??_end_phase+1,w,c
  5400  00FB16  6EF7               	movwf	tblptrh,c
  5401  00FB18                     	if	0	;There are less than 3 active tblptr bytes
  5402  00FB18                     	endif
  5403  00FB18  0008               	tblrd		*
  5404  00FB1A  50F5               	movf	tablat,w,c
  5405  00FB1C  0A41               	xorlw	65
  5406  00FB1E  A4D8               	btfss	status,2,c
  5407  00FB20  D79C               	goto	l3203
  5408  00FB22                     l125:
  5409  00FB22  B281               	btfsc	3969,1,c	;volatile
  5410  00FB24  D7FE               	goto	l125
  5411                           
  5412                           ;main.c: 196: }
  5413                           ;main.c: 197: lcdInst(0b00000001);;
  5414  00FB26  0E01               	movlw	1
  5415  00FB28  ECEF  F070         	call	_lcdInst
  5416                           
  5417                           ;main.c: 198: pg = 0;
  5418  00FB2C  0E00               	movlw	0
  5419  00FB2E                     L4:
  5420  00FB2E  6E35               	movwf	end_phase@pg,c
  5421  00FB30  D711               	goto	l3157
  5422  00FB32                     __end_of_end_phase:
  5423                           	opt stack 0
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           prodh	equ	0xFF4
  5429                           prodl	equ	0xFF3
  5430                           intcon2	equ	0xFF1
  5431                           wreg	equ	0xFE8
  5432                           indf2	equ	0xFDF
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _message *****************
  5440 ;; Defined at:
  5441 ;;		line 206 in file "main.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  line1           2   38[COMRAM] PTR unsigned char 
  5444 ;;		 -> STR_11(16), STR_9(16), STR_7(13), 
  5445 ;;  line2           2   40[COMRAM] PTR unsigned char 
  5446 ;;		 -> STR_12(16), STR_10(16), STR_8(16), 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:        4 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    3
  5465 ;; This function calls:
  5466 ;;		_lcdInst
  5467 ;;		_printf
  5468 ;; This function is called by:
  5469 ;;		_end_phase
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text29
  5474  00E27E                     __ptext29:
  5475                           	opt stack 0
  5476  00E27E                     _message:
  5477                           	opt stack 26
  5478                           
  5479                           ;main.c: 207: lcdInst(0b10000000);;
  5480                           
  5481                           ;incstack = 0
  5482  00E27E  0E80               	movlw	128
  5483  00E280  ECEF  F070         	call	_lcdInst
  5484                           
  5485                           ;main.c: 208: printf(line1);
  5486  00E284  C027  F00D         	movff	message@line1,printf@f
  5487  00E288  C028  F00E         	movff	message@line1+1,printf@f+1
  5488  00E28C  EC99  F07D         	call	_printf	;wreg free
  5489                           
  5490                           ;main.c: 209: lcdInst(0b11000000);;
  5491  00E290  0EC0               	movlw	192
  5492  00E292  ECEF  F070         	call	_lcdInst
  5493                           
  5494                           ;main.c: 210: printf(line2);
  5495  00E296  C029  F00D         	movff	message@line2,printf@f
  5496  00E29A  C02A  F00E         	movff	message@line2+1,printf@f+1
  5497  00E29E  EC99  F07D         	call	_printf	;wreg free
  5498  00E2A2  0012               	return		;funcret
  5499  00E2A4                     __end_of_message:
  5500                           	opt stack 0
  5501                           tblptru	equ	0xFF8
  5502                           tblptrh	equ	0xFF7
  5503                           tblptrl	equ	0xFF6
  5504                           tablat	equ	0xFF5
  5505                           prodh	equ	0xFF4
  5506                           prodl	equ	0xFF3
  5507                           intcon2	equ	0xFF1
  5508                           wreg	equ	0xFE8
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _printf *****************
  5517 ;; Defined at:
  5518 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5521 ;;		 -> STR_14(17), STR_13(15), STR_12(16), STR_11(16), 
  5522 ;;		 -> STR_10(16), STR_9(16), STR_8(16), STR_7(13), 
  5523 ;;		 -> STR_6(22), STR_5(22), STR_4(12), STR_3(11), 
  5524 ;;		 -> STR_2(15), STR_1(15), 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;  idx             1   26[COMRAM] unsigned char 
  5527 ;;  tmpval          4    0        struct .
  5528 ;;  width           2   35[COMRAM] int 
  5529 ;;  val             2   32[COMRAM] unsigned int 
  5530 ;;  len             2   29[COMRAM] unsigned int 
  5531 ;;  ap              2   27[COMRAM] PTR void [1]
  5532 ;;		 -> ?_printf(2), 
  5533 ;;  cp              2   24[COMRAM] PTR const unsigned char 
  5534 ;;		 -> printf@c(1), 
  5535 ;;  c               1   37[COMRAM] char 
  5536 ;;  flag            1   34[COMRAM] unsigned char 
  5537 ;;  prec            1   31[COMRAM] char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  2   12[COMRAM] int 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5547 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;Total ram usage:       26 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    2
  5554 ;; This function calls:
  5555 ;;		___lwdiv
  5556 ;;		___lwmod
  5557 ;;		___wmul
  5558 ;;		_isdigit
  5559 ;;		_putch
  5560 ;; This function is called by:
  5561 ;;		_main
  5562 ;;		_stand_by
  5563 ;;		_end_phase
  5564 ;;		_message
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text30
  5569  00FB32                     __ptext30:
  5570                           	opt stack 0
  5571  00FB32                     _printf:
  5572                           	opt stack 27
  5573                           
  5574                           ;doprnt.c: 466: va_list ap;
  5575                           ;doprnt.c: 499: signed char c;
  5576                           ;doprnt.c: 501: int width;
  5577                           ;doprnt.c: 506: signed char prec;
  5578                           ;doprnt.c: 508: unsigned char flag;
  5579                           ;doprnt.c: 523: union {
  5580                           ;doprnt.c: 524: unsigned long vd;
  5581                           ;doprnt.c: 525: double integ;
  5582                           ;doprnt.c: 526: } tmpval;
  5583                           ;doprnt.c: 528: unsigned int val;
  5584                           ;doprnt.c: 529: unsigned len;
  5585                           ;doprnt.c: 530: const char * cp;
  5586                           ;doprnt.c: 533: *ap = __va_start();
  5587                           
  5588                           ;incstack = 0
  5589  00FB32  0E0F               	movlw	low (?_printf+2)
  5590  00FB34  6E1C               	movwf	printf@ap,c
  5591  00FB36  0E00               	movlw	high (?_printf+2)
  5592  00FB38  6E1D               	movwf	printf@ap+1,c
  5593                           
  5594                           ;doprnt.c: 536: while(c = *f++) {
  5595  00FB3A  D1AB               	goto	l2869
  5596  00FB3C                     l2723:
  5597                           
  5598                           ;doprnt.c: 538: if(c != '%')
  5599  00FB3C  0E25               	movlw	37
  5600  00FB3E  1826               	xorwf	printf@c,w,c
  5601  00FB40  B4D8               	btfsc	status,2,c
  5602  00FB42  D004               	goto	l2727
  5603                           
  5604                           ;doprnt.c: 540: {
  5605                           ;doprnt.c: 541: (putch(c) );
  5606  00FB44  5026               	movf	printf@c,w,c
  5607  00FB46  ECF5  F070         	call	_putch
  5608                           
  5609                           ;doprnt.c: 542: continue;
  5610  00FB4A  D1A3               	goto	l2869
  5611  00FB4C                     l2727:
  5612                           
  5613                           ;doprnt.c: 543: }
  5614                           ;doprnt.c: 546: width = 0;
  5615  00FB4C  0E00               	movlw	0
  5616  00FB4E  6E25               	movwf	printf@width+1,c
  5617  00FB50  0E00               	movlw	0
  5618  00FB52  6E24               	movwf	printf@width,c
  5619                           
  5620                           ;doprnt.c: 548: flag = 0;
  5621  00FB54  0E00               	movlw	0
  5622  00FB56  6E23               	movwf	printf@flag,c
  5623                           
  5624                           ;doprnt.c: 551: switch(*f) {
  5625                           
  5626                           ;doprnt.c: 550: for(;;) {
  5627  00FB58  D003               	goto	l2733
  5628  00FB5A                     l2729:
  5629                           
  5630                           ;doprnt.c: 580: flag |= 0x04;
  5631  00FB5A  8423               	bsf	printf@flag,2,c
  5632                           
  5633                           ;doprnt.c: 581: f++;
  5634  00FB5C  4A0D               	infsnz	printf@f,f,c
  5635  00FB5E  2A0E               	incf	printf@f+1,f,c
  5636  00FB60                     l2733:
  5637  00FB60  C00D  FFF6         	movff	printf@f,tblptrl
  5638  00FB64  C00E  FFF7         	movff	printf@f+1,tblptrh
  5639  00FB68                     	if	0	;tblptru may be non-zero
  5640  00FB68                     	endif
  5641  00FB68                     	if	0	;tblptru may be non-zero
  5642  00FB68                     	endif
  5643  00FB68  0008               	tblrd		*
  5644  00FB6A  50F5               	movf	tablat,w,c
  5645                           
  5646                           ; Switch size 1, requested type "space"
  5647                           ; Number of cases is 1, Range of values is 48 to 48
  5648                           ; switch strategies available:
  5649                           ; Name         Instructions Cycles
  5650                           ; simple_byte            4     3 (average)
  5651                           ;	Chosen strategy is simple_byte
  5652  00FB6C  0A30               	xorlw	48	; case 48
  5653  00FB6E  B4D8               	btfsc	status,2,c
  5654  00FB70  D7F4               	goto	l2729
  5655                           
  5656                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5657                           
  5658                           ;doprnt.c: 586: }
  5659                           
  5660                           ;doprnt.c: 585: break;
  5661  00FB72  C00D  FFF6         	movff	printf@f,tblptrl
  5662  00FB76  C00E  FFF7         	movff	printf@f+1,tblptrh
  5663  00FB7A                     	if	0	;tblptru may be non-zero
  5664  00FB7A                     	endif
  5665  00FB7A                     	if	0	;tblptru may be non-zero
  5666  00FB7A                     	endif
  5667  00FB7A  0008               	tblrd		*
  5668  00FB7C  50F5               	movf	tablat,w,c
  5669  00FB7E  EC0B  F071         	call	_isdigit
  5670  00FB82  A0D8               	btfss	status,0,c
  5671  00FB84  D06C               	goto	l2771
  5672                           
  5673                           ;doprnt.c: 598: width = 0;
  5674  00FB86  0E00               	movlw	0
  5675  00FB88  6E25               	movwf	printf@width+1,c
  5676  00FB8A  0E00               	movlw	0
  5677  00FB8C  6E24               	movwf	printf@width,c
  5678  00FB8E                     l2739:
  5679                           
  5680                           ;doprnt.c: 600: width *= 10;
  5681  00FB8E  C024  F001         	movff	printf@width,___wmul@multiplier
  5682  00FB92  C025  F002         	movff	printf@width+1,___wmul@multiplier+1
  5683  00FB96  0E00               	movlw	0
  5684  00FB98  6E04               	movwf	___wmul@multiplicand+1,c
  5685  00FB9A  0E0A               	movlw	10
  5686  00FB9C  6E03               	movwf	___wmul@multiplicand,c
  5687  00FB9E  EC2C  F071         	call	___wmul	;wreg free
  5688  00FBA2  C001  F024         	movff	?___wmul,printf@width
  5689  00FBA6  C002  F025         	movff	?___wmul+1,printf@width+1
  5690                           
  5691                           ;doprnt.c: 601: width += *f++ - '0';
  5692  00FBAA  0ED0               	movlw	208
  5693  00FBAC  6E15               	movwf	??_printf& (0+255),c
  5694  00FBAE  0EFF               	movlw	255
  5695  00FBB0  6E16               	movwf	(??_printf+1)& (0+255),c
  5696  00FBB2  C00D  FFF6         	movff	printf@f,tblptrl
  5697  00FBB6  C00E  FFF7         	movff	printf@f+1,tblptrh
  5698  00FBBA                     	if	0	;tblptru may be non-zero
  5699  00FBBA                     	endif
  5700  00FBBA                     	if	0	;tblptru may be non-zero
  5701  00FBBA                     	endif
  5702  00FBBA  0008               	tblrd		*
  5703  00FBBC  50F5               	movf	tablat,w,c
  5704  00FBBE  6E17               	movwf	(??_printf+2)& (0+255),c
  5705  00FBC0  6A18               	clrf	(??_printf+3)& (0+255),c
  5706  00FBC2  5015               	movf	??_printf,w,c
  5707  00FBC4  2617               	addwf	??_printf+2,f,c
  5708  00FBC6  5016               	movf	??_printf+1,w,c
  5709  00FBC8  2218               	addwfc	??_printf+3,f,c
  5710  00FBCA  5017               	movf	??_printf+2,w,c
  5711  00FBCC  2624               	addwf	printf@width,f,c
  5712  00FBCE  5018               	movf	??_printf+3,w,c
  5713  00FBD0  2225               	addwfc	printf@width+1,f,c
  5714  00FBD2  4A0D               	infsnz	printf@f,f,c
  5715  00FBD4  2A0E               	incf	printf@f+1,f,c
  5716                           
  5717                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5718  00FBD6  C00D  FFF6         	movff	printf@f,tblptrl
  5719  00FBDA  C00E  FFF7         	movff	printf@f+1,tblptrh
  5720  00FBDE                     	if	0	;tblptru may be non-zero
  5721  00FBDE                     	endif
  5722  00FBDE                     	if	0	;tblptru may be non-zero
  5723  00FBDE                     	endif
  5724  00FBDE  0008               	tblrd		*
  5725  00FBE0  50F5               	movf	tablat,w,c
  5726  00FBE2  EC0B  F071         	call	_isdigit
  5727  00FBE6  A0D8               	btfss	status,0,c
  5728  00FBE8  D03A               	goto	l2771
  5729  00FBEA  D7D1               	goto	l2739
  5730  00FBEC                     l2747:
  5731                           
  5732                           ;doprnt.c: 721: flag |= 0x80;
  5733  00FBEC  8E23               	bsf	printf@flag,7,c
  5734                           
  5735                           ;doprnt.c: 723: break;
  5736  00FBEE  D04E               	goto	l267
  5737  00FBF0                     l2749:
  5738                           
  5739                           ;doprnt.c: 757: if(width > len)
  5740  00FBF0  5024               	movf	printf@width,w,c
  5741  00FBF2  5C1E               	subwf	printf@len,w,c
  5742  00FBF4  5025               	movf	printf@width+1,w,c
  5743  00FBF6  581F               	subwfb	printf@len+1,w,c
  5744  00FBF8  B0D8               	btfsc	status,0,c
  5745  00FBFA  D005               	goto	l2753
  5746                           
  5747                           ;doprnt.c: 758: width -= len;
  5748  00FBFC  501E               	movf	printf@len,w,c
  5749  00FBFE  5E24               	subwf	printf@width,f,c
  5750  00FC00  501F               	movf	printf@len+1,w,c
  5751  00FC02  5A25               	subwfb	printf@width+1,f,c
  5752  00FC04  D008               	goto	l2757
  5753  00FC06                     l2753:
  5754                           
  5755                           ;doprnt.c: 759: else
  5756                           ;doprnt.c: 760: width = 0;
  5757  00FC06  0E00               	movlw	0
  5758  00FC08  6E25               	movwf	printf@width+1,c
  5759  00FC0A  0E00               	movlw	0
  5760  00FC0C  6E24               	movwf	printf@width,c
  5761                           
  5762                           ;doprnt.c: 764: while(width--)
  5763  00FC0E  D003               	goto	l2757
  5764  00FC10                     l2755:
  5765                           
  5766                           ;doprnt.c: 765: (putch(' ') );
  5767  00FC10  0E20               	movlw	32
  5768  00FC12  ECF5  F070         	call	_putch
  5769  00FC16                     l2757:
  5770  00FC16  0624               	decf	printf@width,f,c
  5771  00FC18  A0D8               	btfss	status,0,c
  5772  00FC1A  0625               	decf	printf@width+1,f,c
  5773  00FC1C  2824               	incf	printf@width,w,c
  5774  00FC1E  E1F8               	bnz	l2755
  5775  00FC20  2825               	incf	printf@width+1,w,c
  5776  00FC22  B4D8               	btfsc	status,2,c
  5777  00FC24  D00A               	goto	l2763
  5778  00FC26  D7F4               	goto	l2755
  5779  00FC28                     l2759:
  5780                           
  5781                           ;doprnt.c: 768: (putch(*cp++) );
  5782  00FC28  C019  FFD9         	movff	printf@cp,fsr2l
  5783  00FC2C  C01A  FFDA         	movff	printf@cp+1,fsr2h
  5784  00FC30  50DF               	movf	indf2,w,c
  5785  00FC32  ECF5  F070         	call	_putch
  5786  00FC36  4A19               	infsnz	printf@cp,f,c
  5787  00FC38  2A1A               	incf	printf@cp+1,f,c
  5788  00FC3A                     l2763:
  5789  00FC3A  061E               	decf	printf@len,f,c
  5790  00FC3C  A0D8               	btfss	status,0,c
  5791  00FC3E  061F               	decf	printf@len+1,f,c
  5792  00FC40  281E               	incf	printf@len,w,c
  5793  00FC42  E1F2               	bnz	l2759
  5794  00FC44  281F               	incf	printf@len+1,w,c
  5795  00FC46  B4D8               	btfsc	status,2,c
  5796  00FC48  D124               	goto	l2869
  5797  00FC4A  D7EE               	goto	l2759
  5798  00FC4C                     l2765:
  5799                           
  5800                           ;doprnt.c: 805: cp = (char *)&c;
  5801  00FC4C  0E26               	movlw	low printf@c
  5802  00FC4E  6E19               	movwf	printf@cp,c
  5803  00FC50  0E00               	movlw	high printf@c
  5804  00FC52  6E1A               	movwf	printf@cp+1,c
  5805                           
  5806                           ;doprnt.c: 806: len = 1;
  5807  00FC54  0E00               	movlw	0
  5808  00FC56  6E1F               	movwf	printf@len+1,c
  5809  00FC58  0E01               	movlw	1
  5810  00FC5A  6E1E               	movwf	printf@len,c
  5811                           
  5812                           ;doprnt.c: 807: goto dostring;
  5813  00FC5C  D7C9               	goto	l2749
  5814  00FC5E                     l2771:
  5815  00FC5E  C00D  FFF6         	movff	printf@f,tblptrl
  5816  00FC62  C00E  FFF7         	movff	printf@f+1,tblptrh
  5817  00FC66  4A0D               	infsnz	printf@f,f,c
  5818  00FC68  2A0E               	incf	printf@f+1,f,c
  5819  00FC6A                     	if	0	;tblptru may be non-zero
  5820  00FC6A                     	endif
  5821  00FC6A                     	if	0	;tblptru may be non-zero
  5822  00FC6A                     	endif
  5823  00FC6A  0008               	tblrd		*
  5824  00FC6C  CFF5 F026          	movff	tablat,printf@c
  5825  00FC70  5026               	movf	printf@c,w,c
  5826                           
  5827                           ; Switch size 1, requested type "space"
  5828                           ; Number of cases is 4, Range of values is 0 to 120
  5829                           ; switch strategies available:
  5830                           ; Name         Instructions Cycles
  5831                           ; simple_byte           13     7 (average)
  5832                           ;	Chosen strategy is simple_byte
  5833  00FC72  0A00               	xorlw	0	; case 0
  5834  00FC74  B4D8               	btfsc	status,2,c
  5835  00FC76  0012               	return	
  5836  00FC78  0A64               	xorlw	100	; case 100
  5837  00FC7A  B4D8               	btfsc	status,2,c
  5838  00FC7C  D007               	goto	l267
  5839  00FC7E  0A0D               	xorlw	13	; case 105
  5840  00FC80  B4D8               	btfsc	status,2,c
  5841  00FC82  D004               	goto	l267
  5842  00FC84  0A11               	xorlw	17	; case 120
  5843  00FC86  B4D8               	btfsc	status,2,c
  5844  00FC88  D7B1               	goto	l2747
  5845  00FC8A  D7E0               	goto	l2765
  5846  00FC8C                     l267:
  5847                           
  5848                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5849  00FC8C  BE23               	btfsc	printf@flag,7,c
  5850  00FC8E  D015               	goto	l2783
  5851                           
  5852                           ;doprnt.c: 1253: {
  5853                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5854  00FC90  C01C  FFD9         	movff	printf@ap,fsr2l
  5855  00FC94  C01D  FFDA         	movff	printf@ap+1,fsr2h
  5856  00FC98  CFDE F021          	movff	postinc2,printf@val
  5857  00FC9C  CFDD F022          	movff	postdec2,printf@val+1
  5858  00FCA0  0E02               	movlw	2
  5859  00FCA2  261C               	addwf	printf@ap,f,c
  5860  00FCA4  0E00               	movlw	0
  5861  00FCA6  221D               	addwfc	printf@ap+1,f,c
  5862                           
  5863                           ;doprnt.c: 1261: if((int)val < 0) {
  5864  00FCA8  AE22               	btfss	printf@val+1,7,c
  5865  00FCAA  D044               	goto	l2817
  5866                           
  5867                           ;doprnt.c: 1262: flag |= 0x03;
  5868  00FCAC  0E03               	movlw	3
  5869  00FCAE  1223               	iorwf	printf@flag,f,c
  5870                           
  5871                           ;doprnt.c: 1263: val = -val;
  5872  00FCB0  6C21               	negf	printf@val,c
  5873  00FCB2  1E22               	comf	printf@val+1,f,c
  5874  00FCB4  B0D8               	btfsc	status,0,c
  5875  00FCB6  2A22               	incf	printf@val+1,f,c
  5876                           
  5877                           ;doprnt.c: 1264: }
  5878                           ;doprnt.c: 1266: }
  5879  00FCB8  D03D               	goto	l2817
  5880  00FCBA                     l2783:
  5881                           
  5882                           ;doprnt.c: 1268: else
  5883                           ;doprnt.c: 1273: {
  5884                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5885  00FCBA  C01C  FFD9         	movff	printf@ap,fsr2l
  5886  00FCBE  C01D  FFDA         	movff	printf@ap+1,fsr2h
  5887  00FCC2  CFDE F021          	movff	postinc2,printf@val
  5888  00FCC6  CFDD F022          	movff	postdec2,printf@val+1
  5889  00FCCA  0E02               	movlw	2
  5890  00FCCC  261C               	addwf	printf@ap,f,c
  5891  00FCCE  0E00               	movlw	0
  5892  00FCD0  221D               	addwfc	printf@ap+1,f,c
  5893                           
  5894                           ;doprnt.c: 1287: }
  5895                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5896  00FCD2  D030               	goto	l2817
  5897  00FCD4                     l2787:
  5898                           
  5899                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5900  00FCD4  0E01               	movlw	1
  5901  00FCD6  6E26               	movwf	printf@c,c
  5902  00FCD8                     l2789:
  5903  00FCD8  0E05               	movlw	5
  5904  00FCDA  1826               	xorwf	printf@c,w,c
  5905  00FCDC  B4D8               	btfsc	status,2,c
  5906  00FCDE  D032               	goto	l2819
  5907                           
  5908                           ;doprnt.c: 1306: if(val < dpowers[c])
  5909  00FCE0  5026               	movf	printf@c,w,c
  5910  00FCE2  0D02               	mullw	2
  5911  00FCE4  0EBE               	movlw	low _dpowers
  5912  00FCE6  24F3               	addwf	prodl,w,c
  5913  00FCE8  6EF6               	movwf	tblptrl,c
  5914  00FCEA  0EFE               	movlw	high _dpowers
  5915  00FCEC  20F4               	addwfc	prodh,w,c
  5916  00FCEE  6EF7               	movwf	tblptrh,c
  5917  00FCF0                     	if	0	;There are less than 3 active tblptr bytes
  5918  00FCF0                     	endif
  5919  00FCF0  0009               	tblrd		*+
  5920  00FCF2  50F5               	movf	tablat,w,c
  5921  00FCF4  5C21               	subwf	printf@val,w,c
  5922  00FCF6  0009               	tblrd		*+
  5923  00FCF8  50F5               	movf	tablat,w,c
  5924  00FCFA  5822               	subwfb	printf@val+1,w,c
  5925  00FCFC  A0D8               	btfss	status,0,c
  5926  00FCFE  D022               	goto	l2819
  5927                           
  5928                           ;doprnt.c: 1307: break;
  5929  00FD00  2A26               	incf	printf@c,f,c
  5930  00FD02  D7EA               	goto	l2789
  5931  00FD04                     l2801:
  5932                           
  5933                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5934  00FD04  0E01               	movlw	1
  5935  00FD06  6E26               	movwf	printf@c,c
  5936  00FD08                     l2803:
  5937  00FD08  0E04               	movlw	4
  5938  00FD0A  1826               	xorwf	printf@c,w,c
  5939  00FD0C  B4D8               	btfsc	status,2,c
  5940  00FD0E  D01A               	goto	l2819
  5941                           
  5942                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5943  00FD10  5026               	movf	printf@c,w,c
  5944  00FD12  0D02               	mullw	2
  5945  00FD14  0EC8               	movlw	low _hexpowers
  5946  00FD16  24F3               	addwf	prodl,w,c
  5947  00FD18  6EF6               	movwf	tblptrl,c
  5948  00FD1A  0EFE               	movlw	high _hexpowers
  5949  00FD1C  20F4               	addwfc	prodh,w,c
  5950  00FD1E  6EF7               	movwf	tblptrh,c
  5951  00FD20                     	if	0	;There are less than 3 active tblptr bytes
  5952  00FD20                     	endif
  5953  00FD20  0009               	tblrd		*+
  5954  00FD22  50F5               	movf	tablat,w,c
  5955  00FD24  5C21               	subwf	printf@val,w,c
  5956  00FD26  0009               	tblrd		*+
  5957  00FD28  50F5               	movf	tablat,w,c
  5958  00FD2A  5822               	subwfb	printf@val+1,w,c
  5959  00FD2C  A0D8               	btfss	status,0,c
  5960  00FD2E  D00A               	goto	l2819
  5961                           
  5962                           ;doprnt.c: 1318: break;
  5963  00FD30  2A26               	incf	printf@c,f,c
  5964  00FD32  D7EA               	goto	l2803
  5965  00FD34                     l2817:
  5966  00FD34  5023               	movf	printf@flag,w,c
  5967  00FD36  0B80               	andlw	128
  5968                           
  5969                           ; Switch size 1, requested type "space"
  5970                           ; Number of cases is 2, Range of values is 0 to 128
  5971                           ; switch strategies available:
  5972                           ; Name         Instructions Cycles
  5973                           ; simple_byte            7     4 (average)
  5974                           ;	Chosen strategy is simple_byte
  5975  00FD38  0A00               	xorlw	0	; case 0
  5976  00FD3A  B4D8               	btfsc	status,2,c
  5977  00FD3C  D7CB               	goto	l2787
  5978  00FD3E  0A80               	xorlw	128	; case 128
  5979  00FD40  B4D8               	btfsc	status,2,c
  5980  00FD42  D7E0               	goto	l2801
  5981  00FD44                     l2819:
  5982                           
  5983                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5984  00FD44  5024               	movf	printf@width,w,c
  5985  00FD46  1025               	iorwf	printf@width+1,w,c
  5986  00FD48  B4D8               	btfsc	status,2,c
  5987  00FD4A  D009               	goto	l2825
  5988  00FD4C  C023  F015         	movff	printf@flag,??_printf
  5989  00FD50  0E03               	movlw	3
  5990  00FD52  1615               	andwf	??_printf,f,c
  5991  00FD54  B4D8               	btfsc	status,2,c
  5992  00FD56  D003               	goto	l2825
  5993                           
  5994                           ;doprnt.c: 1346: width--;
  5995  00FD58  0624               	decf	printf@width,f,c
  5996  00FD5A  A0D8               	btfss	status,0,c
  5997  00FD5C  0625               	decf	printf@width+1,f,c
  5998  00FD5E                     l2825:
  5999                           
  6000                           ;doprnt.c: 1381: if(width > c)
  6001  00FD5E  0E80               	movlw	128
  6002  00FD60  BE26               	btfsc	printf@c,7,c
  6003  00FD62  0E7F               	movlw	127
  6004  00FD64  6E15               	movwf	??_printf& (0+255),c
  6005  00FD66  5024               	movf	printf@width,w,c
  6006  00FD68  5C26               	subwf	printf@c,w,c
  6007  00FD6A  5025               	movf	printf@width+1,w,c
  6008  00FD6C  0A80               	xorlw	128
  6009  00FD6E  5815               	subwfb	??_printf& (0+255),w,c
  6010  00FD70  B0D8               	btfsc	status,0,c
  6011  00FD72  D007               	goto	l2829
  6012                           
  6013                           ;doprnt.c: 1382: width -= c;
  6014  00FD74  5026               	movf	printf@c,w,c
  6015  00FD76  5E24               	subwf	printf@width,f,c
  6016  00FD78  0E00               	movlw	0
  6017  00FD7A  BE26               	btfsc	printf@c,7,c
  6018  00FD7C  0EFF               	movlw	255
  6019  00FD7E  5A25               	subwfb	printf@width+1,f,c
  6020  00FD80  D004               	goto	l2831
  6021  00FD82                     l2829:
  6022                           
  6023                           ;doprnt.c: 1383: else
  6024                           ;doprnt.c: 1384: width = 0;
  6025  00FD82  0E00               	movlw	0
  6026  00FD84  6E25               	movwf	printf@width+1,c
  6027  00FD86  0E00               	movlw	0
  6028  00FD88  6E24               	movwf	printf@width,c
  6029  00FD8A                     l2831:
  6030                           
  6031                           ;doprnt.c: 1387: if(flag & 0x04) {
  6032  00FD8A  A423               	btfss	printf@flag,2,c
  6033  00FD8C  D014               	goto	l2843
  6034                           
  6035                           ;doprnt.c: 1392: if(flag & 0x03)
  6036  00FD8E  C023  F015         	movff	printf@flag,??_printf
  6037  00FD92  0E03               	movlw	3
  6038  00FD94  1615               	andwf	??_printf,f,c
  6039  00FD96  B4D8               	btfsc	status,2,c
  6040  00FD98  D003               	goto	l2837
  6041                           
  6042                           ;doprnt.c: 1393: (putch('-') );
  6043  00FD9A  0E2D               	movlw	45
  6044  00FD9C  ECF5  F070         	call	_putch
  6045  00FDA0                     l2837:
  6046                           
  6047                           ;doprnt.c: 1415: if(width)
  6048  00FDA0  5024               	movf	printf@width,w,c
  6049  00FDA2  1025               	iorwf	printf@width+1,w,c
  6050  00FDA4  B4D8               	btfsc	status,2,c
  6051  00FDA6  D01E               	goto	l2853
  6052                           
  6053                           ;doprnt.c: 1417: (putch('0') );
  6054                           
  6055                           ;doprnt.c: 1416: do
  6056  00FDA8  0E30               	movlw	48
  6057  00FDAA  ECF5  F070         	call	_putch
  6058                           
  6059                           ;doprnt.c: 1418: while(--width);
  6060  00FDAE  0624               	decf	printf@width,f,c
  6061  00FDB0  A0D8               	btfss	status,0,c
  6062  00FDB2  0625               	decf	printf@width+1,f,c
  6063  00FDB4  D7F5               	goto	l2837
  6064  00FDB6                     l2843:
  6065                           
  6066                           ;doprnt.c: 1422: {
  6067                           ;doprnt.c: 1424: if(width
  6068                           ;doprnt.c: 1428: )
  6069  00FDB6  5024               	movf	printf@width,w,c
  6070  00FDB8  1025               	iorwf	printf@width+1,w,c
  6071  00FDBA  B4D8               	btfsc	status,2,c
  6072  00FDBC  D00A               	goto	l2849
  6073  00FDBE                     l2845:
  6074                           
  6075                           ;doprnt.c: 1430: (putch(' ') );
  6076  00FDBE  0E20               	movlw	32
  6077  00FDC0  ECF5  F070         	call	_putch
  6078                           
  6079                           ;doprnt.c: 1431: while(--width);
  6080  00FDC4  0624               	decf	printf@width,f,c
  6081  00FDC6  A0D8               	btfss	status,0,c
  6082  00FDC8  0625               	decf	printf@width+1,f,c
  6083  00FDCA  5024               	movf	printf@width,w,c
  6084  00FDCC  1025               	iorwf	printf@width+1,w,c
  6085  00FDCE  A4D8               	btfss	status,2,c
  6086  00FDD0  D7F6               	goto	l2845
  6087  00FDD2                     l2849:
  6088                           
  6089                           ;doprnt.c: 1438: if(flag & 0x03)
  6090  00FDD2  C023  F015         	movff	printf@flag,??_printf
  6091  00FDD6  0E03               	movlw	3
  6092  00FDD8  1615               	andwf	??_printf,f,c
  6093  00FDDA  B4D8               	btfsc	status,2,c
  6094  00FDDC  D003               	goto	l2853
  6095                           
  6096                           ;doprnt.c: 1439: (putch('-') );
  6097  00FDDE  0E2D               	movlw	45
  6098  00FDE0  ECF5  F070         	call	_putch
  6099  00FDE4                     l2853:
  6100                           
  6101                           ;doprnt.c: 1469: }
  6102                           ;doprnt.c: 1472: prec = c;
  6103  00FDE4  C026  F020         	movff	printf@c,printf@prec
  6104                           
  6105                           ;doprnt.c: 1474: while(prec--) {
  6106  00FDE8  D050               	goto	l2867
  6107  00FDEA                     l2855:
  6108                           
  6109                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6110  00FDEA  5020               	movf	printf@prec,w,c
  6111  00FDEC  0D02               	mullw	2
  6112  00FDEE  0EBE               	movlw	low _dpowers
  6113  00FDF0  24F3               	addwf	prodl,w,c
  6114  00FDF2  6EF6               	movwf	tblptrl,c
  6115  00FDF4  0EFE               	movlw	high _dpowers
  6116  00FDF6  20F4               	addwfc	prodh,w,c
  6117  00FDF8  6EF7               	movwf	tblptrh,c
  6118  00FDFA                     	if	0	;There are less than 3 active tblptr bytes
  6119  00FDFA                     	endif
  6120  00FDFA  0009               	tblrd		*+
  6121  00FDFC  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6122  00FE00  000A               	tblrd		*-
  6123  00FE02  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6124  00FE06  C021  F001         	movff	printf@val,___lwdiv@dividend
  6125  00FE0A  C022  F002         	movff	printf@val+1,___lwdiv@dividend+1
  6126  00FE0E  EC31  F072         	call	___lwdiv	;wreg free
  6127  00FE12  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6128  00FE16  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6129  00FE1A  0E00               	movlw	0
  6130  00FE1C  6E0B               	movwf	___lwmod@divisor+1,c
  6131  00FE1E  0E0A               	movlw	10
  6132  00FE20  6E0A               	movwf	___lwmod@divisor,c
  6133  00FE22  ECA1  F071         	call	___lwmod	;wreg free
  6134  00FE26  5008               	movf	?___lwmod,w,c
  6135  00FE28  0F30               	addlw	48
  6136  00FE2A  6E26               	movwf	printf@c,c
  6137                           
  6138                           ;doprnt.c: 1491: break;
  6139  00FE2C  D02B               	goto	l2865
  6140  00FE2E                     l2857:
  6141                           
  6142                           ;doprnt.c: 1499: {
  6143                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6144  00FE2E  C021  F001         	movff	printf@val,___lwdiv@dividend
  6145  00FE32  C022  F002         	movff	printf@val+1,___lwdiv@dividend+1
  6146  00FE36  5020               	movf	printf@prec,w,c
  6147  00FE38  0D02               	mullw	2
  6148  00FE3A  0EC8               	movlw	low _hexpowers
  6149  00FE3C  24F3               	addwf	prodl,w,c
  6150  00FE3E  6EF6               	movwf	tblptrl,c
  6151  00FE40  0EFE               	movlw	high _hexpowers
  6152  00FE42  20F4               	addwfc	prodh,w,c
  6153  00FE44  6EF7               	movwf	tblptrh,c
  6154  00FE46                     	if	0	;There are less than 3 active tblptr bytes
  6155  00FE46                     	endif
  6156  00FE46  0009               	tblrd		*+
  6157  00FE48  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6158  00FE4C  000A               	tblrd		*-
  6159  00FE4E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6160  00FE52  EC31  F072         	call	___lwdiv	;wreg free
  6161  00FE56  5001               	movf	?___lwdiv,w,c
  6162  00FE58  0B0F               	andlw	15
  6163  00FE5A  6E1B               	movwf	printf@idx,c
  6164                           
  6165                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6166  00FE5C  501B               	movf	printf@idx,w,c
  6167  00FE5E  0D01               	mullw	1
  6168  00FE60  0E3C               	movlw	low STR_15
  6169  00FE62  24F3               	addwf	prodl,w,c
  6170  00FE64  6EF6               	movwf	tblptrl,c
  6171  00FE66  0EFF               	movlw	high STR_15
  6172  00FE68  20F4               	addwfc	prodh,w,c
  6173  00FE6A  6EF7               	movwf	tblptrh,c
  6174  00FE6C                     	if	0	;There are less than 3 active tblptr bytes
  6175  00FE6C                     	endif
  6176  00FE6C  0008               	tblrd		*
  6177  00FE6E  CFF5 F026          	movff	tablat,printf@c
  6178                           
  6179                           ;doprnt.c: 1523: }
  6180                           
  6181                           ;doprnt.c: 1508: }
  6182                           ;doprnt.c: 1510: break;
  6183  00FE72  D008               	goto	l2865
  6184  00FE74                     l2863:
  6185  00FE74  5023               	movf	printf@flag,w,c
  6186  00FE76  0B80               	andlw	128
  6187                           
  6188                           ; Switch size 1, requested type "space"
  6189                           ; Number of cases is 2, Range of values is 0 to 128
  6190                           ; switch strategies available:
  6191                           ; Name         Instructions Cycles
  6192                           ; simple_byte            7     4 (average)
  6193                           ;	Chosen strategy is simple_byte
  6194  00FE78  0A00               	xorlw	0	; case 0
  6195  00FE7A  B4D8               	btfsc	status,2,c
  6196  00FE7C  D7B6               	goto	l2855
  6197  00FE7E  0A80               	xorlw	128	; case 128
  6198  00FE80  B4D8               	btfsc	status,2,c
  6199  00FE82  D7D5               	goto	l2857
  6200  00FE84                     l2865:
  6201                           
  6202                           ;doprnt.c: 1524: (putch(c) );
  6203  00FE84  5026               	movf	printf@c,w,c
  6204  00FE86  ECF5  F070         	call	_putch
  6205  00FE8A                     l2867:
  6206  00FE8A  0620               	decf	printf@prec,f,c
  6207  00FE8C  2820               	incf	printf@prec,w,c
  6208  00FE8E  A4D8               	btfss	status,2,c
  6209  00FE90  D7F1               	goto	l2863
  6210  00FE92                     l2869:
  6211  00FE92  C00D  FFF6         	movff	printf@f,tblptrl
  6212  00FE96  C00E  FFF7         	movff	printf@f+1,tblptrh
  6213  00FE9A  4A0D               	infsnz	printf@f,f,c
  6214  00FE9C  2A0E               	incf	printf@f+1,f,c
  6215  00FE9E                     	if	0	;tblptru may be non-zero
  6216  00FE9E                     	endif
  6217  00FE9E                     	if	0	;tblptru may be non-zero
  6218  00FE9E                     	endif
  6219  00FE9E  0008               	tblrd		*
  6220  00FEA0  CFF5 F026          	movff	tablat,printf@c
  6221  00FEA4  5026               	movf	printf@c,w,c
  6222  00FEA6  B4D8               	btfsc	status,2,c
  6223  00FEA8  0012               	return	
  6224  00FEAA  D648               	goto	l2723
  6225  00FEAC                     __end_of_printf:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           intcon2	equ	0xFF1
  6234                           wreg	equ	0xFE8
  6235                           indf2	equ	0xFDF
  6236                           postinc2	equ	0xFDE
  6237                           postdec2	equ	0xFDD
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _putch *****************
  6243 ;; Defined at:
  6244 ;;		line 31 in file "lcd.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  data            1    wreg     unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  data            1    2[COMRAM] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0, cstack
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;Total ram usage:        1 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    1
  6265 ;; This function calls:
  6266 ;;		_lcdNibble
  6267 ;; This function is called by:
  6268 ;;		_printf
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text31
  6273  00E1EA                     __ptext31:
  6274                           	opt stack 0
  6275  00E1EA                     _putch:
  6276                           	opt stack 27
  6277                           
  6278                           ;incstack = 0
  6279                           ;putch@data stored from wreg
  6280  00E1EA  6E03               	movwf	putch@data,c
  6281                           
  6282                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  6283  00E1EC  848C               	bsf	3980,2,c	;volatile
  6284                           
  6285                           ;lcd.c: 33: lcdNibble(data);
  6286  00E1EE  5003               	movf	putch@data,w,c
  6287  00E1F0  EC0A  F072         	call	_lcdNibble
  6288  00E1F4  0012               	return		;funcret
  6289  00E1F6                     __end_of_putch:
  6290                           	opt stack 0
  6291                           tblptru	equ	0xFF8
  6292                           tblptrh	equ	0xFF7
  6293                           tblptrl	equ	0xFF6
  6294                           tablat	equ	0xFF5
  6295                           prodh	equ	0xFF4
  6296                           prodl	equ	0xFF3
  6297                           intcon2	equ	0xFF1
  6298                           wreg	equ	0xFE8
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           
  6306 ;; *************** function _isdigit *****************
  6307 ;; Defined at:
  6308 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  c               1    wreg     unsigned char 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;  c               1    2[COMRAM] unsigned char 
  6313 ;; Return value:  Size  Location     Type
  6314 ;;		None               void
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6325 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6326 ;;Total ram usage:        3 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; This function calls:
  6329 ;;		Nothing
  6330 ;; This function is called by:
  6331 ;;		_printf
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text32
  6336  00E216                     __ptext32:
  6337                           	opt stack 0
  6338  00E216                     _isdigit:
  6339                           	opt stack 28
  6340                           
  6341                           ;incstack = 0
  6342                           ;isdigit@c stored from wreg
  6343  00E216  6E03               	movwf	isdigit@c,c
  6344  00E218  0E00               	movlw	0
  6345  00E21A  6E02               	movwf	_isdigit$597,c
  6346  00E21C  0E3A               	movlw	58
  6347  00E21E  6003               	cpfslt	isdigit@c,c
  6348  00E220  D005               	goto	l2599
  6349  00E222  0E2F               	movlw	47
  6350  00E224  6403               	cpfsgt	isdigit@c,c
  6351  00E226  D002               	goto	l2599
  6352  00E228  0E01               	movlw	1
  6353  00E22A  6E02               	movwf	_isdigit$597,c
  6354  00E22C                     l2599:
  6355  00E22C  C002  F001         	movff	_isdigit$597,??_isdigit
  6356  00E230  3001               	rrcf	??_isdigit,w,c
  6357  00E232  0012               	return	
  6358  00E234                     __end_of_isdigit:
  6359                           	opt stack 0
  6360                           tblptru	equ	0xFF8
  6361                           tblptrh	equ	0xFF7
  6362                           tblptrl	equ	0xFF6
  6363                           tablat	equ	0xFF5
  6364                           prodh	equ	0xFF4
  6365                           prodl	equ	0xFF3
  6366                           intcon2	equ	0xFF1
  6367                           wreg	equ	0xFE8
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function ___wmul *****************
  6376 ;; Defined at:
  6377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;  multiplier      2    0[COMRAM] unsigned int 
  6380 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  product         2    4[COMRAM] unsigned int 
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  2    0[COMRAM] unsigned int 
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0, prodl, prodh
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;Total ram usage:        6 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_time_difference
  6402 ;;		_printf
  6403 ;;		_eval_poly
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text33
  6408  00E258                     __ptext33:
  6409                           	opt stack 0
  6410  00E258                     ___wmul:
  6411                           	opt stack 25
  6412                           
  6413                           ;incstack = 0
  6414  00E258  5001               	movf	___wmul@multiplier,w,c
  6415  00E25A  0203               	mulwf	___wmul@multiplicand,c
  6416  00E25C  CFF3 F005          	movff	prodl,___wmul@product
  6417  00E260  CFF4 F006          	movff	prodh,___wmul@product+1
  6418  00E264  5001               	movf	___wmul@multiplier,w,c
  6419  00E266  0204               	mulwf	___wmul@multiplicand+1,c
  6420  00E268  50F3               	movf	prodl,w,c
  6421  00E26A  2606               	addwf	___wmul@product+1,f,c
  6422  00E26C  5002               	movf	___wmul@multiplier+1,w,c
  6423  00E26E  0203               	mulwf	___wmul@multiplicand,c
  6424  00E270  50F3               	movf	prodl,w,c
  6425  00E272  2606               	addwf	___wmul@product+1,f,c
  6426  00E274  C005  F001         	movff	___wmul@product,?___wmul
  6427  00E278  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6428  00E27C  0012               	return	
  6429  00E27E                     __end_of___wmul:
  6430                           	opt stack 0
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           intcon2	equ	0xFF1
  6438                           wreg	equ	0xFE8
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function ___lwmod *****************
  6447 ;; Defined at:
  6448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  dividend        2    7[COMRAM] unsigned int 
  6451 ;;  divisor         2    9[COMRAM] unsigned int 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  counter         1   11[COMRAM] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  2    7[COMRAM] unsigned int 
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;Total ram usage:        5 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_printf
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text34
  6477  00E342                     __ptext34:
  6478                           	opt stack 0
  6479  00E342                     ___lwmod:
  6480                           	opt stack 28
  6481                           
  6482                           ;incstack = 0
  6483  00E342  500A               	movf	___lwmod@divisor,w,c
  6484  00E344  100B               	iorwf	___lwmod@divisor+1,w,c
  6485  00E346  B4D8               	btfsc	status,2,c
  6486  00E348  D018               	goto	l731
  6487  00E34A  0E01               	movlw	1
  6488  00E34C  6E0C               	movwf	___lwmod@counter,c
  6489  00E34E  D004               	goto	l2641
  6490  00E350                     l2639:
  6491  00E350  90D8               	bcf	status,0,c
  6492  00E352  360A               	rlcf	___lwmod@divisor,f,c
  6493  00E354  360B               	rlcf	___lwmod@divisor+1,f,c
  6494  00E356  2A0C               	incf	___lwmod@counter,f,c
  6495  00E358                     l2641:
  6496  00E358  AE0B               	btfss	___lwmod@divisor+1,7,c
  6497  00E35A  D7FA               	goto	l2639
  6498  00E35C                     l2643:
  6499  00E35C  500A               	movf	___lwmod@divisor,w,c
  6500  00E35E  5C08               	subwf	___lwmod@dividend,w,c
  6501  00E360  500B               	movf	___lwmod@divisor+1,w,c
  6502  00E362  5809               	subwfb	___lwmod@dividend+1,w,c
  6503  00E364  A0D8               	btfss	status,0,c
  6504  00E366  D004               	goto	l2647
  6505  00E368  500A               	movf	___lwmod@divisor,w,c
  6506  00E36A  5E08               	subwf	___lwmod@dividend,f,c
  6507  00E36C  500B               	movf	___lwmod@divisor+1,w,c
  6508  00E36E  5A09               	subwfb	___lwmod@dividend+1,f,c
  6509  00E370                     l2647:
  6510  00E370  90D8               	bcf	status,0,c
  6511  00E372  320B               	rrcf	___lwmod@divisor+1,f,c
  6512  00E374  320A               	rrcf	___lwmod@divisor,f,c
  6513  00E376  2E0C               	decfsz	___lwmod@counter,f,c
  6514  00E378  D7F1               	goto	l2643
  6515  00E37A                     l731:
  6516  00E37A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6517  00E37E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6518  00E382  0012               	return		;funcret
  6519  00E384                     __end_of___lwmod:
  6520                           	opt stack 0
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon2	equ	0xFF1
  6528                           wreg	equ	0xFE8
  6529                           indf2	equ	0xFDF
  6530                           postinc2	equ	0xFDE
  6531                           postdec2	equ	0xFDD
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function ___lwdiv *****************
  6537 ;; Defined at:
  6538 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  dividend        2    0[COMRAM] unsigned int 
  6541 ;;  divisor         2    2[COMRAM] unsigned int 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;  quotient        2    4[COMRAM] unsigned int 
  6544 ;;  counter         1    6[COMRAM] unsigned char 
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  2    0[COMRAM] unsigned int 
  6547 ;; Registers used:
  6548 ;;		wreg, status,2, status,0
  6549 ;; Tracked objects:
  6550 ;;		On entry : 0/0
  6551 ;;		On exit  : 0/0
  6552 ;;		Unchanged: 0/0
  6553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6554 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;Total ram usage:        7 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; This function calls:
  6561 ;;		Nothing
  6562 ;; This function is called by:
  6563 ;;		_printf
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text35
  6568  00E462                     __ptext35:
  6569                           	opt stack 0
  6570  00E462                     ___lwdiv:
  6571                           	opt stack 28
  6572                           
  6573                           ;incstack = 0
  6574  00E462  0E00               	movlw	0
  6575  00E464  6E06               	movwf	___lwdiv@quotient+1,c
  6576  00E466  0E00               	movlw	0
  6577  00E468  6E05               	movwf	___lwdiv@quotient,c
  6578  00E46A  5003               	movf	___lwdiv@divisor,w,c
  6579  00E46C  1004               	iorwf	___lwdiv@divisor+1,w,c
  6580  00E46E  B4D8               	btfsc	status,2,c
  6581  00E470  D01C               	goto	l721
  6582  00E472  0E01               	movlw	1
  6583  00E474  6E07               	movwf	___lwdiv@counter,c
  6584  00E476  D004               	goto	l2621
  6585  00E478                     l2619:
  6586  00E478  90D8               	bcf	status,0,c
  6587  00E47A  3603               	rlcf	___lwdiv@divisor,f,c
  6588  00E47C  3604               	rlcf	___lwdiv@divisor+1,f,c
  6589  00E47E  2A07               	incf	___lwdiv@counter,f,c
  6590  00E480                     l2621:
  6591  00E480  AE04               	btfss	___lwdiv@divisor+1,7,c
  6592  00E482  D7FA               	goto	l2619
  6593  00E484                     l2623:
  6594  00E484  90D8               	bcf	status,0,c
  6595  00E486  3605               	rlcf	___lwdiv@quotient,f,c
  6596  00E488  3606               	rlcf	___lwdiv@quotient+1,f,c
  6597  00E48A  5003               	movf	___lwdiv@divisor,w,c
  6598  00E48C  5C01               	subwf	___lwdiv@dividend,w,c
  6599  00E48E  5004               	movf	___lwdiv@divisor+1,w,c
  6600  00E490  5802               	subwfb	___lwdiv@dividend+1,w,c
  6601  00E492  A0D8               	btfss	status,0,c
  6602  00E494  D005               	goto	l2631
  6603  00E496  5003               	movf	___lwdiv@divisor,w,c
  6604  00E498  5E01               	subwf	___lwdiv@dividend,f,c
  6605  00E49A  5004               	movf	___lwdiv@divisor+1,w,c
  6606  00E49C  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6607  00E49E  8005               	bsf	___lwdiv@quotient,0,c
  6608  00E4A0                     l2631:
  6609  00E4A0  90D8               	bcf	status,0,c
  6610  00E4A2  3204               	rrcf	___lwdiv@divisor+1,f,c
  6611  00E4A4  3203               	rrcf	___lwdiv@divisor,f,c
  6612  00E4A6  2E07               	decfsz	___lwdiv@counter,f,c
  6613  00E4A8  D7ED               	goto	l2623
  6614  00E4AA                     l721:
  6615  00E4AA  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6616  00E4AE  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6617  00E4B2  0012               	return		;funcret
  6618  00E4B4                     __end_of___lwdiv:
  6619                           	opt stack 0
  6620                           tblptru	equ	0xFF8
  6621                           tblptrh	equ	0xFF7
  6622                           tblptrl	equ	0xFF6
  6623                           tablat	equ	0xFF5
  6624                           prodh	equ	0xFF4
  6625                           prodl	equ	0xFF3
  6626                           intcon2	equ	0xFF1
  6627                           wreg	equ	0xFE8
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           fsr2h	equ	0xFDA
  6632                           fsr2l	equ	0xFD9
  6633                           status	equ	0xFD8
  6634                           
  6635 ;; *************** function _initLCD *****************
  6636 ;; Defined at:
  6637 ;;		line 14 in file "lcd.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;Total ram usage:        1 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    2
  6658 ;; This function calls:
  6659 ;;		_lcdInst
  6660 ;; This function is called by:
  6661 ;;		_main
  6662 ;;		_end_phase
  6663 ;;		_time_difference
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text36
  6668  00E3C8                     __ptext36:
  6669                           	opt stack 0
  6670  00E3C8                     _initLCD:
  6671                           	opt stack 27
  6672                           
  6673                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  6674                           
  6675                           ;incstack = 0
  6676  00E3C8  0E27               	movlw	39
  6677  00E3CA  6E04               	movwf	??_initLCD& (0+255),c
  6678  00E3CC  0EF5               	movlw	245
  6679  00E3CE                     u3377:
  6680  00E3CE  2EE8               	decfsz	wreg,f,c
  6681  00E3D0  D7FE               	bra	u3377
  6682  00E3D2  2E04               	decfsz	??_initLCD& (0+255),f,c
  6683  00E3D4  D7FC               	bra	u3377
  6684  00E3D6  F000               	nop	
  6685                           
  6686                           ;lcd.c: 16: lcdInst(0b00110011);
  6687  00E3D8  0E33               	movlw	51
  6688  00E3DA  ECEF  F070         	call	_lcdInst
  6689                           
  6690                           ;lcd.c: 17: lcdInst(0b00110011);
  6691  00E3DE  0E33               	movlw	51
  6692  00E3E0  ECEF  F070         	call	_lcdInst
  6693                           
  6694                           ;lcd.c: 18: lcdInst(0b00110010);
  6695  00E3E4  0E32               	movlw	50
  6696  00E3E6  ECEF  F070         	call	_lcdInst
  6697                           
  6698                           ;lcd.c: 19: lcdInst(0b00101000);
  6699  00E3EA  0E28               	movlw	40
  6700  00E3EC  ECEF  F070         	call	_lcdInst
  6701                           
  6702                           ;lcd.c: 20: lcdInst(0b00001111);
  6703  00E3F0  0E0F               	movlw	15
  6704  00E3F2  ECEF  F070         	call	_lcdInst
  6705                           
  6706                           ;lcd.c: 21: lcdInst(0b00000110);
  6707  00E3F6  0E06               	movlw	6
  6708  00E3F8  ECEF  F070         	call	_lcdInst
  6709                           
  6710                           ;lcd.c: 22: lcdInst(0b00000001);
  6711  00E3FC  0E01               	movlw	1
  6712  00E3FE  ECEF  F070         	call	_lcdInst
  6713                           
  6714                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
  6715  00E402  0E27               	movlw	39
  6716  00E404  6E04               	movwf	??_initLCD& (0+255),c
  6717  00E406  0EF5               	movlw	245
  6718  00E408                     u3387:
  6719  00E408  2EE8               	decfsz	wreg,f,c
  6720  00E40A  D7FE               	bra	u3387
  6721  00E40C  2E04               	decfsz	??_initLCD& (0+255),f,c
  6722  00E40E  D7FC               	bra	u3387
  6723  00E410  F000               	nop	
  6724  00E412  0012               	return		;funcret
  6725  00E414                     __end_of_initLCD:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           intcon2	equ	0xFF1
  6734                           wreg	equ	0xFE8
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _lcdInst *****************
  6743 ;; Defined at:
  6744 ;;		line 26 in file "lcd.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  data            1    wreg     unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  data            1    2[COMRAM] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:        1 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    1
  6765 ;; This function calls:
  6766 ;;		_lcdNibble
  6767 ;; This function is called by:
  6768 ;;		_main
  6769 ;;		_stand_by
  6770 ;;		_end_phase
  6771 ;;		_message
  6772 ;;		_time_difference
  6773 ;;		_initLCD
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text37
  6778  00E1DE                     __ptext37:
  6779                           	opt stack 0
  6780  00E1DE                     _lcdInst:
  6781                           	opt stack 28
  6782                           
  6783                           ;incstack = 0
  6784                           ;lcdInst@data stored from wreg
  6785  00E1DE  6E03               	movwf	lcdInst@data,c
  6786                           
  6787                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6788  00E1E0  948C               	bcf	3980,2,c	;volatile
  6789                           
  6790                           ;lcd.c: 28: lcdNibble(data);
  6791  00E1E2  5003               	movf	lcdInst@data,w,c
  6792  00E1E4  EC0A  F072         	call	_lcdNibble
  6793  00E1E8  0012               	return		;funcret
  6794  00E1EA                     __end_of_lcdInst:
  6795                           	opt stack 0
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon2	equ	0xFF1
  6803                           wreg	equ	0xFE8
  6804                           indf2	equ	0xFDF
  6805                           postinc2	equ	0xFDE
  6806                           postdec2	equ	0xFDD
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _lcdNibble *****************
  6812 ;; Defined at:
  6813 ;;		line 36 in file "lcd.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  data            1    wreg     unsigned char 
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;  data            1    1[COMRAM] unsigned char 
  6818 ;;  temp            1    0[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;Total ram usage:        2 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_lcdInst
  6838 ;;		_putch
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text38
  6843  00E414                     __ptext38:
  6844                           	opt stack 0
  6845  00E414                     _lcdNibble:
  6846                           	opt stack 28
  6847                           
  6848                           ;incstack = 0
  6849                           ;lcdNibble@data stored from wreg
  6850  00E414  6E02               	movwf	lcdNibble@data,c
  6851                           
  6852                           ;lcd.c: 38: char temp = data & 0xF0;
  6853  00E416  5002               	movf	lcdNibble@data,w,c
  6854  00E418  0BF0               	andlw	240
  6855  00E41A  6E01               	movwf	lcdNibble@temp,c
  6856                           
  6857                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6858  00E41C  508C               	movf	3980,w,c	;volatile
  6859  00E41E  0B0F               	andlw	15
  6860  00E420  6E8C               	movwf	3980,c	;volatile
  6861                           
  6862                           ;lcd.c: 40: LATD = temp | LATD;
  6863  00E422  5001               	movf	lcdNibble@temp,w,c
  6864  00E424  108C               	iorwf	3980,w,c	;volatile
  6865  00E426  6E8C               	movwf	3980,c	;volatile
  6866                           
  6867                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6868  00E428  968C               	bcf	3980,3,c	;volatile
  6869                           
  6870                           ;lcd.c: 43: _delay((unsigned long)((30)*(8000000/4000000.0)));
  6871  00E42A  0E14               	movlw	20
  6872  00E42C                     u3397:
  6873  00E42C  2EE8               	decfsz	wreg,f,c
  6874  00E42E  D7FE               	bra	u3397
  6875                           
  6876                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6877  00E430  868C               	bsf	3980,3,c	;volatile
  6878                           
  6879                           ;lcd.c: 45: _delay((unsigned long)((30)*(8000000/4000000.0)));
  6880  00E432  0E14               	movlw	20
  6881  00E434                     u3407:
  6882  00E434  2EE8               	decfsz	wreg,f,c
  6883  00E436  D7FE               	bra	u3407
  6884                           
  6885                           ;lcd.c: 47: data = data << 4;
  6886  00E438  3802               	swapf	lcdNibble@data,w,c
  6887  00E43A  0BF0               	andlw	240
  6888  00E43C  6E02               	movwf	lcdNibble@data,c
  6889                           
  6890                           ;lcd.c: 49: temp = data & 0xF0;
  6891  00E43E  5002               	movf	lcdNibble@data,w,c
  6892  00E440  0BF0               	andlw	240
  6893  00E442  6E01               	movwf	lcdNibble@temp,c
  6894                           
  6895                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6896  00E444  508C               	movf	3980,w,c	;volatile
  6897  00E446  0B0F               	andlw	15
  6898  00E448  6E8C               	movwf	3980,c	;volatile
  6899                           
  6900                           ;lcd.c: 51: LATD = temp | LATD;
  6901  00E44A  5001               	movf	lcdNibble@temp,w,c
  6902  00E44C  108C               	iorwf	3980,w,c	;volatile
  6903  00E44E  6E8C               	movwf	3980,c	;volatile
  6904                           
  6905                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6906  00E450  968C               	bcf	3980,3,c	;volatile
  6907                           
  6908                           ;lcd.c: 54: _delay((unsigned long)((30)*(8000000/4000000.0)));
  6909  00E452  0E14               	movlw	20
  6910  00E454                     u3417:
  6911  00E454  2EE8               	decfsz	wreg,f,c
  6912  00E456  D7FE               	bra	u3417
  6913                           
  6914                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6915  00E458  868C               	bsf	3980,3,c	;volatile
  6916                           
  6917                           ;lcd.c: 56: _delay((unsigned long)((30)*(8000000/4000000.0)));
  6918  00E45A  0E14               	movlw	20
  6919  00E45C                     u3427:
  6920  00E45C  2EE8               	decfsz	wreg,f,c
  6921  00E45E  D7FE               	bra	u3427
  6922  00E460  0012               	return		;funcret
  6923  00E462                     __end_of_lcdNibble:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon2	equ	0xFF1
  6932                           wreg	equ	0xFE8
  6933                           indf2	equ	0xFDF
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           fsr2h	equ	0xFDA
  6937                           fsr2l	equ	0xFD9
  6938                           status	equ	0xFD8
  6939                           
  6940 ;; *************** function ___awmod *****************
  6941 ;; Defined at:
  6942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  dividend        2    0[COMRAM] int 
  6945 ;;  divisor         2    2[COMRAM] int 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  sign            1    5[COMRAM] unsigned char 
  6948 ;;  counter         1    4[COMRAM] unsigned char 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  2    0[COMRAM] int 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6958 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;Total ram usage:        6 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_end_phase
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text39
  6972  00E56A                     __ptext39:
  6973                           	opt stack 0
  6974  00E56A                     ___awmod:
  6975                           	opt stack 29
  6976                           
  6977                           ;incstack = 0
  6978  00E56A  0E00               	movlw	0
  6979  00E56C  6E06               	movwf	___awmod@sign,c
  6980  00E56E  AE02               	btfss	___awmod@dividend+1,7,c
  6981  00E570  D006               	goto	l3049
  6982  00E572  6C01               	negf	___awmod@dividend,c
  6983  00E574  1E02               	comf	___awmod@dividend+1,f,c
  6984  00E576  B0D8               	btfsc	status,0,c
  6985  00E578  2A02               	incf	___awmod@dividend+1,f,c
  6986  00E57A  0E01               	movlw	1
  6987  00E57C  6E06               	movwf	___awmod@sign,c
  6988  00E57E                     l3049:
  6989  00E57E  AE04               	btfss	___awmod@divisor+1,7,c
  6990  00E580  D004               	goto	l3053
  6991  00E582  6C03               	negf	___awmod@divisor,c
  6992  00E584  1E04               	comf	___awmod@divisor+1,f,c
  6993  00E586  B0D8               	btfsc	status,0,c
  6994  00E588  2A04               	incf	___awmod@divisor+1,f,c
  6995  00E58A                     l3053:
  6996  00E58A  5003               	movf	___awmod@divisor,w,c
  6997  00E58C  1004               	iorwf	___awmod@divisor+1,w,c
  6998  00E58E  B4D8               	btfsc	status,2,c
  6999  00E590  D018               	goto	l3069
  7000  00E592  0E01               	movlw	1
  7001  00E594  6E05               	movwf	___awmod@counter,c
  7002  00E596  D004               	goto	l3059
  7003  00E598                     l3057:
  7004  00E598  90D8               	bcf	status,0,c
  7005  00E59A  3603               	rlcf	___awmod@divisor,f,c
  7006  00E59C  3604               	rlcf	___awmod@divisor+1,f,c
  7007  00E59E  2A05               	incf	___awmod@counter,f,c
  7008  00E5A0                     l3059:
  7009  00E5A0  AE04               	btfss	___awmod@divisor+1,7,c
  7010  00E5A2  D7FA               	goto	l3057
  7011  00E5A4                     l3061:
  7012  00E5A4  5003               	movf	___awmod@divisor,w,c
  7013  00E5A6  5C01               	subwf	___awmod@dividend,w,c
  7014  00E5A8  5004               	movf	___awmod@divisor+1,w,c
  7015  00E5AA  5802               	subwfb	___awmod@dividend+1,w,c
  7016  00E5AC  A0D8               	btfss	status,0,c
  7017  00E5AE  D004               	goto	l3065
  7018  00E5B0  5003               	movf	___awmod@divisor,w,c
  7019  00E5B2  5E01               	subwf	___awmod@dividend,f,c
  7020  00E5B4  5004               	movf	___awmod@divisor+1,w,c
  7021  00E5B6  5A02               	subwfb	___awmod@dividend+1,f,c
  7022  00E5B8                     l3065:
  7023  00E5B8  90D8               	bcf	status,0,c
  7024  00E5BA  3204               	rrcf	___awmod@divisor+1,f,c
  7025  00E5BC  3203               	rrcf	___awmod@divisor,f,c
  7026  00E5BE  2E05               	decfsz	___awmod@counter,f,c
  7027  00E5C0  D7F1               	goto	l3061
  7028  00E5C2                     l3069:
  7029  00E5C2  5006               	movf	___awmod@sign,w,c
  7030  00E5C4  B4D8               	btfsc	status,2,c
  7031  00E5C6  D004               	goto	l3073
  7032  00E5C8  6C01               	negf	___awmod@dividend,c
  7033  00E5CA  1E02               	comf	___awmod@dividend+1,f,c
  7034  00E5CC  B0D8               	btfsc	status,0,c
  7035  00E5CE  2A02               	incf	___awmod@dividend+1,f,c
  7036  00E5D0                     l3073:
  7037  00E5D0  C001  F001         	movff	___awmod@dividend,?___awmod
  7038  00E5D4  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7039  00E5D8  0012               	return	
  7040  00E5DA                     __end_of___awmod:
  7041                           	opt stack 0
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon2	equ	0xFF1
  7049                           wreg	equ	0xFE8
  7050                           indf2	equ	0xFDF
  7051                           postinc2	equ	0xFDE
  7052                           postdec2	equ	0xFDD
  7053                           fsr2h	equ	0xFDA
  7054                           fsr2l	equ	0xFD9
  7055                           status	equ	0xFD8
  7056                           
  7057 ;; *************** function ___awdiv *****************
  7058 ;; Defined at:
  7059 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  dividend        2    6[COMRAM] int 
  7062 ;;  divisor         2    8[COMRAM] int 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  quotient        2   12[COMRAM] int 
  7065 ;;  sign            1   11[COMRAM] unsigned char 
  7066 ;;  counter         1   10[COMRAM] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  2    6[COMRAM] int 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7076 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;Total ram usage:        8 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; This function calls:
  7083 ;;		Nothing
  7084 ;; This function is called by:
  7085 ;;		_end_phase
  7086 ;;		_dec_to_hex
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           	psect	text40
  7091  00E746                     __ptext40:
  7092                           	opt stack 0
  7093  00E746                     ___awdiv:
  7094                           	opt stack 28
  7095                           
  7096                           ;incstack = 0
  7097  00E746  0E00               	movlw	0
  7098  00E748  6E0C               	movwf	___awdiv@sign,c
  7099  00E74A  AE0A               	btfss	___awdiv@divisor+1,7,c
  7100  00E74C  D006               	goto	l2945
  7101  00E74E  6C09               	negf	___awdiv@divisor,c
  7102  00E750  1E0A               	comf	___awdiv@divisor+1,f,c
  7103  00E752  B0D8               	btfsc	status,0,c
  7104  00E754  2A0A               	incf	___awdiv@divisor+1,f,c
  7105  00E756  0E01               	movlw	1
  7106  00E758  6E0C               	movwf	___awdiv@sign,c
  7107  00E75A                     l2945:
  7108  00E75A  AE08               	btfss	___awdiv@dividend+1,7,c
  7109  00E75C  D006               	goto	l2951
  7110  00E75E  6C07               	negf	___awdiv@dividend,c
  7111  00E760  1E08               	comf	___awdiv@dividend+1,f,c
  7112  00E762  B0D8               	btfsc	status,0,c
  7113  00E764  2A08               	incf	___awdiv@dividend+1,f,c
  7114  00E766  0E01               	movlw	1
  7115  00E768  1A0C               	xorwf	___awdiv@sign,f,c
  7116  00E76A                     l2951:
  7117  00E76A  0E00               	movlw	0
  7118  00E76C  6E0E               	movwf	___awdiv@quotient+1,c
  7119  00E76E  0E00               	movlw	0
  7120  00E770  6E0D               	movwf	___awdiv@quotient,c
  7121  00E772  5009               	movf	___awdiv@divisor,w,c
  7122  00E774  100A               	iorwf	___awdiv@divisor+1,w,c
  7123  00E776  B4D8               	btfsc	status,2,c
  7124  00E778  D01C               	goto	l2973
  7125  00E77A  0E01               	movlw	1
  7126  00E77C  6E0B               	movwf	___awdiv@counter,c
  7127  00E77E  D004               	goto	l2959
  7128  00E780                     l2957:
  7129  00E780  90D8               	bcf	status,0,c
  7130  00E782  3609               	rlcf	___awdiv@divisor,f,c
  7131  00E784  360A               	rlcf	___awdiv@divisor+1,f,c
  7132  00E786  2A0B               	incf	___awdiv@counter,f,c
  7133  00E788                     l2959:
  7134  00E788  AE0A               	btfss	___awdiv@divisor+1,7,c
  7135  00E78A  D7FA               	goto	l2957
  7136  00E78C                     l2961:
  7137  00E78C  90D8               	bcf	status,0,c
  7138  00E78E  360D               	rlcf	___awdiv@quotient,f,c
  7139  00E790  360E               	rlcf	___awdiv@quotient+1,f,c
  7140  00E792  5009               	movf	___awdiv@divisor,w,c
  7141  00E794  5C07               	subwf	___awdiv@dividend,w,c
  7142  00E796  500A               	movf	___awdiv@divisor+1,w,c
  7143  00E798  5808               	subwfb	___awdiv@dividend+1,w,c
  7144  00E79A  A0D8               	btfss	status,0,c
  7145  00E79C  D005               	goto	l2969
  7146  00E79E  5009               	movf	___awdiv@divisor,w,c
  7147  00E7A0  5E07               	subwf	___awdiv@dividend,f,c
  7148  00E7A2  500A               	movf	___awdiv@divisor+1,w,c
  7149  00E7A4  5A08               	subwfb	___awdiv@dividend+1,f,c
  7150  00E7A6  800D               	bsf	___awdiv@quotient,0,c
  7151  00E7A8                     l2969:
  7152  00E7A8  90D8               	bcf	status,0,c
  7153  00E7AA  320A               	rrcf	___awdiv@divisor+1,f,c
  7154  00E7AC  3209               	rrcf	___awdiv@divisor,f,c
  7155  00E7AE  2E0B               	decfsz	___awdiv@counter,f,c
  7156  00E7B0  D7ED               	goto	l2961
  7157  00E7B2                     l2973:
  7158  00E7B2  500C               	movf	___awdiv@sign,w,c
  7159  00E7B4  B4D8               	btfsc	status,2,c
  7160  00E7B6  D004               	goto	l2977
  7161  00E7B8  6C0D               	negf	___awdiv@quotient,c
  7162  00E7BA  1E0E               	comf	___awdiv@quotient+1,f,c
  7163  00E7BC  B0D8               	btfsc	status,0,c
  7164  00E7BE  2A0E               	incf	___awdiv@quotient+1,f,c
  7165  00E7C0                     l2977:
  7166  00E7C0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  7167  00E7C4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  7168  00E7C8  0012               	return	
  7169  00E7CA                     __end_of___awdiv:
  7170                           	opt stack 0
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon2	equ	0xFF1
  7178                           wreg	equ	0xFE8
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function _delay *****************
  7187 ;; Defined at:
  7188 ;;		line 233 in file "main.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  seconds         2    0[COMRAM] int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  i               1    5[COMRAM] unsigned char 
  7193 ;;  i               2    3[COMRAM] int 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;Total ram usage:        6 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_main
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text41
  7217  00E384                     __ptext41:
  7218                           	opt stack 0
  7219  00E384                     _delay:
  7220                           	opt stack 30
  7221                           
  7222                           ;main.c: 234: for (int i = 0; i <= seconds; i ++) {
  7223                           
  7224                           ;incstack = 0
  7225  00E384  0E00               	movlw	0
  7226  00E386  6E05               	movwf	delay@i+1,c
  7227  00E388  0E00               	movlw	0
  7228  00E38A  6E04               	movwf	delay@i,c
  7229  00E38C  D012               	goto	l3133
  7230  00E38E                     l3121:
  7231                           
  7232                           ;main.c: 235: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
  7233  00E38E  0E00               	movlw	0
  7234  00E390  6E06               	movwf	delay@i_235,c
  7235  00E392                     l3123:
  7236  00E392  0E63               	movlw	99
  7237  00E394  6406               	cpfsgt	delay@i_235,c
  7238  00E396  D001               	goto	l3127
  7239  00E398  D00A               	goto	l3131
  7240  00E39A                     l3127:
  7241  00E39A  0E1A               	movlw	26
  7242  00E39C  6E03               	movwf	??_delay& (0+255),c
  7243  00E39E  0EF8               	movlw	248
  7244  00E3A0                     u3437:
  7245  00E3A0  2EE8               	decfsz	wreg,f,c
  7246  00E3A2  D7FE               	bra	u3437
  7247  00E3A4  2E03               	decfsz	??_delay& (0+255),f,c
  7248  00E3A6  D7FC               	bra	u3437
  7249  00E3A8  D000               	nop2	
  7250  00E3AA  2A06               	incf	delay@i_235,f,c
  7251  00E3AC  D7F2               	goto	l3123
  7252  00E3AE                     l3131:
  7253  00E3AE  4A04               	infsnz	delay@i,f,c
  7254  00E3B0  2A05               	incf	delay@i+1,f,c
  7255  00E3B2                     l3133:
  7256  00E3B2  5004               	movf	delay@i,w,c
  7257  00E3B4  5C01               	subwf	delay@seconds,w,c
  7258  00E3B6  5002               	movf	delay@seconds+1,w,c
  7259  00E3B8  0A80               	xorlw	128
  7260  00E3BA  6E03               	movwf	??_delay& (0+255),c
  7261  00E3BC  5005               	movf	delay@i+1,w,c
  7262  00E3BE  0A80               	xorlw	128
  7263  00E3C0  5803               	subwfb	??_delay& (0+255),w,c
  7264  00E3C2  A0D8               	btfss	status,0,c
  7265  00E3C4  0012               	return	
  7266  00E3C6  D7E3               	goto	l3121
  7267  00E3C8                     __end_of_delay:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           intcon2	equ	0xFF1
  7276                           wreg	equ	0xFE8
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           fsr2h	equ	0xFDA
  7281                           fsr2l	equ	0xFD9
  7282                           status	equ	0xFD8
  7283                           
  7284 ;; *************** function _I2C_Master_Init *****************
  7285 ;; Defined at:
  7286 ;;		line 13 in file "I2C.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;  c               4   13[COMRAM] const unsigned long 
  7289 ;; Auto vars:     Size  Location     Type
  7290 ;;		None
  7291 ;; Return value:  Size  Location     Type
  7292 ;;                  1    wreg      void 
  7293 ;; Registers used:
  7294 ;;		wreg, status,2, status,0, cstack
  7295 ;; Tracked objects:
  7296 ;;		On entry : 0/0
  7297 ;;		On exit  : 0/0
  7298 ;;		Unchanged: 0/0
  7299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7303 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;Total ram usage:        8 bytes
  7305 ;; Hardware stack levels used:    1
  7306 ;; Hardware stack levels required when called:    1
  7307 ;; This function calls:
  7308 ;;		___lldiv
  7309 ;; This function is called by:
  7310 ;;		_main
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text42
  7315  00E4B4                     __ptext42:
  7316                           	opt stack 0
  7317  00E4B4                     _I2C_Master_Init:
  7318                           	opt stack 29
  7319                           
  7320                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  7321                           
  7322                           ;incstack = 0
  7323  00E4B4  0E00               	movlw	0
  7324  00E4B6  6EC7               	movwf	4039,c	;volatile
  7325                           
  7326                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  7327  00E4B8  0E28               	movlw	40
  7328  00E4BA  6EC6               	movwf	4038,c	;volatile
  7329                           
  7330                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  7331  00E4BC  0E00               	movlw	0
  7332  00E4BE  6EC5               	movwf	4037,c	;volatile
  7333                           
  7334                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  7335  00E4C0  0E00               	movlw	0
  7336  00E4C2  6E01               	movwf	___lldiv@dividend,c
  7337  00E4C4  0E12               	movlw	18
  7338  00E4C6  6E02               	movwf	___lldiv@dividend+1,c
  7339  00E4C8  0E7A               	movlw	122
  7340  00E4CA  6E03               	movwf	___lldiv@dividend+2,c
  7341  00E4CC  0E00               	movlw	0
  7342  00E4CE  6E04               	movwf	___lldiv@dividend+3,c
  7343  00E4D0  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7344  00E4D4  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7345  00E4D8  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7346  00E4DC  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7347  00E4E0  0E02               	movlw	2
  7348  00E4E2                     u3105:
  7349  00E4E2  90D8               	bcf	status,0,c
  7350  00E4E4  3612               	rlcf	??_I2C_Master_Init,f,c
  7351  00E4E6  3613               	rlcf	??_I2C_Master_Init+1,f,c
  7352  00E4E8  3614               	rlcf	??_I2C_Master_Init+2,f,c
  7353  00E4EA  3615               	rlcf	??_I2C_Master_Init+3,f,c
  7354  00E4EC  2EE8               	decfsz	wreg,f,c
  7355  00E4EE  D7F9               	goto	u3105
  7356  00E4F0  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  7357  00E4F4  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7358  00E4F8  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7359  00E4FC  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7360  00E500  EC62  F073         	call	___lldiv	;wreg free
  7361  00E504  0401               	decf	?___lldiv,w,c
  7362  00E506  6EC8               	movwf	4040,c	;volatile
  7363                           
  7364                           ;I2C.c: 20: TRISC3 = 1;
  7365  00E508  8694               	bsf	3988,3,c	;volatile
  7366                           
  7367                           ;I2C.c: 21: TRISC4 = 1;
  7368  00E50A  8894               	bsf	3988,4,c	;volatile
  7369  00E50C  0012               	return		;funcret
  7370  00E50E                     __end_of_I2C_Master_Init:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodh	equ	0xFF4
  7377                           prodl	equ	0xFF3
  7378                           intcon2	equ	0xFF1
  7379                           wreg	equ	0xFE8
  7380                           indf2	equ	0xFDF
  7381                           postinc2	equ	0xFDE
  7382                           postdec2	equ	0xFDD
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function ___lldiv *****************
  7388 ;; Defined at:
  7389 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  dividend        4    0[COMRAM] unsigned long 
  7392 ;;  divisor         4    4[COMRAM] unsigned long 
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  quotient        4    8[COMRAM] unsigned long 
  7395 ;;  counter         1   12[COMRAM] unsigned char 
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  4    0[COMRAM] unsigned long 
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7405 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;Total ram usage:       13 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; This function calls:
  7412 ;;		Nothing
  7413 ;; This function is called by:
  7414 ;;		_I2C_Master_Init
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text43
  7419  00E6C4                     __ptext43:
  7420                           	opt stack 0
  7421  00E6C4                     ___lldiv:
  7422                           	opt stack 29
  7423                           
  7424                           ;incstack = 0
  7425  00E6C4  0E00               	movlw	0
  7426  00E6C6  6E09               	movwf	___lldiv@quotient,c
  7427  00E6C8  0E00               	movlw	0
  7428  00E6CA  6E0A               	movwf	___lldiv@quotient+1,c
  7429  00E6CC  0E00               	movlw	0
  7430  00E6CE  6E0B               	movwf	___lldiv@quotient+2,c
  7431  00E6D0  0E00               	movlw	0
  7432  00E6D2  6E0C               	movwf	___lldiv@quotient+3,c
  7433  00E6D4  5005               	movf	___lldiv@divisor,w,c
  7434  00E6D6  1006               	iorwf	___lldiv@divisor+1,w,c
  7435  00E6D8  1007               	iorwf	___lldiv@divisor+2,w,c
  7436  00E6DA  1008               	iorwf	___lldiv@divisor+3,w,c
  7437  00E6DC  B4D8               	btfsc	status,2,c
  7438  00E6DE  D02A               	goto	l668
  7439  00E6E0  0E01               	movlw	1
  7440  00E6E2  6E0D               	movwf	___lldiv@counter,c
  7441  00E6E4  D006               	goto	l3085
  7442  00E6E6                     l3083:
  7443  00E6E6  90D8               	bcf	status,0,c
  7444  00E6E8  3605               	rlcf	___lldiv@divisor,f,c
  7445  00E6EA  3606               	rlcf	___lldiv@divisor+1,f,c
  7446  00E6EC  3607               	rlcf	___lldiv@divisor+2,f,c
  7447  00E6EE  3608               	rlcf	___lldiv@divisor+3,f,c
  7448  00E6F0  2A0D               	incf	___lldiv@counter,f,c
  7449  00E6F2                     l3085:
  7450  00E6F2  AE08               	btfss	___lldiv@divisor+3,7,c
  7451  00E6F4  D7F8               	goto	l3083
  7452  00E6F6                     l3087:
  7453  00E6F6  90D8               	bcf	status,0,c
  7454  00E6F8  3609               	rlcf	___lldiv@quotient,f,c
  7455  00E6FA  360A               	rlcf	___lldiv@quotient+1,f,c
  7456  00E6FC  360B               	rlcf	___lldiv@quotient+2,f,c
  7457  00E6FE  360C               	rlcf	___lldiv@quotient+3,f,c
  7458  00E700  5005               	movf	___lldiv@divisor,w,c
  7459  00E702  5C01               	subwf	___lldiv@dividend,w,c
  7460  00E704  5006               	movf	___lldiv@divisor+1,w,c
  7461  00E706  5802               	subwfb	___lldiv@dividend+1,w,c
  7462  00E708  5007               	movf	___lldiv@divisor+2,w,c
  7463  00E70A  5803               	subwfb	___lldiv@dividend+2,w,c
  7464  00E70C  5008               	movf	___lldiv@divisor+3,w,c
  7465  00E70E  5804               	subwfb	___lldiv@dividend+3,w,c
  7466  00E710  A0D8               	btfss	status,0,c
  7467  00E712  D009               	goto	l3095
  7468  00E714  5005               	movf	___lldiv@divisor,w,c
  7469  00E716  5E01               	subwf	___lldiv@dividend,f,c
  7470  00E718  5006               	movf	___lldiv@divisor+1,w,c
  7471  00E71A  5A02               	subwfb	___lldiv@dividend+1,f,c
  7472  00E71C  5007               	movf	___lldiv@divisor+2,w,c
  7473  00E71E  5A03               	subwfb	___lldiv@dividend+2,f,c
  7474  00E720  5008               	movf	___lldiv@divisor+3,w,c
  7475  00E722  5A04               	subwfb	___lldiv@dividend+3,f,c
  7476  00E724  8009               	bsf	___lldiv@quotient,0,c
  7477  00E726                     l3095:
  7478  00E726  90D8               	bcf	status,0,c
  7479  00E728  3208               	rrcf	___lldiv@divisor+3,f,c
  7480  00E72A  3207               	rrcf	___lldiv@divisor+2,f,c
  7481  00E72C  3206               	rrcf	___lldiv@divisor+1,f,c
  7482  00E72E  3205               	rrcf	___lldiv@divisor,f,c
  7483  00E730  2E0D               	decfsz	___lldiv@counter,f,c
  7484  00E732  D7E1               	goto	l3087
  7485  00E734                     l668:
  7486  00E734  C009  F001         	movff	___lldiv@quotient,?___lldiv
  7487  00E738  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7488  00E73C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7489  00E740  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7490  00E744  0012               	return		;funcret
  7491  00E746                     __end_of___lldiv:
  7492                           	opt stack 0
  7493                           tblptru	equ	0xFF8
  7494                           tblptrh	equ	0xFF7
  7495                           tblptrl	equ	0xFF6
  7496                           tablat	equ	0xFF5
  7497                           prodh	equ	0xFF4
  7498                           prodl	equ	0xFF3
  7499                           intcon2	equ	0xFF1
  7500                           wreg	equ	0xFE8
  7501                           indf2	equ	0xFDF
  7502                           postinc2	equ	0xFDE
  7503                           postdec2	equ	0xFDD
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon2	equ	0xFF1
  7514                           wreg	equ	0xFE8
  7515                           indf2	equ	0xFDF
  7516                           postinc2	equ	0xFDE
  7517                           postdec2	equ	0xFDD
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522                           	psect	rparam
  7523  0000                     tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodh	equ	0xFF4
  7528                           prodl	equ	0xFF3
  7529                           intcon2	equ	0xFF1
  7530                           wreg	equ	0xFE8
  7531                           indf2	equ	0xFDF
  7532                           postinc2	equ	0xFDE
  7533                           postdec2	equ	0xFDD
  7534                           fsr2h	equ	0xFDA
  7535                           fsr2l	equ	0xFD9
  7536                           status	equ	0xFD8


Data Sizes:
    Strings     239
    Constant    99
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    121     123
    BANK0           128     38      38
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_14(CODE[17]), STR_13(CODE[15]), STR_12(CODE[16]), STR_11(CODE[16]), 
		 -> STR_10(CODE[16]), STR_9(CODE[16]), STR_8(CODE[16]), STR_7(CODE[13]), 
		 -> STR_6(CODE[22]), STR_5(CODE[22]), STR_4(CODE[12]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(BANK0[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(BANK0[7]), main@start_time(BANK0[7]), main@time(BANK0[7]), 

    message@line2	PTR unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[16]), STR_10(CODE[16]), STR_8(CODE[16]), 

    message@line1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_11(CODE[16]), STR_9(CODE[16]), STR_7(CODE[13]), 

    stand_by@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(BANK0[7]), 


Critical Paths under _main in COMRAM

    _main->_time_difference
    _time_difference->_dec_to_hex
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _stand_by->_printf
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _end_phase->_message
    _message->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    ___awdiv->___awmod
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_time_difference

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   90258
                                            119 COMRAM     2     2      0
                                             15 BANK0     23    23      0
                    _I2C_Master_Init
                              _delay
                          _end_phase
                            _initLCD
                            _lcdInst
                             _printf
                           _stand_by
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _time_difference                                     20    16      4   71571
                                            114 COMRAM     5     1      4
                                              0 BANK0     15    15      0
                             ___wmul
                         _dec_to_hex
                            _initLCD
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _dec_to_hex                                          16    14      2   70163
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 17    11      6   58495
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  5     2      3   19160
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                  9     6      3   31728
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           12     5      7    8537
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _stand_by                                             5     3      2    4484
                                             38 COMRAM     5     3      2
                            _lcdInst
                             _printf
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2     755
                                              3 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _end_phase                                           11     9      2    9113
                                             42 COMRAM    11     9      2
                            ___awdiv
                            ___awmod
                            _initLCD
                            _lcdInst
                            _message
                             _printf
 ---------------------------------------------------------------------------------
 (2) _message                                              4     0      4    3939
                                             38 COMRAM     4     0      4
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    3376
                                             12 COMRAM    26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     671
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     552
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _delay
   _end_phase
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
     _message
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _stand_by
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _time_difference
     ___wmul
     _dec_to_hex
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     26      26       5       29.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     79      7B       1       96.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      34        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 04 22:48:42 2017

              _update_time E5DA               ___altoft@exp 003F              ___altoft@sign 0040  
                       l74 F3EC                         l95 F998               ___awdiv@sign 000C  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000               ___ftadd@exp1 0027               ___ftadd@exp2 0026  
             ___ftadd@sign 0025                        l105 F9EA                        l115 FA3E  
                      l211 E204                        l125 FB22                        l267 FC8C  
                      l721 E4AA                        l561 F5FE                        l538 E978  
                      l618 E24A                        l731 E37A                        l565 F628  
                      l576 F6D8                        l585 F6F4                        l753 F47E  
                      l668 E734                        l596 ED80                        l916 F818  
                      l917 F93C                        l758 F5AC                        l927 ECBE  
             __CFG_CPB$OFF 000000                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        _exp F766                        _log F096  
                      _pow F448               ___awmod@sign 0006                        wreg 000FE8  
             __CFG_LVP$OFF 000000               ___ftdiv@cntr 0012               ___ftdiv@sign 0017  
             __CFG_WDT$OFF 000000                       l3003 E60E                       l3013 E632  
                     l2221 E67A                       l3007 E616                       l2303 EDDA  
                     l3121 E38E                       l2241 F636                       l2401 EF72  
                     l3131 E3AE                       l3123 E392                       l3203 FA5A  
                     l2235 F60C                       l2323 EE34                       l2219 E66E  
                     l3027 EFB4                       l3133 E3B2                       l3061 E5A4  
                     l3053 E58A                       l2181 E930                       l2173 E8FA  
                     l2333 EE5C                       l2309 EE02                       l2405 EF88  
                     l3127 E39A                       l2263 F688                       l2327 EE44  
                     l3039 F084                       l3073 E5D0                       l3065 E5B8  
                     l3057 E598                       l3049 E57E                       l3209 FAFE  
                     l3161 F960                       l2185 E946                       l2177 E908  
                     l2265 F692                       l2257 F666                       l2337 EE6C  
                     l2353 E82A                       l2417 E882                       l3083 E6E6  
                     l3059 E5A0                       l3163 F974                       l3171 F9A6  
                     l2187 E964                       l2179 E912                       l2283 F710  
                     l2275 F6C6                       l2267 F69C                       l2531 EC2A  
                     l3085 E6F2                       l3069 E5C2                       l2621 E480  
                     l3157 F954                       l2189 E96E                       l2605 E514  
                     l2509 E2DE                       l2453 ECF4                       l2293 F740  
                     l2277 F6D0                       l2269 F6A4                       l2349 E7FA  
                     l3237 F348                       l3095 E726                       l3087 E6F6  
                     l2631 E4A0                       l2623 E484                       l3191 FA1A  
                     l3175 F9B2                       l2607 E520                       l2543 EB5C  
                     l2359 E856                       l2391 EF48                       l2535 EC44  
                     l2527 EC1C                       l3239 F354                       l2641 E358  
                     l2801 FD04                       l3177 F9C6                       l3185 F9F8  
                     l2545 EBD8                       l2369 EED2                       l2561 EAB6  
                     l2553 EA72                       l2713 F912                       l2619 E478  
                     l2643 E35C                       l2803 FD08                       l2723 FB3C  
                     l2459 ED1C                       l2387 EF38                       l2733 FB60  
                     l3189 FA06                       l2397 EF60                       l2573 EAD8  
                     l2647 E370                       l2639 E350                       l2831 FD8A  
                     l2727 FB4C                       l3199 FA4C                       l2479 ED5A  
                     l2399 EF6C                       l2663 F0D0                       l2825 FD5E  
                     l2817 FD34                       l2753 FC06                       l2729 FB5A  
                     l2497 E318                       l2577 EAE4                       l2657 F0B0  
                     l2921 F506                       l2913 F4A4                       l2843 FDB6  
                     l2819 FD44                       l2763 FC3A                       l2755 FC10  
                     l2747 FBEC                       l2739 FB8E                       l2771 FC5E  
                     l2691 F7EA                       l2907 F48C                       l2845 FDBE  
                     l2853 FDE4                       l2837 FDA0                       l2829 FD82  
                     l2765 FC4C                       l2757 FC16                       l2749 FBF0  
                     l2685 F7B4                       l2925 F528                       l2951 E76A  
                     l2599 E22C                       l2855 FDEA                       l2863 FE74  
                     l2783 FCBA                       l2759 FC28                       l2679 F77E  
                     l2961 E78C                       l2945 E75A                       l2857 FE2E  
                     l2865 FE84                       l2849 FDD2                       l2867 FE8A  
                     l2787 FCD4                       l2891 E2C4                       l2957 E780  
                     l2973 E7B2                       l2789 FCD8                       l2869 FE92  
                     l2959 E788                       l2977 E7C0                       l2969 E7A8  
                     ?_exp 0049                       ?_log 0034                       ?_pow 0052  
                     STR_1 FFCC                       STR_2 FFAE                       STR_3 FFF4  
                     STR_4 FFE8                       STR_5 FF26                       STR_6 FF10  
                     STR_7 FFDB                       STR_8 FF5E                       STR_9 FF9E  
                     u2001 EDC2                       u2021 EDEA                       u2110 EEF0  
                     u2211 ED04                       u2115 EEE8                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     u3105 E4E2                       _LATE 000F8D                       u2330 EA92  
                     u2091 EEB6                       u2180 E8AA                       u2191 ECDC  
                     u1801 F5DE                       u2290 EC36                       u2338 EA94  
                     u2530 F7F2                       u2188 E8AC                       u2540 F7F4  
                     u3407 E434                       u3417 E454                       u3427 E45C  
                     u2900 F4F0                       u3437 E3A0                       u3367 EA4E  
                     u1791 F5CA                       u2840 E2C2                       u3377 E3CE  
                     u3387 E408                       u3397 E42C                       _RCEN 007E2B  
                     _RSEN 007E29                       _main F2EC               ___ftpack@arg 0001  
                     _keys FEAD               ___ftpack@exp 0004                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                       exp@x 0049  
                     log@x 0034                       pow@x 0052                       pow@y 0055  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___ftmul@cntr 001A  
             ___param_bank 000000               ___ftmul@sign 001B               ___fttol@exp1 0036  
                    ??_exp 004C                      ??_log 0037               ___fttol@lval 0032  
                    ??_pow 0058           ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001               main@end_time 009D           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv E7CA            __end_of___ftadd F766                      STR_10 FF6E  
                    STR_11 FF8E                      STR_12 FF7E                      STR_13 FFBD  
                    STR_14 FF4D                      STR_15 FF3C            __end_of___awmod E5DA  
          __end_of___ftdiv EDB2            __end_of___ftneg E258            __end_of___lldiv E746  
          __end_of___ftmul EEA6            ___awdiv@divisor 0009            __end_of___ftsub E342  
          __end_of___fttol EF9A            __end_of___lwdiv E4B4            __end_of___lwmod E384  
          ___awdiv@counter 000B                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0011            __end_of_lcdInst E1EA             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_initLCD E414  
           __CFG_EBTRB$OFF 000000              ___awtoft@sign 000C                      _delay E384  
          __end_of_dpowers FEC8                      _floor EBEE                      _ldexp EA5A  
                    _frexp E85A                      _errno 007A            __end_of_isdigit E234  
            ___ftpack@sign 0005            __end_of_message E2A4                      _putch E1EA  
                    main@d 00A4                      tablat 000FF5                      pow@yi 005F  
                    status 000FD8               stand_by@time 0027             __CFG_PBADEN$ON 000000  
              exp@exponent 004F                ldexp@newexp 0037            __initialization E1F6  
              log@exponent 0037               __end_of_main F448               __end_of_keys FEBE  
             update_time@i 0006                     ??_main 0078              ___fttol@sign1 0031  
            __activetblptr 000002          time_difference@d1 008C          time_difference@d2 008D  
        time_difference@d3 008E          time_difference@s1 0088          time_difference@s2 008A  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002                     ?_delay 0001  
       ??_I2C_Master_Start 0002                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0004                     ?_floor 0041                     ?_ldexp 0034  
                   ?_frexp 0001           __end_of___altoft E6C4           ___awdiv@dividend 0007  
         __end_of___awtoft E302                     ?_putch 0001           __end_of___ftpack E998  
         __end_of___lltoft E56A                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9            update_time@time 0004  
           __CFG_XINST$OFF 000000                     ___ftge E7CA                     ___wmul E258  
                ??___awdiv 000B                  ??___ftadd 0022             __CFG_STVREN$ON 000000  
                ??___awmod 0005                  ??___ftdiv 000F                  ??___ftneg 0004  
                ??___lldiv 0009                  ??___ftmul 0013                  ??___ftsub 002E  
                ??___fttol 002C                  ??___lwdiv 0005                  ??___lwmod 000C  
            dec_to_hex@num 0063                     delay@i 0004           ___awdiv@quotient 000D  
          ___awmod@divisor 0003            ___awmod@counter 0005                  ??_lcdInst 0003  
                   _printf FB32                     floor@i 0044                     floor@x 0041  
    ___ftmul@f3_as_product 0017                  ??_initLCD 0004                  ??_isdigit 0001  
                ??_message 002B            _time_difference F1B0               __mediumconst FEAC  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         __end_of_stand_by EA5A           __end_ofexp@coeff FEF5           __end_oflog@coeff FF10  
               __accesstop 0080    __end_of__initialization E1FA                 ___altoft@c 0037  
               ___ftadd@f1 001C                 ___ftadd@f2 001F                 ___ftge@ff1 0001  
               ___ftge@ff2 0004               eval_poly@res 0031              ___rparam_used 000001  
               ___ftdiv@f1 0009                 ___ftdiv@f2 000C                 ___ftdiv@f3 0013  
               ___ftneg@f1 0001       time_difference@time1 0073       time_difference@time2 0075  
               ___awtoft@c 0009                 ___ftmul@f1 000D                 ___ftmul@f2 0010  
               ___ftsub@f1 0028                 ___ftsub@f2 002B                 ___fttol@f1 0028  
     __end_of_happynewyear FED7             __pcstackCOMRAM 0001               ?_update_time 0004  
            __end_of_delay E3C8                 ___lltoft@c 0009              __end_of_floor ECCC  
            __end_of_ldexp EB1C              __end_of_frexp E8EA              __end_of_putch E1F6  
       __size_of_lcdNibble 004E         __size_of_end_phase 01E8                    ??_delay 0003  
                  ??_floor 0044                    ??_ldexp 0039                    ??_frexp 0006  
               _dec_to_hex EF9A                    ??_putch 0003         time_difference@hr1 0080  
       time_difference@hr2 0082         __size_of_eval_poly 00D2                    ?___ftge 0001  
                  ?___wmul 0001                  ?___altoft 0037    __end_of_time_difference F2EC  
                ?___awtoft 0009                  ?___ftpack 0001                    ?_printf 000D  
                ?___lltoft 0009                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7          __end_of_lcdNibble E462                    __Hparam 0000  
        __end_of_end_phase FB32                    __Lparam 0000            __size_of___ftge 0090  
                  ___awdiv E746                    ___ftadd F5BA                    ___awmod E56A  
                  ___ftdiv ECCC                    ___ftneg E234                  ?_stand_by 0027  
                  ___lldiv E6C4            __size_of___wmul 0026                    ___ftmul EDB2  
                  ___ftsub E302                    ___fttol EEA6                    ___lwdiv E462  
                  ___lwmod E342                 ??___altoft 003B                    __pcinit E1F6  
               ??___awtoft 000C                 ??___ftpack 0006          __end_of_eval_poly EBEE  
                  __ramtop 1000                    _lcdInst E1DE                 ??___lltoft 000D  
                  __ptext0 F2EC                    __ptext1 F1B0                    __ptext2 EF9A  
                  __ptext3 F448                    __ptext4 F096                    __ptext5 F766  
                  __ptext6 EA5A                    __ptext7 EBEE                    __ptext8 E85A  
                  __ptext9 EEA6                 delay@i_235 0006            __size_of_printf 037A  
           dec_to_hex@temp 006B                    _initLCD E3C8          __end_of_hexpowers FED0  
                  _dpowers FEBE               __size_of_exp 01E4               __size_of_log 011A  
                  _isdigit E216               __size_of_pow 0172                    _message E27E  
         ___awmod@dividend 0001   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                ?_dec_to_hex 0063  
     end_of_initialization E1FA                    exp@sign 0051              __Lmediumconst FEAC  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005  
                  pow@sign 005E            ___lldiv@counter 000D                    printf@c 0026  
                  printf@f 000D           I2C_Master_Init@c 000E           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc2 000FDE                 ??_stand_by 0029  
     __size_of_update_time 0072             main@start_time 0096           ?_time_difference 0073  
                _PORTBbits 000F81               _happynewyear FED0                ___ftdiv@exp 0016  
              printf@width 0024                ___ftmul@exp 0016             __end_of___ftge E85A  
             message@line1 0027               message@line2 0029             __end_of___wmul E27E  
      __size_of_dec_to_hex 00FC                 floor@expon 0047             __end_of_printf FEAC  
      start_initialization E1F6                 eval_poly@d 002B                 eval_poly@n 002D  
               eval_poly@x 0028                 ldexp@value 0034                __end_of_exp F94A  
              __end_of_log F1B0                __end_of_pow F5BA                 frexp@value 0001  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002                   ??___ftge 0007                   ??___wmul 0005  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0015          __size_of___altoft 0078  
        __size_of___awtoft 0038          __size_of___ftpack 00AE          __size_of___lltoft 005C  
              __pbssCOMRAM 007A        time_difference@min1 0084        time_difference@min2 0086  
            __pcstackBANK0 0080           _I2C_Master_Start E1C4           _I2C_Master_Write E1D4  
         ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000              __pmediumconst FEAC  
                _lcdNibble E414                   ?___awdiv 0007                   ?___ftadd 001C  
                 ?___awmod 0001                   ?___ftdiv 0009                   ?___ftneg 0001  
                 ?___lldiv 0001                   ?___ftmul 000D                   ?___ftsub 0028  
                 ?___fttol 0028                   ?___lwdiv 0001                   ?___lwmod 0008  
                _end_phase F94A          __size_of_stand_by 00C2                   ?_lcdInst 0001  
         dec_to_hex@hexnum 006F                   ?_initLCD 0001                   ?_isdigit 0001  
                 ?_message 0027                  _eval_poly EB1C                  _hexpowers FEC8  
         ___lwdiv@quotient 0005             __size_of_delay 0044             __size_of_floor 00DE  
           __size_of_ldexp 00C2             __size_of_frexp 0090               ??_dec_to_hex 0065  
           __size_of_putch 000C               delay@seconds 0001             ___wmul@product 0005  
                 _LATDbits 000F8C           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
               ?_end_phase 002B         __end_of_dec_to_hex F096          ___wmul@multiplier 0001  
            lcdNibble@data 0002                 printf@flag 0023              lcdNibble@temp 0001  
               printf@prec 0020                 ?_eval_poly 0028        I2C_Master_Read@temp 0003  
       dec_to_hex@quotient 0071                  frexp@eptr 0004                   __Hrparam 0000  
                 __Lrparam 0000              ??_update_time 0006         __CFG_BOREN$SBORDIS 000000  
              dec_to_hex@i 006D           __size_of___awdiv 0084           __size_of___ftadd 01AC  
         __size_of___awmod 0070           __size_of___ftdiv 00E6           __size_of___ftneg 0024  
         __size_of___lldiv 0082                   ___altoft E64C           __size_of___ftmul 00F4  
         __size_of___ftsub 0040           __size_of___fttol 00F4           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                   ___awtoft E2CA                   ___ftpack E8EA  
                 ___lltoft E50E                _isdigit$597 0002           __size_of_lcdInst 000C  
                 _exp$1019 004C            _I2C_Master_Init E4B4            _I2C_Master_Read E2A4  
         __size_of_initLCD 004C            _I2C_Master_Wait E204            _I2C_Master_Stop E1CC  
         __size_of_isdigit 001E           __size_of_message 0026            ___lwdiv@divisor 0003  
 __size_of_time_difference 013C            ___lwdiv@counter 0007                   __ptext10 E7CA  
                 __ptext11 E64C                   __ptext20 E8EA                   __ptext12 EB1C  
                 __ptext21 E998                   __ptext13 EDB2                   __ptext30 FB32  
                 __ptext22 E5DA                   __ptext14 E302                   __ptext31 E1EA  
                 __ptext23 E1D4                   __ptext15 F5BA                   __ptext40 E746  
                 __ptext32 E216                   __ptext24 E1CC                   __ptext16 E234  
                 __ptext41 E384                   __ptext33 E258                   __ptext25 E1C4  
                 __ptext17 ECCC                   __ptext42 E4B4                   __ptext34 E342  
                 __ptext26 E2A4                   __ptext18 E2CA                   __ptext43 E6C4  
                 __ptext35 E462                   __ptext27 E204                   __ptext19 E50E  
                 __ptext36 E3C8                   __ptext28 F94A                   __ptext37 E1DE  
                 __ptext29 E27E                   __ptext38 E414                   __ptext39 E56A  
                 _pow$1017 0058                   _pow$1018 005B              __size_of_main 015C  
          _dec_to_hex$1015 0065            _dec_to_hex$1016 0068             end_phase@hours 002F  
              ??_lcdNibble 0001                   _stand_by E998                ??_end_phase 002D  
                printf@idx 001B                  printf@len 001E                  printf@val 0021  
                 main@time 008F        __end_of_update_time E64C                   exp@coeff FED7  
                 log@coeff FEF5                  putch@data 0003   __end_of_I2C_Master_Start E1CC  
 __end_of_I2C_Master_Write E1DE                ??_eval_poly 002F                   isdigit@c 0003  
         ___lwmod@dividend 0008           ___lldiv@dividend 0001              end_phase@time 002B  
                 printf@ap 001C                   printf@cp 0019    __end_of_I2C_Master_Init E50E  
  __end_of_I2C_Master_Read E2CA    __end_of_I2C_Master_Wait E216    __end_of_I2C_Master_Stop E1D4  
              lcdInst@data 0003           ___lldiv@quotient 0009          I2C_Master_Write@d 0002  
          ___lwmod@divisor 000A            ___lwmod@counter 000C               end_phase@min 0031  
             end_phase@sec 0033                end_phase@pg 0035          ??_time_difference 0077  
