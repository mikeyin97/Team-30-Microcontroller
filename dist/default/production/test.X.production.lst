

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 04 18:02:22 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31  0000                     
    32                           ; Version 1.40
    33                           ; Generated 01/12/2016 GMT
    34                           ; 
    35                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4620 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	smallconst
    68  001000                     __psmallconst:
    69                           	opt stack 0
    70  001000  00                 	db	0
    71  001001                     _keys:
    72                           	opt stack 0
    73  001001  31                 	db	49
    74  001002  32                 	db	50
    75  001003  33                 	db	51
    76  001004  41                 	db	65
    77  001005  34                 	db	52
    78  001006  35                 	db	53
    79  001007  36                 	db	54
    80  001008  42                 	db	66
    81  001009  37                 	db	55
    82  00100A  38                 	db	56
    83  00100B  39                 	db	57
    84  00100C  43                 	db	67
    85  00100D  2A                 	db	42
    86  00100E  30                 	db	48
    87  00100F  23                 	db	35
    88  001010  44                 	db	68
    89  001011  00                 	db	0
    90  001012                     __end_of_keys:
    91                           	opt stack 0
    92  001012                     _dpowers:
    93                           	opt stack 0
    94  001012  0001               	dw	1
    95  001014  000A               	dw	10
    96  001016  0064               	dw	100
    97  001018  03E8               	dw	1000
    98  00101A  2710               	dw	10000
    99  00101C                     __end_of_dpowers:
   100                           	opt stack 0
   101  00101C                     _hexpowers:
   102                           	opt stack 0
   103  00101C  0001               	dw	1
   104  00101E  0010               	dw	16
   105  001020  0100               	dw	256
   106  001022  1000               	dw	4096
   107  001024                     __end_of_hexpowers:
   108                           	opt stack 0
   109  001024                     _happynewyear:
   110                           	opt stack 0
   111  001024  00                 	db	0
   112  001025  34                 	db	52
   113  001026  16                 	db	22
   114  001027  02                 	db	2
   115  001028  31                 	db	49
   116  001029  01                 	db	1
   117  00102A  17                 	db	23
   118  00102B                     __end_of_happynewyear:
   119                           	opt stack 0
   120  0000                     _ADCON0	set	4034
   121  0000                     _ADCON1	set	4033
   122  0000                     _LATA	set	3977
   123  0000                     _LATB	set	3978
   124  0000                     _LATC	set	3979
   125  0000                     _LATD	set	3980
   126  0000                     _LATDbits	set	3980
   127  0000                     _LATE	set	3981
   128  0000                     _PORTB	set	3969
   129  0000                     _PORTBbits	set	3969
   130  0000                     _SSPADD	set	4040
   131  0000                     _SSPBUF	set	4041
   132  0000                     _SSPCON1	set	4038
   133  0000                     _SSPCON2	set	4037
   134  0000                     _SSPSTAT	set	4039
   135  0000                     _TRISA	set	3986
   136  0000                     _TRISB	set	3987
   137  0000                     _TRISC	set	3988
   138  0000                     _TRISD	set	3989
   139  0000                     _TRISE	set	3990
   140  0000                     _ACKDT	set	32301
   141  0000                     _ACKEN	set	32300
   142  0000                     _PEN	set	32298
   143  0000                     _RCEN	set	32299
   144  0000                     _RSEN	set	32297
   145  0000                     _SEN	set	32296
   146  0000                     _TRISC3	set	31907
   147  0000                     _TRISC4	set	31908
   148  0000                     _nRBPU	set	32655
   149  00102B                     STR_7:
   150  00102B  25                 	db	37
   151  00102C  30                 	db	48	;'0'
   152  00102D  32                 	db	50	;'2'
   153  00102E  78                 	db	120	;'x'
   154  00102F  3A                 	db	58	;':'
   155  001030  25                 	db	37
   156  001031  30                 	db	48	;'0'
   157  001032  32                 	db	50	;'2'
   158  001033  78                 	db	120	;'x'
   159  001034  3A                 	db	58	;':'
   160  001035  25                 	db	37
   161  001036  30                 	db	48	;'0'
   162  001037  32                 	db	50	;'2'
   163  001038  78                 	db	120	;'x'
   164  001039  20                 	db	32
   165  00103A  53                 	db	83	;'S'
   166  00103B  74                 	db	116	;'t'
   167  00103C  61                 	db	97	;'a'
   168  00103D  72                 	db	114	;'r'
   169  00103E  74                 	db	116	;'t'
   170  00103F  21                 	db	33
   171  001040  00                 	db	0
   172  001041                     STR_6:
   173  001041  25                 	db	37
   174  001042  30                 	db	48	;'0'
   175  001043  32                 	db	50	;'2'
   176  001044  78                 	db	120	;'x'
   177  001045  2F                 	db	47
   178  001046  25                 	db	37
   179  001047  30                 	db	48	;'0'
   180  001048  32                 	db	50	;'2'
   181  001049  78                 	db	120	;'x'
   182  00104A  2F                 	db	47
   183  00104B  25                 	db	37
   184  00104C  30                 	db	48	;'0'
   185  00104D  32                 	db	50	;'2'
   186  00104E  78                 	db	120	;'x'
   187  00104F  20                 	db	32
   188  001050  27                 	db	39
   189  001051  23                 	db	35
   190  001052  27                 	db	39
   191  001053  20                 	db	32
   192  001054  74                 	db	116	;'t'
   193  001055  6F                 	db	111	;'o'
   194  001056  00                 	db	0
   195  001057                     STR_8:
   196  001057  30                 	db	48	;'0'
   197  001058  31                 	db	49	;'1'
   198  001059  32                 	db	50	;'2'
   199  00105A  33                 	db	51	;'3'
   200  00105B  34                 	db	52	;'4'
   201  00105C  35                 	db	53	;'5'
   202  00105D  36                 	db	54	;'6'
   203  00105E  37                 	db	55	;'7'
   204  00105F  38                 	db	56	;'8'
   205  001060  39                 	db	57	;'9'
   206  001061  61                 	db	97	;'a'
   207  001062  62                 	db	98	;'b'
   208  001063  63                 	db	99	;'c'
   209  001064  64                 	db	100	;'d'
   210  001065  65                 	db	101	;'e'
   211  001066  66                 	db	102	;'f'
   212  001067  00                 	db	0
   213  001068                     STR_2:
   214  001068  74                 	db	116	;'t'
   215  001069  68                 	db	104	;'h'
   216  00106A  65                 	db	101	;'e'
   217  00106B  20                 	db	32
   218  00106C  6F                 	db	111	;'o'
   219  00106D  70                 	db	112	;'p'
   220  00106E  65                 	db	101	;'e'
   221  00106F  72                 	db	114	;'r'
   222  001070  61                 	db	97	;'a'
   223  001071  74                 	db	116	;'t'
   224  001072  69                 	db	105	;'i'
   225  001073  6F                 	db	111	;'o'
   226  001074  6E                 	db	110	;'n'
   227  001075  21                 	db	33
   228  001076  00                 	db	0
   229  001077                     STR_1:
   230  001077  59                 	db	89	;'Y'
   231  001078  6F                 	db	111	;'o'
   232  001079  75                 	db	117	;'u'
   233  00107A  20                 	db	32
   234  00107B  68                 	db	104	;'h'
   235  00107C  61                 	db	97	;'a'
   236  00107D  76                 	db	118	;'v'
   237  00107E  65                 	db	101	;'e'
   238  00107F  20                 	db	32
   239  001080  62                 	db	98	;'b'
   240  001081  65                 	db	101	;'e'
   241  001082  67                 	db	103	;'g'
   242  001083  75                 	db	117	;'u'
   243  001084  6E                 	db	110	;'n'
   244  001085  00                 	db	0
   245  001086                     STR_4:
   246  001086  27                 	db	39
   247  001087  2A                 	db	42
   248  001088  27                 	db	39
   249  001089  20                 	db	32
   250  00108A  74                 	db	116	;'t'
   251  00108B  6F                 	db	111	;'o'
   252  00108C  20                 	db	32
   253  00108D  53                 	db	83	;'S'
   254  00108E  54                 	db	84	;'T'
   255  00108F  4F                 	db	79	;'O'
   256  001090  50                 	db	80	;'P'
   257  001091  00                 	db	0
   258  001092                     STR_3:
   259  001092  53                 	db	83	;'S'
   260  001093  6F                 	db	111	;'o'
   261  001094  72                 	db	114	;'r'
   262  001095  74                 	db	116	;'t'
   263  001096  69                 	db	105	;'i'
   264  001097  6E                 	db	110	;'n'
   265  001098  67                 	db	103	;'g'
   266  001099  2E                 	db	46
   267  00109A  2E                 	db	46
   268  00109B  2E                 	db	46
   269  00109C  00                 	db	0
   270  00109D                     STR_5:
   271  00109D  25                 	db	37
   272  00109E  64                 	db	100	;'d'
   273  00109F  00                 	db	0
   274                           
   275                           ; #config settings
   276  0010A0  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  001A0C                     __pcinit:
   280                           	opt stack 0
   281  001A0C                     start_initialization:
   282                           	opt stack 0
   283  001A0C                     __initialization:
   284                           	opt stack 0
   285  001A0C                     end_of_initialization:
   286                           	opt stack 0
   287  001A0C                     __end_of__initialization:
   288                           	opt stack 0
   289  001A0C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  001A0E  6EF8               	movwf	tblptru,c
   291  001A10  0100               	movlb	0
   292  001A12  EFD7  F009         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           
   295                           	psect	cstackCOMRAM
   296  000001                     __pcstackCOMRAM:
   297                           	opt stack 0
   298  000001                     ??_isdigit:
   299  000001                     ??_I2C_Master_Wait:
   300  000001                     ?___wmul:
   301                           	opt stack 0
   302  000001                     ?___lwdiv:
   303                           	opt stack 0
   304  000001                     ?___lldiv:
   305                           	opt stack 0
   306  000001                     lcdNibble@temp:
   307                           	opt stack 0
   308  000001                     delay@seconds:
   309                           	opt stack 0
   310  000001                     ___wmul@multiplier:
   311                           	opt stack 0
   312  000001                     ___lwdiv@dividend:
   313                           	opt stack 0
   314  000001                     ___lldiv@dividend:
   315                           	opt stack 0
   316                           
   317                           ; 4 bytes @ 0x0
   318  000001                     	ds	1
   319  000002                     lcdNibble@data:
   320                           	opt stack 0
   321  000002                     I2C_Master_Read@a:
   322                           	opt stack 0
   323  000002                     _isdigit$545:
   324                           	opt stack 0
   325  000002                     I2C_Master_Write@d:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x1
   329  000002                     	ds	1
   330  000003                     ??_delay:
   331  000003                     lcdInst@data:
   332                           	opt stack 0
   333  000003                     putch@data:
   334                           	opt stack 0
   335  000003                     I2C_Master_Read@temp:
   336                           	opt stack 0
   337  000003                     isdigit@c:
   338                           	opt stack 0
   339  000003                     ___wmul@multiplicand:
   340                           	opt stack 0
   341  000003                     ___lwdiv@divisor:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x2
   345  000003                     	ds	1
   346  000004                     ??_initLCD:
   347  000004                     update_time@time:
   348                           	opt stack 0
   349  000004                     delay@i:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x3
   353  000004                     	ds	1
   354  000005                     ___wmul@product:
   355                           	opt stack 0
   356  000005                     ___lwdiv@quotient:
   357                           	opt stack 0
   358  000005                     ___lldiv@divisor:
   359                           	opt stack 0
   360                           
   361                           ; 4 bytes @ 0x4
   362  000005                     	ds	1
   363  000006                     update_time@i:
   364                           	opt stack 0
   365  000006                     delay@i_197:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x5
   369  000006                     	ds	1
   370  000007                     ?_time_difference:
   371                           	opt stack 0
   372  000007                     ___lwdiv@counter:
   373                           	opt stack 0
   374  000007                     time_difference@time1:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x6
   378  000007                     	ds	1
   379  000008                     ?___lwmod:
   380                           	opt stack 0
   381  000008                     ___lwmod@dividend:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x7
   385  000008                     	ds	1
   386  000009                     time_difference@time2:
   387                           	opt stack 0
   388  000009                     ___lldiv@quotient:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x8
   392  000009                     	ds	1
   393  00000A                     ___lwmod@divisor:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x9
   397  00000A                     	ds	1
   398  00000B                     ??_time_difference:
   399                           
   400                           ; 1 bytes @ 0xA
   401  00000B                     	ds	1
   402  00000C                     ___lwmod@counter:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0xB
   406  00000C                     	ds	1
   407  00000D                     ?_printf:
   408                           	opt stack 0
   409  00000D                     ___lldiv@counter:
   410                           	opt stack 0
   411  00000D                     printf@f:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xC
   415  00000D                     	ds	1
   416  00000E                     I2C_Master_Init@c:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0xD
   420  00000E                     	ds	1
   421  00000F                     time_difference@sec:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0xE
   425  00000F                     	ds	3
   426  000012                     ??_I2C_Master_Init:
   427                           
   428                           ; 1 bytes @ 0x11
   429  000012                     	ds	3
   430  000015                     ??_printf:
   431                           
   432                           ; 1 bytes @ 0x14
   433  000015                     	ds	4
   434  000019                     printf@idx:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x18
   438  000019                     	ds	1
   439  00001A                     printf@ap:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x19
   443  00001A                     	ds	2
   444  00001C                     printf@prec:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x1B
   448  00001C                     	ds	1
   449  00001D                     printf@val:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x1C
   453  00001D                     	ds	2
   454  00001F                     printf@flag:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x1E
   458  00001F                     	ds	1
   459  000020                     printf@width:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  000020                     	ds	2
   464  000022                     printf@c:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x21
   468  000022                     	ds	1
   469  000023                     stand_by@time:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x22
   473  000023                     	ds	2
   474  000025                     ??_stand_by:
   475                           
   476                           ; 1 bytes @ 0x24
   477  000025                     	ds	3
   478  000028                     ??_main:
   479                           
   480                           ; 1 bytes @ 0x27
   481  000028                     	ds	2
   482  00002A                     main@time:
   483                           	opt stack 0
   484                           
   485                           ; 7 bytes @ 0x29
   486  00002A                     	ds	7
   487  000031                     main@start_time:
   488                           	opt stack 0
   489                           
   490                           ; 7 bytes @ 0x30
   491  000031                     	ds	7
   492  000038                     main@end_time:
   493                           	opt stack 0
   494                           
   495                           ; 7 bytes @ 0x37
   496  000038                     	ds	7
   497  00003F                     main@d:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x3E
   501  00003F                     	ds	2
   502                           tblptru	equ	0xFF8
   503                           
   504 ;;
   505 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   506 ;;
   507 ;; *************** function _main *****************
   508 ;; Defined at:
   509 ;;		line 33 in file "main.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;		None
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  end_time        7   55[COMRAM] unsigned char [7]
   514 ;;  start_time      7   48[COMRAM] unsigned char [7]
   515 ;;  time            7   41[COMRAM] unsigned char [7]
   516 ;;  d               2   62[COMRAM] short 
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : 0/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   527 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   529 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   530 ;;Total ram usage:       25 bytes
   531 ;; Hardware stack levels required when called:    4
   532 ;; This function calls:
   533 ;;		_I2C_Master_Init
   534 ;;		_delay
   535 ;;		_initLCD
   536 ;;		_lcdInst
   537 ;;		_printf
   538 ;;		_stand_by
   539 ;;		_time_difference
   540 ;;		_update_time
   541 ;; This function is called by:
   542 ;;		Startup code after reset
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text0
   547  0013AE                     __ptext0:
   548                           	opt stack 0
   549  0013AE                     _main:
   550                           	opt stack 27
   551                           
   552                           ;main.c: 37: TRISA = 0xFF;
   553                           
   554                           ;incstack = 0
   555  0013AE  6892               	setf	3986,c	;volatile
   556                           
   557                           ;main.c: 38: TRISB = 0xFF;
   558  0013B0  6893               	setf	3987,c	;volatile
   559                           
   560                           ;main.c: 39: TRISC = 0x00;
   561  0013B2  0E00               	movlw	0
   562  0013B4  6E94               	movwf	3988,c	;volatile
   563                           
   564                           ;main.c: 40: TRISD = 0x00;
   565  0013B6  0E00               	movlw	0
   566  0013B8  6E95               	movwf	3989,c	;volatile
   567                           
   568                           ;main.c: 41: TRISE = 0x00;
   569  0013BA  0E00               	movlw	0
   570  0013BC  6E96               	movwf	3990,c	;volatile
   571                           
   572                           ;main.c: 43: LATA = 0x00;
   573  0013BE  0E00               	movlw	0
   574  0013C0  6E89               	movwf	3977,c	;volatile
   575                           
   576                           ;main.c: 44: LATB = 0x00;
   577  0013C2  0E00               	movlw	0
   578  0013C4  6E8A               	movwf	3978,c	;volatile
   579                           
   580                           ;main.c: 45: LATC = 0x00;
   581  0013C6  0E00               	movlw	0
   582  0013C8  6E8B               	movwf	3979,c	;volatile
   583                           
   584                           ;main.c: 46: LATD = 0x00;
   585  0013CA  0E00               	movlw	0
   586  0013CC  6E8C               	movwf	3980,c	;volatile
   587                           
   588                           ;main.c: 47: LATE = 0x00;
   589  0013CE  0E00               	movlw	0
   590  0013D0  6E8D               	movwf	3981,c	;volatile
   591                           
   592                           ;main.c: 49: ADCON0 = 0x00;
   593  0013D2  0E00               	movlw	0
   594  0013D4  6EC2               	movwf	4034,c	;volatile
   595                           
   596                           ;main.c: 50: ADCON1 = 0xFF;
   597  0013D6  68C1               	setf	4033,c	;volatile
   598                           
   599                           ;main.c: 52: nRBPU = 0;
   600  0013D8  9EF1               	bcf	intcon2,7,c	;volatile
   601                           
   602                           ;main.c: 56: initLCD();
   603  0013DA  EC53  F00C         	call	_initLCD	;wreg free
   604                           
   605                           ;main.c: 57: lcdInst(0b00000001);;
   606  0013DE  0E01               	movlw	1
   607  0013E0  EC00  F00D         	call	_lcdInst
   608                           
   609                           ;main.c: 58: unsigned char time[7];
   610                           ;main.c: 59: unsigned char start_time[7];
   611                           ;main.c: 60: unsigned char end_time[7];
   612                           ;main.c: 62: I2C_Master_Init(10000);
   613  0013E4  0E10               	movlw	16
   614  0013E6  6E0E               	movwf	I2C_Master_Init@c,c
   615  0013E8  0E27               	movlw	39
   616  0013EA  6E0F               	movwf	I2C_Master_Init@c+1,c
   617  0013EC  0E00               	movlw	0
   618  0013EE  6E10               	movwf	I2C_Master_Init@c+2,c
   619  0013F0  0E00               	movlw	0
   620  0013F2  6E11               	movwf	I2C_Master_Init@c+3,c
   621  0013F4  ECD6  F00B         	call	_I2C_Master_Init	;wreg free
   622                           
   623                           ;main.c: 68: while (PORTBbits.RB1 == 0 || keys[(PORTB & 0xF0)>>4] != '#') {
   624  0013F8  D006               	goto	l1589
   625  0013FA                     l1587:
   626                           
   627                           ;main.c: 71: stand_by(time);
   628  0013FA  0E2A               	movlw	low main@time
   629  0013FC  6E23               	movwf	stand_by@time,c
   630  0013FE  0E00               	movlw	high main@time
   631  001400  6E24               	movwf	stand_by@time+1,c
   632  001402  ECFB  F00A         	call	_stand_by	;wreg free
   633  001406                     l1589:
   634  001406  A281               	btfss	3969,1,c	;volatile
   635  001408  D7F8               	goto	l1587
   636  00140A  3881               	swapf	3969,w,c	;volatile
   637  00140C  0B0F               	andlw	15
   638  00140E  0B0F               	andlw	15
   639  001410  6E28               	movwf	??_main& (0+255),c
   640  001412  6A29               	clrf	(??_main+1)& (0+255),c
   641  001414  0E01               	movlw	low _keys
   642  001416  2428               	addwf	??_main,w,c
   643  001418  6EF6               	movwf	tblptrl,c
   644  00141A  0E10               	movlw	high _keys
   645  00141C  2029               	addwfc	??_main+1,w,c
   646  00141E  6EF7               	movwf	tblptrh,c
   647  001420                     	if	0	;There are less than 3 active tblptr bytes
   648  001420                     	endif
   649  001420  0008               	tblrd		*
   650  001422  50F5               	movf	tablat,w,c
   651  001424  0A23               	xorlw	35
   652  001426  A4D8               	btfss	status,2,c
   653  001428  D7E8               	goto	l1587
   654                           
   655                           ;main.c: 72: }
   656                           ;main.c: 73: update_time(start_time);
   657  00142A  0E31               	movlw	low main@start_time
   658  00142C  6E04               	movwf	update_time@time,c
   659  00142E  0E00               	movlw	high main@start_time
   660  001430  6E05               	movwf	update_time@time+1,c
   661  001432  EC9D  F00B         	call	_update_time	;wreg free
   662                           
   663                           ;main.c: 74: lcdInst(0b00000001);;
   664  001436  0E01               	movlw	1
   665  001438  EC00  F00D         	call	_lcdInst
   666                           
   667                           ;main.c: 75: initLCD();
   668  00143C  EC53  F00C         	call	_initLCD	;wreg free
   669                           
   670                           ;main.c: 76: lcdInst(0b10000000);;
   671  001440  0E80               	movlw	128
   672  001442  EC00  F00D         	call	_lcdInst
   673                           
   674                           ;main.c: 77: printf("You have begun");
   675  001446  0E77               	movlw	low STR_1
   676  001448  6E0D               	movwf	printf@f,c
   677  00144A  0E10               	movlw	high STR_1
   678  00144C  6E0E               	movwf	printf@f+1,c
   679  00144E  EC51  F008         	call	_printf	;wreg free
   680                           
   681                           ;main.c: 78: lcdInst(0b11000000);;
   682  001452  0EC0               	movlw	192
   683  001454  EC00  F00D         	call	_lcdInst
   684                           
   685                           ;main.c: 79: printf("the operation!");
   686  001458  0E68               	movlw	low STR_2
   687  00145A  6E0D               	movwf	printf@f,c
   688  00145C  0E10               	movlw	high STR_2
   689  00145E  6E0E               	movwf	printf@f+1,c
   690  001460  EC51  F008         	call	_printf	;wreg free
   691                           
   692                           ;main.c: 80: delay(3);
   693  001464  0E00               	movlw	0
   694  001466  6E02               	movwf	delay@seconds+1,c
   695  001468  0E03               	movlw	3
   696  00146A  6E01               	movwf	delay@seconds,c
   697  00146C  EC79  F00C         	call	_delay	;wreg free
   698                           
   699                           ;main.c: 81: lcdInst(0b00000001);;
   700  001470  0E01               	movlw	1
   701  001472  EC00  F00D         	call	_lcdInst
   702                           
   703                           ;main.c: 82: initLCD();
   704  001476  EC53  F00C         	call	_initLCD	;wreg free
   705                           
   706                           ;main.c: 83: lcdInst(0b10000000);;
   707  00147A  0E80               	movlw	128
   708  00147C  EC00  F00D         	call	_lcdInst
   709                           
   710                           ;main.c: 84: printf("Sorting...");
   711  001480  0E92               	movlw	low STR_3
   712  001482  6E0D               	movwf	printf@f,c
   713  001484  0E10               	movlw	high STR_3
   714  001486  6E0E               	movwf	printf@f+1,c
   715  001488  EC51  F008         	call	_printf	;wreg free
   716                           
   717                           ;main.c: 85: lcdInst(0b11000000);;
   718  00148C  0EC0               	movlw	192
   719  00148E  EC00  F00D         	call	_lcdInst
   720                           
   721                           ;main.c: 86: printf("'*' to STOP");
   722  001492  0E86               	movlw	low STR_4
   723  001494  6E0D               	movwf	printf@f,c
   724  001496  0E10               	movlw	high STR_4
   725  001498  6E0E               	movwf	printf@f+1,c
   726  00149A  EC51  F008         	call	_printf	;wreg free
   727  00149E                     l66:
   728  00149E  A281               	btfss	3969,1,c	;volatile
   729  0014A0  D7FE               	goto	l66
   730  0014A2  3881               	swapf	3969,w,c	;volatile
   731  0014A4  0B0F               	andlw	15
   732  0014A6  0B0F               	andlw	15
   733  0014A8  6E28               	movwf	??_main& (0+255),c
   734  0014AA  6A29               	clrf	(??_main+1)& (0+255),c
   735  0014AC  0E01               	movlw	low _keys
   736  0014AE  2428               	addwf	??_main,w,c
   737  0014B0  6EF6               	movwf	tblptrl,c
   738  0014B2  0E10               	movlw	high _keys
   739  0014B4  2029               	addwfc	??_main+1,w,c
   740  0014B6  6EF7               	movwf	tblptrh,c
   741  0014B8                     	if	0	;There are less than 3 active tblptr bytes
   742  0014B8                     	endif
   743  0014B8  0008               	tblrd		*
   744  0014BA  50F5               	movf	tablat,w,c
   745  0014BC  0A2A               	xorlw	42
   746  0014BE  A4D8               	btfss	status,2,c
   747  0014C0  D7EE               	goto	l66
   748                           
   749                           ;main.c: 90: }
   750                           ;main.c: 92: update_time(end_time);
   751  0014C2  0E38               	movlw	low main@end_time
   752  0014C4  6E04               	movwf	update_time@time,c
   753  0014C6  0E00               	movlw	high main@end_time
   754  0014C8  6E05               	movwf	update_time@time+1,c
   755  0014CA  EC9D  F00B         	call	_update_time	;wreg free
   756                           
   757                           ;main.c: 94: lcdInst(0b00000001);;
   758  0014CE  0E01               	movlw	1
   759  0014D0  EC00  F00D         	call	_lcdInst
   760                           
   761                           ;main.c: 95: initLCD();
   762  0014D4  EC53  F00C         	call	_initLCD	;wreg free
   763                           
   764                           ;main.c: 96: lcdInst(0b10000000);;
   765  0014D8  0E80               	movlw	128
   766  0014DA  EC00  F00D         	call	_lcdInst
   767                           
   768                           ;main.c: 97: short int d;
   769                           ;main.c: 98: d = time_difference(end_time, start_time);
   770  0014DE  0E38               	movlw	low main@end_time
   771  0014E0  6E07               	movwf	time_difference@time1,c
   772  0014E2  0E00               	movlw	high main@end_time
   773  0014E4  6E08               	movwf	time_difference@time1+1,c
   774  0014E6  0E31               	movlw	low main@start_time
   775  0014E8  6E09               	movwf	time_difference@time2,c
   776  0014EA  0E00               	movlw	high main@start_time
   777  0014EC  6E0A               	movwf	time_difference@time2+1,c
   778  0014EE  EC92  F00A         	call	_time_difference	;wreg free
   779  0014F2  C007  F03F         	movff	?_time_difference,main@d
   780  0014F6  C008  F040         	movff	?_time_difference+1,main@d+1
   781                           
   782                           ;main.c: 99: printf("%d", d);
   783  0014FA  0E9D               	movlw	low STR_5
   784  0014FC  6E0D               	movwf	printf@f,c
   785  0014FE  0E10               	movlw	high STR_5
   786  001500  6E0E               	movwf	printf@f+1,c
   787  001502  C03F  F00F         	movff	main@d,?_printf+2
   788  001506  C040  F010         	movff	main@d+1,?_printf+3
   789  00150A  EC51  F008         	call	_printf	;wreg free
   790                           
   791                           ;main.c: 100: delay(5);
   792  00150E  0E00               	movlw	0
   793  001510  6E02               	movwf	delay@seconds+1,c
   794  001512  0E05               	movlw	5
   795  001514  6E01               	movwf	delay@seconds,c
   796  001516  EC79  F00C         	call	_delay	;wreg free
   797                           
   798                           ;main.c: 101: lcdInst(0b00000001);;
   799  00151A  0E01               	movlw	1
   800  00151C  EC00  F00D         	call	_lcdInst
   801                           
   802                           ;main.c: 102: return;
   803  001520  EF00  F000         	goto	start
   804  001524                     __end_of_main:
   805                           	opt stack 0
   806                           tblptru	equ	0xFF8
   807                           tblptrh	equ	0xFF7
   808                           tblptrl	equ	0xFF6
   809                           tablat	equ	0xFF5
   810                           intcon2	equ	0xFF1
   811                           status	equ	0xFD8
   812                           
   813 ;; *************** function _time_difference *****************
   814 ;; Defined at:
   815 ;;		line 160 in file "main.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  time1           2    6[COMRAM] PTR unsigned char 
   818 ;;		 -> main@end_time(7), 
   819 ;;  time2           2    8[COMRAM] PTR unsigned char 
   820 ;;		 -> main@start_time(7), 
   821 ;; Auto vars:     Size  Location     Type
   822 ;;  sec             2   14[COMRAM] short 
   823 ;; Return value:  Size  Location     Type
   824 ;;                  2    6[COMRAM] short 
   825 ;; Registers used:
   826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;Total ram usage:       10 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:    1
   839 ;; This function calls:
   840 ;;		___wmul
   841 ;; This function is called by:
   842 ;;		_main
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text1
   847  001524                     __ptext1:
   848                           	opt stack 0
   849  001524                     _time_difference:
   850                           	opt stack 29
   851                           
   852                           ;main.c: 161: short int sec;
   853                           ;main.c: 162: sec = 3600*((int)time1[2] - (int)time2[2]);
   854                           
   855                           ;incstack = 0
   856  001524  EE20 F002          	lfsr	2,2
   857  001528  5009               	movf	time_difference@time2,w,c
   858  00152A  26D9               	addwf	fsr2l,f,c
   859  00152C  500A               	movf	time_difference@time2+1,w,c
   860  00152E  22DA               	addwfc	fsr2h,f,c
   861  001530  50DF               	movf	indf2,w,c
   862  001532  6E0B               	movwf	??_time_difference& (0+255),c
   863  001534  6A0C               	clrf	(??_time_difference+1)& (0+255),c
   864  001536  1E0B               	comf	??_time_difference,f,c
   865  001538  1E0C               	comf	??_time_difference+1,f,c
   866  00153A  4A0B               	infsnz	??_time_difference,f,c
   867  00153C  2A0C               	incf	??_time_difference+1,f,c
   868  00153E  EE20 F002          	lfsr	2,2
   869  001542  5007               	movf	time_difference@time1,w,c
   870  001544  26D9               	addwf	fsr2l,f,c
   871  001546  5008               	movf	time_difference@time1+1,w,c
   872  001548  22DA               	addwfc	fsr2h,f,c
   873  00154A  50DF               	movf	indf2,w,c
   874  00154C  6E0D               	movwf	(??_time_difference+2)& (0+255),c
   875  00154E  500D               	movf	??_time_difference+2,w,c
   876  001550  240B               	addwf	??_time_difference,w,c
   877  001552  6E01               	movwf	___wmul@multiplier,c
   878  001554  0E00               	movlw	0
   879  001556  200C               	addwfc	??_time_difference+1,w,c
   880  001558  6E02               	movwf	___wmul@multiplier+1,c
   881  00155A  0E0E               	movlw	14
   882  00155C  6E04               	movwf	___wmul@multiplicand+1,c
   883  00155E  0E10               	movlw	16
   884  001560  6E03               	movwf	___wmul@multiplicand,c
   885  001562  ECCF  F00C         	call	___wmul	;wreg free
   886  001566  C001  F00F         	movff	?___wmul,time_difference@sec
   887  00156A  C002  F010         	movff	?___wmul+1,time_difference@sec+1
   888                           
   889                           ;main.c: 163: sec += 60*((int)time1[1] - (int)time2[1]);
   890  00156E  EE20 F001          	lfsr	2,1
   891  001572  5009               	movf	time_difference@time2,w,c
   892  001574  26D9               	addwf	fsr2l,f,c
   893  001576  500A               	movf	time_difference@time2+1,w,c
   894  001578  22DA               	addwfc	fsr2h,f,c
   895  00157A  50DF               	movf	indf2,w,c
   896  00157C  6E0B               	movwf	??_time_difference& (0+255),c
   897  00157E  6A0C               	clrf	(??_time_difference+1)& (0+255),c
   898  001580  1E0B               	comf	??_time_difference,f,c
   899  001582  1E0C               	comf	??_time_difference+1,f,c
   900  001584  4A0B               	infsnz	??_time_difference,f,c
   901  001586  2A0C               	incf	??_time_difference+1,f,c
   902  001588  EE20 F001          	lfsr	2,1
   903  00158C  5007               	movf	time_difference@time1,w,c
   904  00158E  26D9               	addwf	fsr2l,f,c
   905  001590  5008               	movf	time_difference@time1+1,w,c
   906  001592  22DA               	addwfc	fsr2h,f,c
   907  001594  50DF               	movf	indf2,w,c
   908  001596  6E0D               	movwf	(??_time_difference+2)& (0+255),c
   909  001598  500D               	movf	??_time_difference+2,w,c
   910  00159A  240B               	addwf	??_time_difference,w,c
   911  00159C  6E01               	movwf	___wmul@multiplier,c
   912  00159E  0E00               	movlw	0
   913  0015A0  200C               	addwfc	??_time_difference+1,w,c
   914  0015A2  6E02               	movwf	___wmul@multiplier+1,c
   915  0015A4  0E00               	movlw	0
   916  0015A6  6E04               	movwf	___wmul@multiplicand+1,c
   917  0015A8  0E3C               	movlw	60
   918  0015AA  6E03               	movwf	___wmul@multiplicand,c
   919  0015AC  ECCF  F00C         	call	___wmul	;wreg free
   920  0015B0  5001               	movf	?___wmul,w,c
   921  0015B2  260F               	addwf	time_difference@sec,f,c
   922  0015B4  5002               	movf	?___wmul+1,w,c
   923  0015B6  2210               	addwfc	time_difference@sec+1,f,c
   924                           
   925                           ;main.c: 164: sec += ((int)time1[0] - (int)time2[0]);
   926  0015B8  C009  FFD9         	movff	time_difference@time2,fsr2l
   927  0015BC  C00A  FFDA         	movff	time_difference@time2+1,fsr2h
   928  0015C0  50DF               	movf	indf2,w,c
   929  0015C2  6E0B               	movwf	??_time_difference& (0+255),c
   930  0015C4  6A0C               	clrf	(??_time_difference+1)& (0+255),c
   931  0015C6  1E0B               	comf	??_time_difference,f,c
   932  0015C8  1E0C               	comf	??_time_difference+1,f,c
   933  0015CA  4A0B               	infsnz	??_time_difference,f,c
   934  0015CC  2A0C               	incf	??_time_difference+1,f,c
   935  0015CE  C007  FFD9         	movff	time_difference@time1,fsr2l
   936  0015D2  C008  FFDA         	movff	time_difference@time1+1,fsr2h
   937  0015D6  50DF               	movf	indf2,w,c
   938  0015D8  6E0D               	movwf	(??_time_difference+2)& (0+255),c
   939  0015DA  6A0E               	clrf	(??_time_difference+3)& (0+255),c
   940  0015DC  500B               	movf	??_time_difference,w,c
   941  0015DE  260D               	addwf	??_time_difference+2,f,c
   942  0015E0  500C               	movf	??_time_difference+1,w,c
   943  0015E2  220E               	addwfc	??_time_difference+3,f,c
   944  0015E4  500D               	movf	??_time_difference+2,w,c
   945  0015E6  260F               	addwf	time_difference@sec,f,c
   946  0015E8  500E               	movf	??_time_difference+3,w,c
   947  0015EA  2210               	addwfc	time_difference@sec+1,f,c
   948                           
   949                           ;main.c: 165: return sec;
   950  0015EC  C00F  F007         	movff	time_difference@sec,?_time_difference
   951  0015F0  C010  F008         	movff	time_difference@sec+1,?_time_difference+1
   952  0015F4  0012               	return	
   953  0015F6                     __end_of_time_difference:
   954                           	opt stack 0
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           tblptrl	equ	0xFF6
   958                           tablat	equ	0xFF5
   959                           intcon2	equ	0xFF1
   960                           indf2	equ	0xFDF
   961                           fsr2h	equ	0xFDA
   962                           fsr2l	equ	0xFD9
   963                           status	equ	0xFD8
   964                           
   965 ;; *************** function _stand_by *****************
   966 ;; Defined at:
   967 ;;		line 123 in file "main.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  time            2   34[COMRAM] PTR unsigned char 
   970 ;;		 -> main@time(7), 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;		None
   973 ;; Return value:  Size  Location     Type
   974 ;;                  1    wreg      void 
   975 ;; Registers used:
   976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;Total ram usage:        5 bytes
   987 ;; Hardware stack levels used:    1
   988 ;; Hardware stack levels required when called:    3
   989 ;; This function calls:
   990 ;;		_lcdInst
   991 ;;		_printf
   992 ;;		_update_time
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text2
   999  0015F6                     __ptext2:
  1000                           	opt stack 0
  1001  0015F6                     _stand_by:
  1002                           	opt stack 27
  1003                           
  1004                           ;main.c: 125: update_time(time);
  1005                           
  1006                           ;incstack = 0
  1007  0015F6  C023  F004         	movff	stand_by@time,update_time@time
  1008  0015FA  C024  F005         	movff	stand_by@time+1,update_time@time+1
  1009  0015FE  EC9D  F00B         	call	_update_time	;wreg free
  1010                           
  1011                           ;main.c: 127: lcdInst(0b10000000);;
  1012  001602  0E80               	movlw	128
  1013  001604  EC00  F00D         	call	_lcdInst
  1014                           
  1015                           ;main.c: 128: printf("%02x/%02x/%02x '#' to", time[6],time[5],time[4]);
  1016  001608  0E41               	movlw	low STR_6
  1017  00160A  6E0D               	movwf	printf@f,c
  1018  00160C  0E10               	movlw	high STR_6
  1019  00160E  6E0E               	movwf	printf@f+1,c
  1020  001610  EE20 F006          	lfsr	2,6
  1021  001614  5023               	movf	stand_by@time,w,c
  1022  001616  26D9               	addwf	fsr2l,f,c
  1023  001618  5024               	movf	stand_by@time+1,w,c
  1024  00161A  22DA               	addwfc	fsr2h,f,c
  1025  00161C  50DF               	movf	indf2,w,c
  1026  00161E  6E25               	movwf	??_stand_by& (0+255),c
  1027  001620  5025               	movf	??_stand_by,w,c
  1028  001622  6E0F               	movwf	?_printf+2,c
  1029  001624  6A10               	clrf	?_printf+3,c
  1030  001626  EE20 F005          	lfsr	2,5
  1031  00162A  5023               	movf	stand_by@time,w,c
  1032  00162C  26D9               	addwf	fsr2l,f,c
  1033  00162E  5024               	movf	stand_by@time+1,w,c
  1034  001630  22DA               	addwfc	fsr2h,f,c
  1035  001632  50DF               	movf	indf2,w,c
  1036  001634  6E26               	movwf	(??_stand_by+1)& (0+255),c
  1037  001636  5026               	movf	??_stand_by+1,w,c
  1038  001638  6E11               	movwf	?_printf+4,c
  1039  00163A  6A12               	clrf	?_printf+5,c
  1040  00163C  EE20 F004          	lfsr	2,4
  1041  001640  5023               	movf	stand_by@time,w,c
  1042  001642  26D9               	addwf	fsr2l,f,c
  1043  001644  5024               	movf	stand_by@time+1,w,c
  1044  001646  22DA               	addwfc	fsr2h,f,c
  1045  001648  50DF               	movf	indf2,w,c
  1046  00164A  6E27               	movwf	(??_stand_by+2)& (0+255),c
  1047  00164C  5027               	movf	??_stand_by+2,w,c
  1048  00164E  6E13               	movwf	?_printf+6,c
  1049  001650  6A14               	clrf	?_printf+7,c
  1050  001652  EC51  F008         	call	_printf	;wreg free
  1051                           
  1052                           ;main.c: 129: lcdInst(0b11000000);;
  1053  001656  0EC0               	movlw	192
  1054  001658  EC00  F00D         	call	_lcdInst
  1055                           
  1056                           ;main.c: 130: printf("%02x:%02x:%02x Start!", time[2],time[1],time[0]);
  1057  00165C  0E2B               	movlw	low STR_7
  1058  00165E  6E0D               	movwf	printf@f,c
  1059  001660  0E10               	movlw	high STR_7
  1060  001662  6E0E               	movwf	printf@f+1,c
  1061  001664  EE20 F002          	lfsr	2,2
  1062  001668  5023               	movf	stand_by@time,w,c
  1063  00166A  26D9               	addwf	fsr2l,f,c
  1064  00166C  5024               	movf	stand_by@time+1,w,c
  1065  00166E  22DA               	addwfc	fsr2h,f,c
  1066  001670  50DF               	movf	indf2,w,c
  1067  001672  6E25               	movwf	??_stand_by& (0+255),c
  1068  001674  5025               	movf	??_stand_by,w,c
  1069  001676  6E0F               	movwf	?_printf+2,c
  1070  001678  6A10               	clrf	?_printf+3,c
  1071  00167A  EE20 F001          	lfsr	2,1
  1072  00167E  5023               	movf	stand_by@time,w,c
  1073  001680  26D9               	addwf	fsr2l,f,c
  1074  001682  5024               	movf	stand_by@time+1,w,c
  1075  001684  22DA               	addwfc	fsr2h,f,c
  1076  001686  50DF               	movf	indf2,w,c
  1077  001688  6E26               	movwf	(??_stand_by+1)& (0+255),c
  1078  00168A  5026               	movf	??_stand_by+1,w,c
  1079  00168C  6E11               	movwf	?_printf+4,c
  1080  00168E  6A12               	clrf	?_printf+5,c
  1081  001690  C023  FFD9         	movff	stand_by@time,fsr2l
  1082  001694  C024  FFDA         	movff	stand_by@time+1,fsr2h
  1083  001698  50DF               	movf	indf2,w,c
  1084  00169A  6E27               	movwf	(??_stand_by+2)& (0+255),c
  1085  00169C  5027               	movf	??_stand_by+2,w,c
  1086  00169E  6E13               	movwf	?_printf+6,c
  1087  0016A0  6A14               	clrf	?_printf+7,c
  1088  0016A2  EC51  F008         	call	_printf	;wreg free
  1089                           
  1090                           ;main.c: 131: _delay((unsigned long)((10)*(8000000/4000.0)));
  1091  0016A6  0E1A               	movlw	26
  1092  0016A8  6E25               	movwf	??_stand_by& (0+255),c
  1093  0016AA  0EF8               	movlw	248
  1094  0016AC                     u987:
  1095  0016AC  2EE8               	decfsz	wreg,f,c
  1096  0016AE  D7FE               	bra	u987
  1097  0016B0  2E25               	decfsz	??_stand_by& (0+255),f,c
  1098  0016B2  D7FC               	bra	u987
  1099  0016B4  D000               	nop2	
  1100  0016B6  0012               	return		;funcret
  1101  0016B8                     __end_of_stand_by:
  1102                           	opt stack 0
  1103                           tblptru	equ	0xFF8
  1104                           tblptrh	equ	0xFF7
  1105                           tblptrl	equ	0xFF6
  1106                           tablat	equ	0xFF5
  1107                           intcon2	equ	0xFF1
  1108                           wreg	equ	0xFE8
  1109                           indf2	equ	0xFDF
  1110                           fsr2h	equ	0xFDA
  1111                           fsr2l	equ	0xFD9
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function _update_time *****************
  1115 ;; Defined at:
  1116 ;;		line 134 in file "main.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  time            2    3[COMRAM] PTR unsigned char 
  1119 ;;		 -> main@end_time(7), main@start_time(7), main@time(7), 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  i               1    5[COMRAM] unsigned char 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      void 
  1124 ;; Registers used:
  1125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;Total ram usage:        3 bytes
  1136 ;; Hardware stack levels used:    1
  1137 ;; Hardware stack levels required when called:    2
  1138 ;; This function calls:
  1139 ;;		_I2C_Master_Read
  1140 ;;		_I2C_Master_Start
  1141 ;;		_I2C_Master_Stop
  1142 ;;		_I2C_Master_Write
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;;		_stand_by
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text3
  1150  00173A                     __ptext3:
  1151                           	opt stack 0
  1152  00173A                     _update_time:
  1153                           	opt stack 28
  1154                           
  1155                           ;main.c: 137: I2C_Master_Start();
  1156                           
  1157                           ;incstack = 0
  1158  00173A  EC14  F00D         	call	_I2C_Master_Start	;wreg free
  1159                           
  1160                           ;main.c: 138: I2C_Master_Write(0b11010000);
  1161  00173E  0E00               	movlw	0
  1162  001740  6E03               	movwf	I2C_Master_Write@d+1,c
  1163  001742  0ED0               	movlw	208
  1164  001744  6E02               	movwf	I2C_Master_Write@d,c
  1165  001746  EC0B  F00D         	call	_I2C_Master_Write	;wreg free
  1166                           
  1167                           ;main.c: 139: I2C_Master_Write(0x00);
  1168  00174A  0E00               	movlw	0
  1169  00174C  6E03               	movwf	I2C_Master_Write@d+1,c
  1170  00174E  0E00               	movlw	0
  1171  001750  6E02               	movwf	I2C_Master_Write@d,c
  1172  001752  EC0B  F00D         	call	_I2C_Master_Write	;wreg free
  1173                           
  1174                           ;main.c: 140: I2C_Master_Stop();
  1175  001756  EC10  F00D         	call	_I2C_Master_Stop	;wreg free
  1176                           
  1177                           ;main.c: 143: I2C_Master_Start();
  1178  00175A  EC14  F00D         	call	_I2C_Master_Start	;wreg free
  1179                           
  1180                           ;main.c: 144: I2C_Master_Write(0b11010001);
  1181  00175E  0E00               	movlw	0
  1182  001760  6E03               	movwf	I2C_Master_Write@d+1,c
  1183  001762  0ED1               	movlw	209
  1184  001764  6E02               	movwf	I2C_Master_Write@d,c
  1185  001766  EC0B  F00D         	call	_I2C_Master_Write	;wreg free
  1186                           
  1187                           ;main.c: 145: for(unsigned char i=0;i<0x06;i++){
  1188  00176A  0E00               	movlw	0
  1189  00176C  6E06               	movwf	update_time@i,c
  1190  00176E                     l1363:
  1191  00176E  0E05               	movlw	5
  1192  001770  6406               	cpfsgt	update_time@i,c
  1193  001772  D001               	goto	l1367
  1194  001774  D00E               	goto	l1373
  1195  001776                     l1367:
  1196                           
  1197                           ;main.c: 146: time[i] = I2C_Master_Read(1);
  1198  001776  5006               	movf	update_time@i,w,c
  1199  001778  0D01               	mullw	1
  1200  00177A  50F3               	movf	prodl,w,c
  1201  00177C  2404               	addwf	update_time@time,w,c
  1202  00177E  6ED9               	movwf	fsr2l,c
  1203  001780  50F4               	movf	prodh,w,c
  1204  001782  2005               	addwfc	update_time@time+1,w,c
  1205  001784  6EDA               	movwf	fsr2h,c
  1206  001786  0E01               	movlw	1
  1207  001788  ECBC  F00C         	call	_I2C_Master_Read
  1208  00178C  6EDF               	movwf	indf2,c
  1209  00178E  2A06               	incf	update_time@i,f,c
  1210  001790  D7EE               	goto	l1363
  1211  001792                     l1373:
  1212                           
  1213                           ;main.c: 147: }
  1214                           ;main.c: 149: time[6] = I2C_Master_Read(0);
  1215  001792  EE20 F006          	lfsr	2,6
  1216  001796  5004               	movf	update_time@time,w,c
  1217  001798  26D9               	addwf	fsr2l,f,c
  1218  00179A  5005               	movf	update_time@time+1,w,c
  1219  00179C  22DA               	addwfc	fsr2h,f,c
  1220  00179E  0E00               	movlw	0
  1221  0017A0  ECBC  F00C         	call	_I2C_Master_Read
  1222  0017A4  6EDF               	movwf	indf2,c
  1223                           
  1224                           ;main.c: 150: I2C_Master_Stop();
  1225  0017A6  EC10  F00D         	call	_I2C_Master_Stop	;wreg free
  1226  0017AA  0012               	return		;funcret
  1227  0017AC                     __end_of_update_time:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           prodh	equ	0xFF4
  1234                           prodl	equ	0xFF3
  1235                           intcon2	equ	0xFF1
  1236                           wreg	equ	0xFE8
  1237                           indf2	equ	0xFDF
  1238                           fsr2h	equ	0xFDA
  1239                           fsr2l	equ	0xFD9
  1240                           status	equ	0xFD8
  1241                           
  1242 ;; *************** function _I2C_Master_Write *****************
  1243 ;; Defined at:
  1244 ;;		line 47 in file "I2C.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  d               2    1[COMRAM] unsigned int 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;Total ram usage:        2 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    1
  1265 ;; This function calls:
  1266 ;;		_I2C_Master_Wait
  1267 ;; This function is called by:
  1268 ;;		_update_time
  1269 ;;		_set_time
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           	psect	text4
  1274  001A16                     __ptext4:
  1275                           	opt stack 0
  1276  001A16                     _I2C_Master_Write:
  1277                           	opt stack 28
  1278                           
  1279                           ;I2C.c: 49: I2C_Master_Wait();
  1280                           
  1281                           ;incstack = 0
  1282  001A16  ECF1  F00C         	call	_I2C_Master_Wait	;wreg free
  1283                           
  1284                           ;I2C.c: 50: SSPBUF = d;
  1285  001A1A  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1286  001A1E  0012               	return		;funcret
  1287  001A20                     __end_of_I2C_Master_Write:
  1288                           	opt stack 0
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           prodh	equ	0xFF4
  1294                           prodl	equ	0xFF3
  1295                           intcon2	equ	0xFF1
  1296                           wreg	equ	0xFE8
  1297                           indf2	equ	0xFDF
  1298                           fsr2h	equ	0xFDA
  1299                           fsr2l	equ	0xFD9
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _I2C_Master_Stop *****************
  1303 ;; Defined at:
  1304 ;;		line 41 in file "I2C.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2   52[None  ] int 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    1
  1325 ;; This function calls:
  1326 ;;		_I2C_Master_Wait
  1327 ;; This function is called by:
  1328 ;;		_update_time
  1329 ;;		_set_time
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text5
  1334  001A20                     __ptext5:
  1335                           	opt stack 0
  1336  001A20                     _I2C_Master_Stop:
  1337                           	opt stack 28
  1338                           
  1339                           ;I2C.c: 43: I2C_Master_Wait();
  1340                           
  1341                           ;incstack = 0
  1342  001A20  ECF1  F00C         	call	_I2C_Master_Wait	;wreg free
  1343                           
  1344                           ;I2C.c: 44: PEN = 1;
  1345  001A24  84C5               	bsf	4037,2,c	;volatile
  1346  001A26  0012               	return		;funcret
  1347  001A28                     __end_of_I2C_Master_Stop:
  1348                           	opt stack 0
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           prodh	equ	0xFF4
  1354                           prodl	equ	0xFF3
  1355                           intcon2	equ	0xFF1
  1356                           wreg	equ	0xFE8
  1357                           indf2	equ	0xFDF
  1358                           fsr2h	equ	0xFDA
  1359                           fsr2l	equ	0xFD9
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _I2C_Master_Start *****************
  1363 ;; Defined at:
  1364 ;;		line 29 in file "I2C.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;		None
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  2   48[None  ] int 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0, cstack
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;Total ram usage:        0 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    1
  1385 ;; This function calls:
  1386 ;;		_I2C_Master_Wait
  1387 ;; This function is called by:
  1388 ;;		_update_time
  1389 ;;		_set_time
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text6
  1394  001A28                     __ptext6:
  1395                           	opt stack 0
  1396  001A28                     _I2C_Master_Start:
  1397                           	opt stack 28
  1398                           
  1399                           ;I2C.c: 31: I2C_Master_Wait();
  1400                           
  1401                           ;incstack = 0
  1402  001A28  ECF1  F00C         	call	_I2C_Master_Wait	;wreg free
  1403                           
  1404                           ;I2C.c: 32: SEN = 1;
  1405  001A2C  80C5               	bsf	4037,0,c	;volatile
  1406  001A2E  0012               	return		;funcret
  1407  001A30                     __end_of_I2C_Master_Start:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           prodh	equ	0xFF4
  1414                           prodl	equ	0xFF3
  1415                           intcon2	equ	0xFF1
  1416                           wreg	equ	0xFE8
  1417                           indf2	equ	0xFDF
  1418                           fsr2h	equ	0xFDA
  1419                           fsr2l	equ	0xFD9
  1420                           status	equ	0xFD8
  1421                           
  1422 ;; *************** function _I2C_Master_Read *****************
  1423 ;; Defined at:
  1424 ;;		line 53 in file "I2C.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  a               1    wreg     unsigned char 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  a               1    1[COMRAM] unsigned char 
  1429 ;;  temp            1    2[COMRAM] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      unsigned char 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;Total ram usage:        2 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    1
  1446 ;; This function calls:
  1447 ;;		_I2C_Master_Wait
  1448 ;; This function is called by:
  1449 ;;		_update_time
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text7
  1454  001978                     __ptext7:
  1455                           	opt stack 0
  1456  001978                     _I2C_Master_Read:
  1457                           	opt stack 28
  1458                           
  1459                           ;incstack = 0
  1460                           ;I2C_Master_Read@a stored from wreg
  1461  001978  6E02               	movwf	I2C_Master_Read@a,c
  1462                           
  1463                           ;I2C.c: 55: unsigned char temp;
  1464                           ;I2C.c: 56: I2C_Master_Wait();
  1465  00197A  ECF1  F00C         	call	_I2C_Master_Wait	;wreg free
  1466                           
  1467                           ;I2C.c: 57: RCEN = 1;
  1468  00197E  86C5               	bsf	4037,3,c	;volatile
  1469                           
  1470                           ;I2C.c: 58: I2C_Master_Wait();
  1471  001980  ECF1  F00C         	call	_I2C_Master_Wait	;wreg free
  1472                           
  1473                           ;I2C.c: 59: temp = SSPBUF;
  1474  001984  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  1475                           
  1476                           ;I2C.c: 60: I2C_Master_Wait();
  1477  001988  ECF1  F00C         	call	_I2C_Master_Wait	;wreg free
  1478                           
  1479                           ;I2C.c: 61: ACKDT = (a)?0:1;
  1480  00198C  5002               	movf	I2C_Master_Read@a,w,c
  1481  00198E  A4D8               	btfss	status,2,c
  1482  001990  D002               	goto	u30
  1483  001992  8AC5               	bsf	4037,5,c	;volatile
  1484  001994  D001               	goto	l903
  1485  001996                     u30:
  1486  001996  9AC5               	bcf	4037,5,c	;volatile
  1487  001998                     l903:
  1488                           
  1489                           ;I2C.c: 62: ACKEN = 1;
  1490  001998  88C5               	bsf	4037,4,c	;volatile
  1491                           
  1492                           ;I2C.c: 63: return temp;
  1493  00199A  5003               	movf	I2C_Master_Read@temp,w,c
  1494  00199C  0012               	return	
  1495  00199E                     __end_of_I2C_Master_Read:
  1496                           	opt stack 0
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           prodh	equ	0xFF4
  1502                           prodl	equ	0xFF3
  1503                           intcon2	equ	0xFF1
  1504                           wreg	equ	0xFE8
  1505                           indf2	equ	0xFDF
  1506                           fsr2h	equ	0xFDA
  1507                           fsr2l	equ	0xFD9
  1508                           status	equ	0xFD8
  1509                           
  1510 ;; *************** function _I2C_Master_Wait *****************
  1511 ;; Defined at:
  1512 ;;		line 24 in file "I2C.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1529 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;Total ram usage:        1 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_I2C_Master_Start
  1536 ;;		_I2C_Master_Stop
  1537 ;;		_I2C_Master_Write
  1538 ;;		_I2C_Master_Read
  1539 ;;		_I2C_Master_RepeatedStart
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text8
  1544  0019E2                     __ptext8:
  1545                           	opt stack 0
  1546  0019E2                     _I2C_Master_Wait:
  1547                           	opt stack 28
  1548  0019E2                     l149:
  1549  0019E2  B4C7               	btfsc	4039,2,c	;volatile
  1550  0019E4  D7FE               	goto	l149
  1551  0019E6  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1552  0019EA  0E1F               	movlw	31
  1553  0019EC  1601               	andwf	??_I2C_Master_Wait,f,c
  1554  0019EE  B4D8               	btfsc	status,2,c
  1555  0019F0  0012               	return	
  1556  0019F2  D7F7               	goto	l149
  1557  0019F4                     __end_of_I2C_Master_Wait:
  1558                           	opt stack 0
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           prodh	equ	0xFF4
  1564                           prodl	equ	0xFF3
  1565                           intcon2	equ	0xFF1
  1566                           wreg	equ	0xFE8
  1567                           indf2	equ	0xFDF
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _printf *****************
  1573 ;; Defined at:
  1574 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1577 ;;		 -> STR_7(22), STR_6(22), STR_5(3), STR_4(12), 
  1578 ;;		 -> STR_3(11), STR_2(15), STR_1(15), 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  idx             1   24[COMRAM] unsigned char 
  1581 ;;  tmpval          4    0        struct .
  1582 ;;  cp              3    0        PTR const unsigned char 
  1583 ;;  width           2   31[COMRAM] int 
  1584 ;;  val             2   28[COMRAM] unsigned int 
  1585 ;;  ap              2   25[COMRAM] PTR void [1]
  1586 ;;		 -> ?_printf(2), 
  1587 ;;  len             2    0        unsigned int 
  1588 ;;  c               1   33[COMRAM] char 
  1589 ;;  flag            1   30[COMRAM] unsigned char 
  1590 ;;  prec            1   27[COMRAM] char 
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  2   12[COMRAM] int 
  1593 ;; Registers used:
  1594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1600 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;Total ram usage:       22 bytes
  1605 ;; Hardware stack levels used:    1
  1606 ;; Hardware stack levels required when called:    2
  1607 ;; This function calls:
  1608 ;;		___lwdiv
  1609 ;;		___lwmod
  1610 ;;		___wmul
  1611 ;;		_isdigit
  1612 ;;		_putch
  1613 ;; This function is called by:
  1614 ;;		_main
  1615 ;;		_stand_by
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text9
  1620  0010A2                     __ptext9:
  1621                           	opt stack 0
  1622  0010A2                     _printf:
  1623                           	opt stack 27
  1624                           
  1625                           ;doprnt.c: 466: va_list ap;
  1626                           ;doprnt.c: 499: signed char c;
  1627                           ;doprnt.c: 501: int width;
  1628                           ;doprnt.c: 506: signed char prec;
  1629                           ;doprnt.c: 508: unsigned char flag;
  1630                           ;doprnt.c: 523: union {
  1631                           ;doprnt.c: 524: unsigned long vd;
  1632                           ;doprnt.c: 525: double integ;
  1633                           ;doprnt.c: 526: } tmpval;
  1634                           ;doprnt.c: 528: unsigned int val;
  1635                           ;doprnt.c: 529: unsigned len;
  1636                           ;doprnt.c: 530: const char * cp;
  1637                           ;doprnt.c: 533: *ap = __va_start();
  1638                           
  1639                           ;incstack = 0
  1640  0010A2  0E0F               	movlw	low (?_printf+2)
  1641  0010A4  6E1A               	movwf	printf@ap,c
  1642  0010A6  0E00               	movlw	high (?_printf+2)
  1643  0010A8  6E1B               	movwf	printf@ap+1,c
  1644                           
  1645                           ;doprnt.c: 536: while(c = *f++) {
  1646  0010AA  D174               	goto	l1505
  1647  0010AC                     l1379:
  1648                           
  1649                           ;doprnt.c: 538: if(c != '%')
  1650  0010AC  0E25               	movlw	37
  1651  0010AE  1822               	xorwf	printf@c,w,c
  1652  0010B0  B4D8               	btfsc	status,2,c
  1653  0010B2  D004               	goto	l1383
  1654                           
  1655                           ;doprnt.c: 540: {
  1656                           ;doprnt.c: 541: (putch(c) );
  1657  0010B4  5022               	movf	printf@c,w,c
  1658  0010B6  ECFA  F00C         	call	_putch
  1659                           
  1660                           ;doprnt.c: 542: continue;
  1661  0010BA  D16C               	goto	l1505
  1662  0010BC                     l1383:
  1663                           
  1664                           ;doprnt.c: 543: }
  1665                           ;doprnt.c: 546: width = 0;
  1666  0010BC  0E00               	movlw	0
  1667  0010BE  6E21               	movwf	printf@width+1,c
  1668  0010C0  0E00               	movlw	0
  1669  0010C2  6E20               	movwf	printf@width,c
  1670                           
  1671                           ;doprnt.c: 548: flag = 0;
  1672  0010C4  0E00               	movlw	0
  1673  0010C6  6E1F               	movwf	printf@flag,c
  1674                           
  1675                           ;doprnt.c: 551: switch(*f) {
  1676                           
  1677                           ;doprnt.c: 550: for(;;) {
  1678  0010C8  D003               	goto	l1389
  1679  0010CA                     l1385:
  1680                           
  1681                           ;doprnt.c: 580: flag |= 0x04;
  1682  0010CA  841F               	bsf	printf@flag,2,c
  1683                           
  1684                           ;doprnt.c: 581: f++;
  1685  0010CC  4A0D               	infsnz	printf@f,f,c
  1686  0010CE  2A0E               	incf	printf@f+1,f,c
  1687  0010D0                     l1389:
  1688  0010D0  C00D  FFF6         	movff	printf@f,tblptrl
  1689  0010D4  C00E  FFF7         	movff	printf@f+1,tblptrh
  1690  0010D8                     	if	0	;tblptru may be non-zero
  1691  0010D8                     	endif
  1692  0010D8                     	if	0	;tblptru may be non-zero
  1693  0010D8                     	endif
  1694  0010D8  0008               	tblrd		*
  1695  0010DA  50F5               	movf	tablat,w,c
  1696                           
  1697                           ; Switch size 1, requested type "space"
  1698                           ; Number of cases is 1, Range of values is 48 to 48
  1699                           ; switch strategies available:
  1700                           ; Name         Instructions Cycles
  1701                           ; simple_byte            4     3 (average)
  1702                           ;	Chosen strategy is simple_byte
  1703  0010DC  0A30               	xorlw	48	; case 48
  1704  0010DE  B4D8               	btfsc	status,2,c
  1705  0010E0  D7F4               	goto	l1385
  1706                           
  1707                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1708                           
  1709                           ;doprnt.c: 586: }
  1710                           
  1711                           ;doprnt.c: 585: break;
  1712  0010E2  C00D  FFF6         	movff	printf@f,tblptrl
  1713  0010E6  C00E  FFF7         	movff	printf@f+1,tblptrh
  1714  0010EA                     	if	0	;tblptru may be non-zero
  1715  0010EA                     	endif
  1716  0010EA                     	if	0	;tblptru may be non-zero
  1717  0010EA                     	endif
  1718  0010EA  0008               	tblrd		*
  1719  0010EC  50F5               	movf	tablat,w,c
  1720  0010EE  ECE2  F00C         	call	_isdigit
  1721  0010F2  A0D8               	btfss	status,0,c
  1722  0010F4  D035               	goto	l1407
  1723                           
  1724                           ;doprnt.c: 598: width = 0;
  1725  0010F6  0E00               	movlw	0
  1726  0010F8  6E21               	movwf	printf@width+1,c
  1727  0010FA  0E00               	movlw	0
  1728  0010FC  6E20               	movwf	printf@width,c
  1729  0010FE                     l1395:
  1730                           
  1731                           ;doprnt.c: 600: width *= 10;
  1732  0010FE  C020  F001         	movff	printf@width,___wmul@multiplier
  1733  001102  C021  F002         	movff	printf@width+1,___wmul@multiplier+1
  1734  001106  0E00               	movlw	0
  1735  001108  6E04               	movwf	___wmul@multiplicand+1,c
  1736  00110A  0E0A               	movlw	10
  1737  00110C  6E03               	movwf	___wmul@multiplicand,c
  1738  00110E  ECCF  F00C         	call	___wmul	;wreg free
  1739  001112  C001  F020         	movff	?___wmul,printf@width
  1740  001116  C002  F021         	movff	?___wmul+1,printf@width+1
  1741                           
  1742                           ;doprnt.c: 601: width += *f++ - '0';
  1743  00111A  0ED0               	movlw	208
  1744  00111C  6E15               	movwf	??_printf& (0+255),c
  1745  00111E  0EFF               	movlw	255
  1746  001120  6E16               	movwf	(??_printf+1)& (0+255),c
  1747  001122  C00D  FFF6         	movff	printf@f,tblptrl
  1748  001126  C00E  FFF7         	movff	printf@f+1,tblptrh
  1749  00112A                     	if	0	;tblptru may be non-zero
  1750  00112A                     	endif
  1751  00112A                     	if	0	;tblptru may be non-zero
  1752  00112A                     	endif
  1753  00112A  0008               	tblrd		*
  1754  00112C  50F5               	movf	tablat,w,c
  1755  00112E  6E17               	movwf	(??_printf+2)& (0+255),c
  1756  001130  6A18               	clrf	(??_printf+3)& (0+255),c
  1757  001132  5015               	movf	??_printf,w,c
  1758  001134  2617               	addwf	??_printf+2,f,c
  1759  001136  5016               	movf	??_printf+1,w,c
  1760  001138  2218               	addwfc	??_printf+3,f,c
  1761  00113A  5017               	movf	??_printf+2,w,c
  1762  00113C  2620               	addwf	printf@width,f,c
  1763  00113E  5018               	movf	??_printf+3,w,c
  1764  001140  2221               	addwfc	printf@width+1,f,c
  1765  001142  4A0D               	infsnz	printf@f,f,c
  1766  001144  2A0E               	incf	printf@f+1,f,c
  1767                           
  1768                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1769  001146  C00D  FFF6         	movff	printf@f,tblptrl
  1770  00114A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1771  00114E                     	if	0	;tblptru may be non-zero
  1772  00114E                     	endif
  1773  00114E                     	if	0	;tblptru may be non-zero
  1774  00114E                     	endif
  1775  00114E  0008               	tblrd		*
  1776  001150  50F5               	movf	tablat,w,c
  1777  001152  ECE2  F00C         	call	_isdigit
  1778  001156  A0D8               	btfss	status,0,c
  1779  001158  D003               	goto	l1407
  1780  00115A  D7D1               	goto	l1395
  1781  00115C                     l1403:
  1782                           
  1783                           ;doprnt.c: 721: flag |= 0x80;
  1784  00115C  8E1F               	bsf	printf@flag,7,c
  1785                           
  1786                           ;doprnt.c: 723: break;
  1787  00115E  D017               	goto	l205
  1788  001160                     l1407:
  1789  001160  C00D  FFF6         	movff	printf@f,tblptrl
  1790  001164  C00E  FFF7         	movff	printf@f+1,tblptrh
  1791  001168  4A0D               	infsnz	printf@f,f,c
  1792  00116A  2A0E               	incf	printf@f+1,f,c
  1793  00116C                     	if	0	;tblptru may be non-zero
  1794  00116C                     	endif
  1795  00116C                     	if	0	;tblptru may be non-zero
  1796  00116C                     	endif
  1797  00116C  0008               	tblrd		*
  1798  00116E  CFF5 F022          	movff	tablat,printf@c
  1799  001172  5022               	movf	printf@c,w,c
  1800                           
  1801                           ; Switch size 1, requested type "space"
  1802                           ; Number of cases is 4, Range of values is 0 to 120
  1803                           ; switch strategies available:
  1804                           ; Name         Instructions Cycles
  1805                           ; simple_byte           13     7 (average)
  1806                           ;	Chosen strategy is simple_byte
  1807  001174  0A00               	xorlw	0	; case 0
  1808  001176  B4D8               	btfsc	status,2,c
  1809  001178  0012               	return	
  1810  00117A  0A64               	xorlw	100	; case 100
  1811  00117C  B4D8               	btfsc	status,2,c
  1812  00117E  D007               	goto	l205
  1813  001180  0A0D               	xorlw	13	; case 105
  1814  001182  B4D8               	btfsc	status,2,c
  1815  001184  D004               	goto	l205
  1816  001186  0A11               	xorlw	17	; case 120
  1817  001188  B4D8               	btfsc	status,2,c
  1818  00118A  D7E8               	goto	l1403
  1819  00118C  D103               	goto	l1505
  1820  00118E                     l205:
  1821                           
  1822                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1823  00118E  BE1F               	btfsc	printf@flag,7,c
  1824  001190  D015               	goto	l1419
  1825                           
  1826                           ;doprnt.c: 1253: {
  1827                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1828  001192  C01A  FFD9         	movff	printf@ap,fsr2l
  1829  001196  C01B  FFDA         	movff	printf@ap+1,fsr2h
  1830  00119A  CFDE F01D          	movff	postinc2,printf@val
  1831  00119E  CFDD F01E          	movff	postdec2,printf@val+1
  1832  0011A2  0E02               	movlw	2
  1833  0011A4  261A               	addwf	printf@ap,f,c
  1834  0011A6  0E00               	movlw	0
  1835  0011A8  221B               	addwfc	printf@ap+1,f,c
  1836                           
  1837                           ;doprnt.c: 1261: if((int)val < 0) {
  1838  0011AA  AE1E               	btfss	printf@val+1,7,c
  1839  0011AC  D044               	goto	l1453
  1840                           
  1841                           ;doprnt.c: 1262: flag |= 0x03;
  1842  0011AE  0E03               	movlw	3
  1843  0011B0  121F               	iorwf	printf@flag,f,c
  1844                           
  1845                           ;doprnt.c: 1263: val = -val;
  1846  0011B2  6C1D               	negf	printf@val,c
  1847  0011B4  1E1E               	comf	printf@val+1,f,c
  1848  0011B6  B0D8               	btfsc	status,0,c
  1849  0011B8  2A1E               	incf	printf@val+1,f,c
  1850                           
  1851                           ;doprnt.c: 1264: }
  1852                           ;doprnt.c: 1266: }
  1853  0011BA  D03D               	goto	l1453
  1854  0011BC                     l1419:
  1855                           
  1856                           ;doprnt.c: 1268: else
  1857                           ;doprnt.c: 1273: {
  1858                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1859  0011BC  C01A  FFD9         	movff	printf@ap,fsr2l
  1860  0011C0  C01B  FFDA         	movff	printf@ap+1,fsr2h
  1861  0011C4  CFDE F01D          	movff	postinc2,printf@val
  1862  0011C8  CFDD F01E          	movff	postdec2,printf@val+1
  1863  0011CC  0E02               	movlw	2
  1864  0011CE  261A               	addwf	printf@ap,f,c
  1865  0011D0  0E00               	movlw	0
  1866  0011D2  221B               	addwfc	printf@ap+1,f,c
  1867                           
  1868                           ;doprnt.c: 1287: }
  1869                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1870  0011D4  D030               	goto	l1453
  1871  0011D6                     l1423:
  1872                           
  1873                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1874  0011D6  0E01               	movlw	1
  1875  0011D8  6E22               	movwf	printf@c,c
  1876  0011DA                     l1425:
  1877  0011DA  0E05               	movlw	5
  1878  0011DC  1822               	xorwf	printf@c,w,c
  1879  0011DE  B4D8               	btfsc	status,2,c
  1880  0011E0  D032               	goto	l1455
  1881                           
  1882                           ;doprnt.c: 1306: if(val < dpowers[c])
  1883  0011E2  5022               	movf	printf@c,w,c
  1884  0011E4  0D02               	mullw	2
  1885  0011E6  0E12               	movlw	low _dpowers
  1886  0011E8  24F3               	addwf	prodl,w,c
  1887  0011EA  6EF6               	movwf	tblptrl,c
  1888  0011EC  0E10               	movlw	high _dpowers
  1889  0011EE  20F4               	addwfc	prodh,w,c
  1890  0011F0  6EF7               	movwf	tblptrh,c
  1891  0011F2                     	if	0	;There are less than 3 active tblptr bytes
  1892  0011F2                     	endif
  1893  0011F2  0009               	tblrd		*+
  1894  0011F4  50F5               	movf	tablat,w,c
  1895  0011F6  5C1D               	subwf	printf@val,w,c
  1896  0011F8  0009               	tblrd		*+
  1897  0011FA  50F5               	movf	tablat,w,c
  1898  0011FC  581E               	subwfb	printf@val+1,w,c
  1899  0011FE  A0D8               	btfss	status,0,c
  1900  001200  D022               	goto	l1455
  1901                           
  1902                           ;doprnt.c: 1307: break;
  1903  001202  2A22               	incf	printf@c,f,c
  1904  001204  D7EA               	goto	l1425
  1905  001206                     l1437:
  1906                           
  1907                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1908  001206  0E01               	movlw	1
  1909  001208  6E22               	movwf	printf@c,c
  1910  00120A                     l1439:
  1911  00120A  0E04               	movlw	4
  1912  00120C  1822               	xorwf	printf@c,w,c
  1913  00120E  B4D8               	btfsc	status,2,c
  1914  001210  D01A               	goto	l1455
  1915                           
  1916                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1917  001212  5022               	movf	printf@c,w,c
  1918  001214  0D02               	mullw	2
  1919  001216  0E1C               	movlw	low _hexpowers
  1920  001218  24F3               	addwf	prodl,w,c
  1921  00121A  6EF6               	movwf	tblptrl,c
  1922  00121C  0E10               	movlw	high _hexpowers
  1923  00121E  20F4               	addwfc	prodh,w,c
  1924  001220  6EF7               	movwf	tblptrh,c
  1925  001222                     	if	0	;There are less than 3 active tblptr bytes
  1926  001222                     	endif
  1927  001222  0009               	tblrd		*+
  1928  001224  50F5               	movf	tablat,w,c
  1929  001226  5C1D               	subwf	printf@val,w,c
  1930  001228  0009               	tblrd		*+
  1931  00122A  50F5               	movf	tablat,w,c
  1932  00122C  581E               	subwfb	printf@val+1,w,c
  1933  00122E  A0D8               	btfss	status,0,c
  1934  001230  D00A               	goto	l1455
  1935                           
  1936                           ;doprnt.c: 1318: break;
  1937  001232  2A22               	incf	printf@c,f,c
  1938  001234  D7EA               	goto	l1439
  1939  001236                     l1453:
  1940  001236  501F               	movf	printf@flag,w,c
  1941  001238  0B80               	andlw	128
  1942                           
  1943                           ; Switch size 1, requested type "space"
  1944                           ; Number of cases is 2, Range of values is 0 to 128
  1945                           ; switch strategies available:
  1946                           ; Name         Instructions Cycles
  1947                           ; simple_byte            7     4 (average)
  1948                           ;	Chosen strategy is simple_byte
  1949  00123A  0A00               	xorlw	0	; case 0
  1950  00123C  B4D8               	btfsc	status,2,c
  1951  00123E  D7CB               	goto	l1423
  1952  001240  0A80               	xorlw	128	; case 128
  1953  001242  B4D8               	btfsc	status,2,c
  1954  001244  D7E0               	goto	l1437
  1955  001246                     l1455:
  1956                           
  1957                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1958  001246  5020               	movf	printf@width,w,c
  1959  001248  1021               	iorwf	printf@width+1,w,c
  1960  00124A  B4D8               	btfsc	status,2,c
  1961  00124C  D009               	goto	l1461
  1962  00124E  C01F  F015         	movff	printf@flag,??_printf
  1963  001252  0E03               	movlw	3
  1964  001254  1615               	andwf	??_printf,f,c
  1965  001256  B4D8               	btfsc	status,2,c
  1966  001258  D003               	goto	l1461
  1967                           
  1968                           ;doprnt.c: 1346: width--;
  1969  00125A  0620               	decf	printf@width,f,c
  1970  00125C  A0D8               	btfss	status,0,c
  1971  00125E  0621               	decf	printf@width+1,f,c
  1972  001260                     l1461:
  1973                           
  1974                           ;doprnt.c: 1381: if(width > c)
  1975  001260  0E80               	movlw	128
  1976  001262  BE22               	btfsc	printf@c,7,c
  1977  001264  0E7F               	movlw	127
  1978  001266  6E15               	movwf	??_printf& (0+255),c
  1979  001268  5020               	movf	printf@width,w,c
  1980  00126A  5C22               	subwf	printf@c,w,c
  1981  00126C  5021               	movf	printf@width+1,w,c
  1982  00126E  0A80               	xorlw	128
  1983  001270  5815               	subwfb	??_printf& (0+255),w,c
  1984  001272  B0D8               	btfsc	status,0,c
  1985  001274  D007               	goto	l1465
  1986                           
  1987                           ;doprnt.c: 1382: width -= c;
  1988  001276  5022               	movf	printf@c,w,c
  1989  001278  5E20               	subwf	printf@width,f,c
  1990  00127A  0E00               	movlw	0
  1991  00127C  BE22               	btfsc	printf@c,7,c
  1992  00127E  0EFF               	movlw	255
  1993  001280  5A21               	subwfb	printf@width+1,f,c
  1994  001282  D004               	goto	l1467
  1995  001284                     l1465:
  1996                           
  1997                           ;doprnt.c: 1383: else
  1998                           ;doprnt.c: 1384: width = 0;
  1999  001284  0E00               	movlw	0
  2000  001286  6E21               	movwf	printf@width+1,c
  2001  001288  0E00               	movlw	0
  2002  00128A  6E20               	movwf	printf@width,c
  2003  00128C                     l1467:
  2004                           
  2005                           ;doprnt.c: 1387: if(flag & 0x04) {
  2006  00128C  A41F               	btfss	printf@flag,2,c
  2007  00128E  D014               	goto	l1479
  2008                           
  2009                           ;doprnt.c: 1392: if(flag & 0x03)
  2010  001290  C01F  F015         	movff	printf@flag,??_printf
  2011  001294  0E03               	movlw	3
  2012  001296  1615               	andwf	??_printf,f,c
  2013  001298  B4D8               	btfsc	status,2,c
  2014  00129A  D003               	goto	l1473
  2015                           
  2016                           ;doprnt.c: 1393: (putch('-') );
  2017  00129C  0E2D               	movlw	45
  2018  00129E  ECFA  F00C         	call	_putch
  2019  0012A2                     l1473:
  2020                           
  2021                           ;doprnt.c: 1415: if(width)
  2022  0012A2  5020               	movf	printf@width,w,c
  2023  0012A4  1021               	iorwf	printf@width+1,w,c
  2024  0012A6  B4D8               	btfsc	status,2,c
  2025  0012A8  D01E               	goto	l1489
  2026                           
  2027                           ;doprnt.c: 1417: (putch('0') );
  2028                           
  2029                           ;doprnt.c: 1416: do
  2030  0012AA  0E30               	movlw	48
  2031  0012AC  ECFA  F00C         	call	_putch
  2032                           
  2033                           ;doprnt.c: 1418: while(--width);
  2034  0012B0  0620               	decf	printf@width,f,c
  2035  0012B2  A0D8               	btfss	status,0,c
  2036  0012B4  0621               	decf	printf@width+1,f,c
  2037  0012B6  D7F5               	goto	l1473
  2038  0012B8                     l1479:
  2039                           
  2040                           ;doprnt.c: 1422: {
  2041                           ;doprnt.c: 1424: if(width
  2042                           ;doprnt.c: 1428: )
  2043  0012B8  5020               	movf	printf@width,w,c
  2044  0012BA  1021               	iorwf	printf@width+1,w,c
  2045  0012BC  B4D8               	btfsc	status,2,c
  2046  0012BE  D00A               	goto	l1485
  2047  0012C0                     l1481:
  2048                           
  2049                           ;doprnt.c: 1430: (putch(' ') );
  2050  0012C0  0E20               	movlw	32
  2051  0012C2  ECFA  F00C         	call	_putch
  2052                           
  2053                           ;doprnt.c: 1431: while(--width);
  2054  0012C6  0620               	decf	printf@width,f,c
  2055  0012C8  A0D8               	btfss	status,0,c
  2056  0012CA  0621               	decf	printf@width+1,f,c
  2057  0012CC  5020               	movf	printf@width,w,c
  2058  0012CE  1021               	iorwf	printf@width+1,w,c
  2059  0012D0  A4D8               	btfss	status,2,c
  2060  0012D2  D7F6               	goto	l1481
  2061  0012D4                     l1485:
  2062                           
  2063                           ;doprnt.c: 1438: if(flag & 0x03)
  2064  0012D4  C01F  F015         	movff	printf@flag,??_printf
  2065  0012D8  0E03               	movlw	3
  2066  0012DA  1615               	andwf	??_printf,f,c
  2067  0012DC  B4D8               	btfsc	status,2,c
  2068  0012DE  D003               	goto	l1489
  2069                           
  2070                           ;doprnt.c: 1439: (putch('-') );
  2071  0012E0  0E2D               	movlw	45
  2072  0012E2  ECFA  F00C         	call	_putch
  2073  0012E6                     l1489:
  2074                           
  2075                           ;doprnt.c: 1469: }
  2076                           ;doprnt.c: 1472: prec = c;
  2077  0012E6  C022  F01C         	movff	printf@c,printf@prec
  2078                           
  2079                           ;doprnt.c: 1474: while(prec--) {
  2080  0012EA  D050               	goto	l1503
  2081  0012EC                     l1491:
  2082                           
  2083                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2084  0012EC  501C               	movf	printf@prec,w,c
  2085  0012EE  0D02               	mullw	2
  2086  0012F0  0E12               	movlw	low _dpowers
  2087  0012F2  24F3               	addwf	prodl,w,c
  2088  0012F4  6EF6               	movwf	tblptrl,c
  2089  0012F6  0E10               	movlw	high _dpowers
  2090  0012F8  20F4               	addwfc	prodh,w,c
  2091  0012FA  6EF7               	movwf	tblptrh,c
  2092  0012FC                     	if	0	;There are less than 3 active tblptr bytes
  2093  0012FC                     	endif
  2094  0012FC  0009               	tblrd		*+
  2095  0012FE  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2096  001302  000A               	tblrd		*-
  2097  001304  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2098  001308  C01D  F001         	movff	printf@val,___lwdiv@dividend
  2099  00130C  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2100  001310  EC03  F00C         	call	___lwdiv	;wreg free
  2101  001314  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2102  001318  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2103  00131C  0E00               	movlw	0
  2104  00131E  6E0B               	movwf	___lwmod@divisor+1,c
  2105  001320  0E0A               	movlw	10
  2106  001322  6E0A               	movwf	___lwmod@divisor,c
  2107  001324  EC9B  F00C         	call	___lwmod	;wreg free
  2108  001328  5008               	movf	?___lwmod,w,c
  2109  00132A  0F30               	addlw	48
  2110  00132C  6E22               	movwf	printf@c,c
  2111                           
  2112                           ;doprnt.c: 1491: break;
  2113  00132E  D02B               	goto	l1501
  2114  001330                     l1493:
  2115                           
  2116                           ;doprnt.c: 1499: {
  2117                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2118  001330  C01D  F001         	movff	printf@val,___lwdiv@dividend
  2119  001334  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2120  001338  501C               	movf	printf@prec,w,c
  2121  00133A  0D02               	mullw	2
  2122  00133C  0E1C               	movlw	low _hexpowers
  2123  00133E  24F3               	addwf	prodl,w,c
  2124  001340  6EF6               	movwf	tblptrl,c
  2125  001342  0E10               	movlw	high _hexpowers
  2126  001344  20F4               	addwfc	prodh,w,c
  2127  001346  6EF7               	movwf	tblptrh,c
  2128  001348                     	if	0	;There are less than 3 active tblptr bytes
  2129  001348                     	endif
  2130  001348  0009               	tblrd		*+
  2131  00134A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2132  00134E  000A               	tblrd		*-
  2133  001350  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2134  001354  EC03  F00C         	call	___lwdiv	;wreg free
  2135  001358  5001               	movf	?___lwdiv,w,c
  2136  00135A  0B0F               	andlw	15
  2137  00135C  6E19               	movwf	printf@idx,c
  2138                           
  2139                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2140  00135E  5019               	movf	printf@idx,w,c
  2141  001360  0D01               	mullw	1
  2142  001362  0E57               	movlw	low STR_8
  2143  001364  24F3               	addwf	prodl,w,c
  2144  001366  6EF6               	movwf	tblptrl,c
  2145  001368  0E10               	movlw	high STR_8
  2146  00136A  20F4               	addwfc	prodh,w,c
  2147  00136C  6EF7               	movwf	tblptrh,c
  2148  00136E                     	if	0	;There are less than 3 active tblptr bytes
  2149  00136E                     	endif
  2150  00136E  0008               	tblrd		*
  2151  001370  CFF5 F022          	movff	tablat,printf@c
  2152                           
  2153                           ;doprnt.c: 1523: }
  2154                           
  2155                           ;doprnt.c: 1508: }
  2156                           ;doprnt.c: 1510: break;
  2157  001374  D008               	goto	l1501
  2158  001376                     l1499:
  2159  001376  501F               	movf	printf@flag,w,c
  2160  001378  0B80               	andlw	128
  2161                           
  2162                           ; Switch size 1, requested type "space"
  2163                           ; Number of cases is 2, Range of values is 0 to 128
  2164                           ; switch strategies available:
  2165                           ; Name         Instructions Cycles
  2166                           ; simple_byte            7     4 (average)
  2167                           ;	Chosen strategy is simple_byte
  2168  00137A  0A00               	xorlw	0	; case 0
  2169  00137C  B4D8               	btfsc	status,2,c
  2170  00137E  D7B6               	goto	l1491
  2171  001380  0A80               	xorlw	128	; case 128
  2172  001382  B4D8               	btfsc	status,2,c
  2173  001384  D7D5               	goto	l1493
  2174  001386                     l1501:
  2175                           
  2176                           ;doprnt.c: 1524: (putch(c) );
  2177  001386  5022               	movf	printf@c,w,c
  2178  001388  ECFA  F00C         	call	_putch
  2179  00138C                     l1503:
  2180  00138C  061C               	decf	printf@prec,f,c
  2181  00138E  281C               	incf	printf@prec,w,c
  2182  001390  A4D8               	btfss	status,2,c
  2183  001392  D7F1               	goto	l1499
  2184  001394                     l1505:
  2185  001394  C00D  FFF6         	movff	printf@f,tblptrl
  2186  001398  C00E  FFF7         	movff	printf@f+1,tblptrh
  2187  00139C  4A0D               	infsnz	printf@f,f,c
  2188  00139E  2A0E               	incf	printf@f+1,f,c
  2189  0013A0                     	if	0	;tblptru may be non-zero
  2190  0013A0                     	endif
  2191  0013A0                     	if	0	;tblptru may be non-zero
  2192  0013A0                     	endif
  2193  0013A0  0008               	tblrd		*
  2194  0013A2  CFF5 F022          	movff	tablat,printf@c
  2195  0013A6  5022               	movf	printf@c,w,c
  2196  0013A8  B4D8               	btfsc	status,2,c
  2197  0013AA  0012               	return	
  2198  0013AC  D67F               	goto	l1379
  2199  0013AE                     __end_of_printf:
  2200                           	opt stack 0
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           prodh	equ	0xFF4
  2206                           prodl	equ	0xFF3
  2207                           intcon2	equ	0xFF1
  2208                           wreg	equ	0xFE8
  2209                           indf2	equ	0xFDF
  2210                           postinc2	equ	0xFDE
  2211                           postdec2	equ	0xFDD
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _putch *****************
  2217 ;; Defined at:
  2218 ;;		line 31 in file "lcd.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  data            1    wreg     unsigned char 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  data            1    2[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  1    wreg      void 
  2225 ;; Registers used:
  2226 ;;		wreg, status,2, status,0, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;Total ram usage:        1 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    1
  2239 ;; This function calls:
  2240 ;;		_lcdNibble
  2241 ;; This function is called by:
  2242 ;;		_printf
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text10
  2247  0019F4                     __ptext10:
  2248                           	opt stack 0
  2249  0019F4                     _putch:
  2250                           	opt stack 27
  2251                           
  2252                           ;incstack = 0
  2253                           ;putch@data stored from wreg
  2254  0019F4  6E03               	movwf	putch@data,c
  2255                           
  2256                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2257  0019F6  848C               	bsf	3980,2,c	;volatile
  2258                           
  2259                           ;lcd.c: 33: lcdNibble(data);
  2260  0019F8  5003               	movf	putch@data,w,c
  2261  0019FA  EC2C  F00C         	call	_lcdNibble
  2262  0019FE  0012               	return		;funcret
  2263  001A00                     __end_of_putch:
  2264                           	opt stack 0
  2265                           tblptru	equ	0xFF8
  2266                           tblptrh	equ	0xFF7
  2267                           tblptrl	equ	0xFF6
  2268                           tablat	equ	0xFF5
  2269                           prodh	equ	0xFF4
  2270                           prodl	equ	0xFF3
  2271                           intcon2	equ	0xFF1
  2272                           wreg	equ	0xFE8
  2273                           indf2	equ	0xFDF
  2274                           postinc2	equ	0xFDE
  2275                           postdec2	equ	0xFDD
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _isdigit *****************
  2281 ;; Defined at:
  2282 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  c               1    wreg     unsigned char 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  c               1    2[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2300 ;;Total ram usage:        3 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_printf
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text11
  2310  0019C4                     __ptext11:
  2311                           	opt stack 0
  2312  0019C4                     _isdigit:
  2313                           	opt stack 28
  2314                           
  2315                           ;incstack = 0
  2316                           ;isdigit@c stored from wreg
  2317  0019C4  6E03               	movwf	isdigit@c,c
  2318  0019C6  0E00               	movlw	0
  2319  0019C8  6E02               	movwf	_isdigit$545,c
  2320  0019CA  0E3A               	movlw	58
  2321  0019CC  6003               	cpfslt	isdigit@c,c
  2322  0019CE  D005               	goto	l1311
  2323  0019D0  0E2F               	movlw	47
  2324  0019D2  6403               	cpfsgt	isdigit@c,c
  2325  0019D4  D002               	goto	l1311
  2326  0019D6  0E01               	movlw	1
  2327  0019D8  6E02               	movwf	_isdigit$545,c
  2328  0019DA                     l1311:
  2329  0019DA  C002  F001         	movff	_isdigit$545,??_isdigit
  2330  0019DE  3001               	rrcf	??_isdigit,w,c
  2331  0019E0  0012               	return	
  2332  0019E2                     __end_of_isdigit:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           prodh	equ	0xFF4
  2339                           prodl	equ	0xFF3
  2340                           intcon2	equ	0xFF1
  2341                           wreg	equ	0xFE8
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function ___wmul *****************
  2350 ;; Defined at:
  2351 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  multiplier      2    0[COMRAM] unsigned int 
  2354 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  product         2    4[COMRAM] unsigned int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  2    0[COMRAM] unsigned int 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, prodl, prodh
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2366 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;Total ram usage:        6 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_time_difference
  2376 ;;		_printf
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text12
  2381  00199E                     __ptext12:
  2382                           	opt stack 0
  2383  00199E                     ___wmul:
  2384                           	opt stack 29
  2385                           
  2386                           ;incstack = 0
  2387  00199E  5001               	movf	___wmul@multiplier,w,c
  2388  0019A0  0203               	mulwf	___wmul@multiplicand,c
  2389  0019A2  CFF3 F005          	movff	prodl,___wmul@product
  2390  0019A6  CFF4 F006          	movff	prodh,___wmul@product+1
  2391  0019AA  5001               	movf	___wmul@multiplier,w,c
  2392  0019AC  0204               	mulwf	___wmul@multiplicand+1,c
  2393  0019AE  50F3               	movf	prodl,w,c
  2394  0019B0  2606               	addwf	___wmul@product+1,f,c
  2395  0019B2  5002               	movf	___wmul@multiplier+1,w,c
  2396  0019B4  0203               	mulwf	___wmul@multiplicand,c
  2397  0019B6  50F3               	movf	prodl,w,c
  2398  0019B8  2606               	addwf	___wmul@product+1,f,c
  2399  0019BA  C005  F001         	movff	___wmul@product,?___wmul
  2400  0019BE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2401  0019C2  0012               	return	
  2402  0019C4                     __end_of___wmul:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           tblptrh	equ	0xFF7
  2406                           tblptrl	equ	0xFF6
  2407                           tablat	equ	0xFF5
  2408                           prodh	equ	0xFF4
  2409                           prodl	equ	0xFF3
  2410                           intcon2	equ	0xFF1
  2411                           wreg	equ	0xFE8
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           fsr2h	equ	0xFDA
  2416                           fsr2l	equ	0xFD9
  2417                           status	equ	0xFD8
  2418                           
  2419 ;; *************** function ___lwmod *****************
  2420 ;; Defined at:
  2421 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  dividend        2    7[COMRAM] unsigned int 
  2424 ;;  divisor         2    9[COMRAM] unsigned int 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  counter         1   11[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  2    7[COMRAM] unsigned int 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:        5 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_printf
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text13
  2450  001936                     __ptext13:
  2451                           	opt stack 0
  2452  001936                     ___lwmod:
  2453                           	opt stack 28
  2454                           
  2455                           ;incstack = 0
  2456  001936  500A               	movf	___lwmod@divisor,w,c
  2457  001938  100B               	iorwf	___lwmod@divisor+1,w,c
  2458  00193A  B4D8               	btfsc	status,2,c
  2459  00193C  D018               	goto	l660
  2460  00193E  0E01               	movlw	1
  2461  001940  6E0C               	movwf	___lwmod@counter,c
  2462  001942  D004               	goto	l1349
  2463  001944                     l1347:
  2464  001944  90D8               	bcf	status,0,c
  2465  001946  360A               	rlcf	___lwmod@divisor,f,c
  2466  001948  360B               	rlcf	___lwmod@divisor+1,f,c
  2467  00194A  2A0C               	incf	___lwmod@counter,f,c
  2468  00194C                     l1349:
  2469  00194C  AE0B               	btfss	___lwmod@divisor+1,7,c
  2470  00194E  D7FA               	goto	l1347
  2471  001950                     l1351:
  2472  001950  500A               	movf	___lwmod@divisor,w,c
  2473  001952  5C08               	subwf	___lwmod@dividend,w,c
  2474  001954  500B               	movf	___lwmod@divisor+1,w,c
  2475  001956  5809               	subwfb	___lwmod@dividend+1,w,c
  2476  001958  A0D8               	btfss	status,0,c
  2477  00195A  D004               	goto	l1355
  2478  00195C  500A               	movf	___lwmod@divisor,w,c
  2479  00195E  5E08               	subwf	___lwmod@dividend,f,c
  2480  001960  500B               	movf	___lwmod@divisor+1,w,c
  2481  001962  5A09               	subwfb	___lwmod@dividend+1,f,c
  2482  001964                     l1355:
  2483  001964  90D8               	bcf	status,0,c
  2484  001966  320B               	rrcf	___lwmod@divisor+1,f,c
  2485  001968  320A               	rrcf	___lwmod@divisor,f,c
  2486  00196A  2E0C               	decfsz	___lwmod@counter,f,c
  2487  00196C  D7F1               	goto	l1351
  2488  00196E                     l660:
  2489  00196E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2490  001972  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2491  001976  0012               	return		;funcret
  2492  001978                     __end_of___lwmod:
  2493                           	opt stack 0
  2494                           tblptru	equ	0xFF8
  2495                           tblptrh	equ	0xFF7
  2496                           tblptrl	equ	0xFF6
  2497                           tablat	equ	0xFF5
  2498                           prodh	equ	0xFF4
  2499                           prodl	equ	0xFF3
  2500                           intcon2	equ	0xFF1
  2501                           wreg	equ	0xFE8
  2502                           indf2	equ	0xFDF
  2503                           postinc2	equ	0xFDE
  2504                           postdec2	equ	0xFDD
  2505                           fsr2h	equ	0xFDA
  2506                           fsr2l	equ	0xFD9
  2507                           status	equ	0xFD8
  2508                           
  2509 ;; *************** function ___lwdiv *****************
  2510 ;; Defined at:
  2511 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  dividend        2    0[COMRAM] unsigned int 
  2514 ;;  divisor         2    2[COMRAM] unsigned int 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  quotient        2    4[COMRAM] unsigned int 
  2517 ;;  counter         1    6[COMRAM] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  2    0[COMRAM] unsigned int 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;Total ram usage:        7 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_printf
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text14
  2541  001806                     __ptext14:
  2542                           	opt stack 0
  2543  001806                     ___lwdiv:
  2544                           	opt stack 28
  2545                           
  2546                           ;incstack = 0
  2547  001806  0E00               	movlw	0
  2548  001808  6E06               	movwf	___lwdiv@quotient+1,c
  2549  00180A  0E00               	movlw	0
  2550  00180C  6E05               	movwf	___lwdiv@quotient,c
  2551  00180E  5003               	movf	___lwdiv@divisor,w,c
  2552  001810  1004               	iorwf	___lwdiv@divisor+1,w,c
  2553  001812  B4D8               	btfsc	status,2,c
  2554  001814  D01C               	goto	l650
  2555  001816  0E01               	movlw	1
  2556  001818  6E07               	movwf	___lwdiv@counter,c
  2557  00181A  D004               	goto	l1329
  2558  00181C                     l1327:
  2559  00181C  90D8               	bcf	status,0,c
  2560  00181E  3603               	rlcf	___lwdiv@divisor,f,c
  2561  001820  3604               	rlcf	___lwdiv@divisor+1,f,c
  2562  001822  2A07               	incf	___lwdiv@counter,f,c
  2563  001824                     l1329:
  2564  001824  AE04               	btfss	___lwdiv@divisor+1,7,c
  2565  001826  D7FA               	goto	l1327
  2566  001828                     l1331:
  2567  001828  90D8               	bcf	status,0,c
  2568  00182A  3605               	rlcf	___lwdiv@quotient,f,c
  2569  00182C  3606               	rlcf	___lwdiv@quotient+1,f,c
  2570  00182E  5003               	movf	___lwdiv@divisor,w,c
  2571  001830  5C01               	subwf	___lwdiv@dividend,w,c
  2572  001832  5004               	movf	___lwdiv@divisor+1,w,c
  2573  001834  5802               	subwfb	___lwdiv@dividend+1,w,c
  2574  001836  A0D8               	btfss	status,0,c
  2575  001838  D005               	goto	l1339
  2576  00183A  5003               	movf	___lwdiv@divisor,w,c
  2577  00183C  5E01               	subwf	___lwdiv@dividend,f,c
  2578  00183E  5004               	movf	___lwdiv@divisor+1,w,c
  2579  001840  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2580  001842  8005               	bsf	___lwdiv@quotient,0,c
  2581  001844                     l1339:
  2582  001844  90D8               	bcf	status,0,c
  2583  001846  3204               	rrcf	___lwdiv@divisor+1,f,c
  2584  001848  3203               	rrcf	___lwdiv@divisor,f,c
  2585  00184A  2E07               	decfsz	___lwdiv@counter,f,c
  2586  00184C  D7ED               	goto	l1331
  2587  00184E                     l650:
  2588  00184E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2589  001852  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2590  001856  0012               	return		;funcret
  2591  001858                     __end_of___lwdiv:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           intcon2	equ	0xFF1
  2600                           wreg	equ	0xFE8
  2601                           indf2	equ	0xFDF
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function _initLCD *****************
  2609 ;; Defined at:
  2610 ;;		line 14 in file "lcd.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, status,2, status,0, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;Total ram usage:        1 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    2
  2631 ;; This function calls:
  2632 ;;		_lcdInst
  2633 ;; This function is called by:
  2634 ;;		_main
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text15
  2639  0018A6                     __ptext15:
  2640                           	opt stack 0
  2641  0018A6                     _initLCD:
  2642                           	opt stack 28
  2643                           
  2644                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2645                           
  2646                           ;incstack = 0
  2647  0018A6  0E27               	movlw	39
  2648  0018A8  6E04               	movwf	??_initLCD& (0+255),c
  2649  0018AA  0EF5               	movlw	245
  2650  0018AC                     u997:
  2651  0018AC  2EE8               	decfsz	wreg,f,c
  2652  0018AE  D7FE               	bra	u997
  2653  0018B0  2E04               	decfsz	??_initLCD& (0+255),f,c
  2654  0018B2  D7FC               	bra	u997
  2655  0018B4  F000               	nop	
  2656                           
  2657                           ;lcd.c: 16: lcdInst(0b00110011);
  2658  0018B6  0E33               	movlw	51
  2659  0018B8  EC00  F00D         	call	_lcdInst
  2660                           
  2661                           ;lcd.c: 17: lcdInst(0b00110011);
  2662  0018BC  0E33               	movlw	51
  2663  0018BE  EC00  F00D         	call	_lcdInst
  2664                           
  2665                           ;lcd.c: 18: lcdInst(0b00110010);
  2666  0018C2  0E32               	movlw	50
  2667  0018C4  EC00  F00D         	call	_lcdInst
  2668                           
  2669                           ;lcd.c: 19: lcdInst(0b00101000);
  2670  0018C8  0E28               	movlw	40
  2671  0018CA  EC00  F00D         	call	_lcdInst
  2672                           
  2673                           ;lcd.c: 20: lcdInst(0b00001111);
  2674  0018CE  0E0F               	movlw	15
  2675  0018D0  EC00  F00D         	call	_lcdInst
  2676                           
  2677                           ;lcd.c: 21: lcdInst(0b00000110);
  2678  0018D4  0E06               	movlw	6
  2679  0018D6  EC00  F00D         	call	_lcdInst
  2680                           
  2681                           ;lcd.c: 22: lcdInst(0b00000001);
  2682  0018DA  0E01               	movlw	1
  2683  0018DC  EC00  F00D         	call	_lcdInst
  2684                           
  2685                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
  2686  0018E0  0E27               	movlw	39
  2687  0018E2  6E04               	movwf	??_initLCD& (0+255),c
  2688  0018E4  0EF5               	movlw	245
  2689  0018E6                     u1007:
  2690  0018E6  2EE8               	decfsz	wreg,f,c
  2691  0018E8  D7FE               	bra	u1007
  2692  0018EA  2E04               	decfsz	??_initLCD& (0+255),f,c
  2693  0018EC  D7FC               	bra	u1007
  2694  0018EE  F000               	nop	
  2695  0018F0  0012               	return		;funcret
  2696  0018F2                     __end_of_initLCD:
  2697                           	opt stack 0
  2698                           tblptru	equ	0xFF8
  2699                           tblptrh	equ	0xFF7
  2700                           tblptrl	equ	0xFF6
  2701                           tablat	equ	0xFF5
  2702                           prodh	equ	0xFF4
  2703                           prodl	equ	0xFF3
  2704                           intcon2	equ	0xFF1
  2705                           wreg	equ	0xFE8
  2706                           indf2	equ	0xFDF
  2707                           postinc2	equ	0xFDE
  2708                           postdec2	equ	0xFDD
  2709                           fsr2h	equ	0xFDA
  2710                           fsr2l	equ	0xFD9
  2711                           status	equ	0xFD8
  2712                           
  2713 ;; *************** function _lcdInst *****************
  2714 ;; Defined at:
  2715 ;;		line 26 in file "lcd.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;  data            1    wreg     unsigned char 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  data            1    2[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;Total ram usage:        1 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    1
  2736 ;; This function calls:
  2737 ;;		_lcdNibble
  2738 ;; This function is called by:
  2739 ;;		_main
  2740 ;;		_stand_by
  2741 ;;		_initLCD
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text16
  2746  001A00                     __ptext16:
  2747                           	opt stack 0
  2748  001A00                     _lcdInst:
  2749                           	opt stack 28
  2750                           
  2751                           ;incstack = 0
  2752                           ;lcdInst@data stored from wreg
  2753  001A00  6E03               	movwf	lcdInst@data,c
  2754                           
  2755                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  2756  001A02  948C               	bcf	3980,2,c	;volatile
  2757                           
  2758                           ;lcd.c: 28: lcdNibble(data);
  2759  001A04  5003               	movf	lcdInst@data,w,c
  2760  001A06  EC2C  F00C         	call	_lcdNibble
  2761  001A0A  0012               	return		;funcret
  2762  001A0C                     __end_of_lcdInst:
  2763                           	opt stack 0
  2764                           tblptru	equ	0xFF8
  2765                           tblptrh	equ	0xFF7
  2766                           tblptrl	equ	0xFF6
  2767                           tablat	equ	0xFF5
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           intcon2	equ	0xFF1
  2771                           wreg	equ	0xFE8
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _lcdNibble *****************
  2780 ;; Defined at:
  2781 ;;		line 36 in file "lcd.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  data            1    wreg     unsigned char 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  data            1    1[COMRAM] unsigned char 
  2786 ;;  temp            1    0[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;Total ram usage:        2 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_lcdInst
  2806 ;;		_putch
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text17
  2811  001858                     __ptext17:
  2812                           	opt stack 0
  2813  001858                     _lcdNibble:
  2814                           	opt stack 27
  2815                           
  2816                           ;incstack = 0
  2817                           ;lcdNibble@data stored from wreg
  2818  001858  6E02               	movwf	lcdNibble@data,c
  2819                           
  2820                           ;lcd.c: 38: char temp = data & 0xF0;
  2821  00185A  5002               	movf	lcdNibble@data,w,c
  2822  00185C  0BF0               	andlw	240
  2823  00185E  6E01               	movwf	lcdNibble@temp,c
  2824                           
  2825                           ;lcd.c: 39: LATD = LATD & 0x0F;
  2826  001860  508C               	movf	3980,w,c	;volatile
  2827  001862  0B0F               	andlw	15
  2828  001864  6E8C               	movwf	3980,c	;volatile
  2829                           
  2830                           ;lcd.c: 40: LATD = temp | LATD;
  2831  001866  5001               	movf	lcdNibble@temp,w,c
  2832  001868  108C               	iorwf	3980,w,c	;volatile
  2833  00186A  6E8C               	movwf	3980,c	;volatile
  2834                           
  2835                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  2836  00186C  968C               	bcf	3980,3,c	;volatile
  2837                           
  2838                           ;lcd.c: 43: _delay((unsigned long)((30)*(8000000/4000000.0)));
  2839  00186E  0E14               	movlw	20
  2840  001870                     u1017:
  2841  001870  2EE8               	decfsz	wreg,f,c
  2842  001872  D7FE               	bra	u1017
  2843                           
  2844                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  2845  001874  868C               	bsf	3980,3,c	;volatile
  2846                           
  2847                           ;lcd.c: 45: _delay((unsigned long)((30)*(8000000/4000000.0)));
  2848  001876  0E14               	movlw	20
  2849  001878                     u1027:
  2850  001878  2EE8               	decfsz	wreg,f,c
  2851  00187A  D7FE               	bra	u1027
  2852                           
  2853                           ;lcd.c: 47: data = data << 4;
  2854  00187C  3802               	swapf	lcdNibble@data,w,c
  2855  00187E  0BF0               	andlw	240
  2856  001880  6E02               	movwf	lcdNibble@data,c
  2857                           
  2858                           ;lcd.c: 49: temp = data & 0xF0;
  2859  001882  5002               	movf	lcdNibble@data,w,c
  2860  001884  0BF0               	andlw	240
  2861  001886  6E01               	movwf	lcdNibble@temp,c
  2862                           
  2863                           ;lcd.c: 50: LATD = LATD & 0x0F;
  2864  001888  508C               	movf	3980,w,c	;volatile
  2865  00188A  0B0F               	andlw	15
  2866  00188C  6E8C               	movwf	3980,c	;volatile
  2867                           
  2868                           ;lcd.c: 51: LATD = temp | LATD;
  2869  00188E  5001               	movf	lcdNibble@temp,w,c
  2870  001890  108C               	iorwf	3980,w,c	;volatile
  2871  001892  6E8C               	movwf	3980,c	;volatile
  2872                           
  2873                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  2874  001894  968C               	bcf	3980,3,c	;volatile
  2875                           
  2876                           ;lcd.c: 54: _delay((unsigned long)((30)*(8000000/4000000.0)));
  2877  001896  0E14               	movlw	20
  2878  001898                     u1037:
  2879  001898  2EE8               	decfsz	wreg,f,c
  2880  00189A  D7FE               	bra	u1037
  2881                           
  2882                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  2883  00189C  868C               	bsf	3980,3,c	;volatile
  2884                           
  2885                           ;lcd.c: 56: _delay((unsigned long)((30)*(8000000/4000000.0)));
  2886  00189E  0E14               	movlw	20
  2887  0018A0                     u1047:
  2888  0018A0  2EE8               	decfsz	wreg,f,c
  2889  0018A2  D7FE               	bra	u1047
  2890  0018A4  0012               	return		;funcret
  2891  0018A6                     __end_of_lcdNibble:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           intcon2	equ	0xFF1
  2900                           wreg	equ	0xFE8
  2901                           indf2	equ	0xFDF
  2902                           postinc2	equ	0xFDE
  2903                           postdec2	equ	0xFDD
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _delay *****************
  2909 ;; Defined at:
  2910 ;;		line 154 in file "main.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  seconds         2    0[COMRAM] int 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  i               1    5[COMRAM] unsigned char 
  2915 ;;  i               2    3[COMRAM] int 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2, status,0
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2929 ;;Total ram usage:        6 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text18
  2939  0018F2                     __ptext18:
  2940                           	opt stack 0
  2941  0018F2                     _delay:
  2942                           	opt stack 30
  2943                           
  2944                           ;main.c: 155: for (int i = 0; i <= seconds; i ++) {
  2945                           
  2946                           ;incstack = 0
  2947  0018F2  0E00               	movlw	0
  2948  0018F4  6E05               	movwf	delay@i+1,c
  2949  0018F6  0E00               	movlw	0
  2950  0018F8  6E04               	movwf	delay@i,c
  2951  0018FA  D012               	goto	l1563
  2952  0018FC                     l1551:
  2953                           
  2954                           ;main.c: 156: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(8000000/4000.0)));};
  2955  0018FC  0E00               	movlw	0
  2956  0018FE  6E06               	movwf	delay@i_197,c
  2957  001900                     l1553:
  2958  001900  0E63               	movlw	99
  2959  001902  6406               	cpfsgt	delay@i_197,c
  2960  001904  D001               	goto	l1557
  2961  001906  D00A               	goto	l1561
  2962  001908                     l1557:
  2963  001908  0E1A               	movlw	26
  2964  00190A  6E03               	movwf	??_delay& (0+255),c
  2965  00190C  0EF8               	movlw	248
  2966  00190E                     u1057:
  2967  00190E  2EE8               	decfsz	wreg,f,c
  2968  001910  D7FE               	bra	u1057
  2969  001912  2E03               	decfsz	??_delay& (0+255),f,c
  2970  001914  D7FC               	bra	u1057
  2971  001916  D000               	nop2	
  2972  001918  2A06               	incf	delay@i_197,f,c
  2973  00191A  D7F2               	goto	l1553
  2974  00191C                     l1561:
  2975  00191C  4A04               	infsnz	delay@i,f,c
  2976  00191E  2A05               	incf	delay@i+1,f,c
  2977  001920                     l1563:
  2978  001920  5004               	movf	delay@i,w,c
  2979  001922  5C01               	subwf	delay@seconds,w,c
  2980  001924  5002               	movf	delay@seconds+1,w,c
  2981  001926  0A80               	xorlw	128
  2982  001928  6E03               	movwf	??_delay& (0+255),c
  2983  00192A  5005               	movf	delay@i+1,w,c
  2984  00192C  0A80               	xorlw	128
  2985  00192E  5803               	subwfb	??_delay& (0+255),w,c
  2986  001930  A0D8               	btfss	status,0,c
  2987  001932  0012               	return	
  2988  001934  D7E3               	goto	l1551
  2989  001936                     __end_of_delay:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           intcon2	equ	0xFF1
  2998                           wreg	equ	0xFE8
  2999                           indf2	equ	0xFDF
  3000                           postinc2	equ	0xFDE
  3001                           postdec2	equ	0xFDD
  3002                           fsr2h	equ	0xFDA
  3003                           fsr2l	equ	0xFD9
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _I2C_Master_Init *****************
  3007 ;; Defined at:
  3008 ;;		line 13 in file "I2C.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;  c               4   13[COMRAM] const unsigned long 
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;		None
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, status,2, status,0, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;Total ram usage:        8 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    1
  3029 ;; This function calls:
  3030 ;;		___lldiv
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text19
  3037  0017AC                     __ptext19:
  3038                           	opt stack 0
  3039  0017AC                     _I2C_Master_Init:
  3040                           	opt stack 29
  3041                           
  3042                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3043                           
  3044                           ;incstack = 0
  3045  0017AC  0E00               	movlw	0
  3046  0017AE  6EC7               	movwf	4039,c	;volatile
  3047                           
  3048                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3049  0017B0  0E28               	movlw	40
  3050  0017B2  6EC6               	movwf	4038,c	;volatile
  3051                           
  3052                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3053  0017B4  0E00               	movlw	0
  3054  0017B6  6EC5               	movwf	4037,c	;volatile
  3055                           
  3056                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  3057  0017B8  0E00               	movlw	0
  3058  0017BA  6E01               	movwf	___lldiv@dividend,c
  3059  0017BC  0E12               	movlw	18
  3060  0017BE  6E02               	movwf	___lldiv@dividend+1,c
  3061  0017C0  0E7A               	movlw	122
  3062  0017C2  6E03               	movwf	___lldiv@dividend+2,c
  3063  0017C4  0E00               	movlw	0
  3064  0017C6  6E04               	movwf	___lldiv@dividend+3,c
  3065  0017C8  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3066  0017CC  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3067  0017D0  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3068  0017D4  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3069  0017D8  0E02               	movlw	2
  3070  0017DA                     u885:
  3071  0017DA  90D8               	bcf	status,0,c
  3072  0017DC  3612               	rlcf	??_I2C_Master_Init,f,c
  3073  0017DE  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3074  0017E0  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3075  0017E2  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3076  0017E4  2EE8               	decfsz	wreg,f,c
  3077  0017E6  D7F9               	goto	u885
  3078  0017E8  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3079  0017EC  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3080  0017F0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3081  0017F4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3082  0017F8  EC5C  F00B         	call	___lldiv	;wreg free
  3083  0017FC  0401               	decf	?___lldiv,w,c
  3084  0017FE  6EC8               	movwf	4040,c	;volatile
  3085                           
  3086                           ;I2C.c: 20: TRISC3 = 1;
  3087  001800  8694               	bsf	3988,3,c	;volatile
  3088                           
  3089                           ;I2C.c: 21: TRISC4 = 1;
  3090  001802  8894               	bsf	3988,4,c	;volatile
  3091  001804  0012               	return		;funcret
  3092  001806                     __end_of_I2C_Master_Init:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon2	equ	0xFF1
  3101                           wreg	equ	0xFE8
  3102                           indf2	equ	0xFDF
  3103                           postinc2	equ	0xFDE
  3104                           postdec2	equ	0xFDD
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function ___lldiv *****************
  3110 ;; Defined at:
  3111 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  dividend        4    0[COMRAM] unsigned long 
  3114 ;;  divisor         4    4[COMRAM] unsigned long 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  quotient        4    8[COMRAM] unsigned long 
  3117 ;;  counter         1   12[COMRAM] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  4    0[COMRAM] unsigned long 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:       13 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_I2C_Master_Init
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text20
  3141  0016B8                     __ptext20:
  3142                           	opt stack 0
  3143  0016B8                     ___lldiv:
  3144                           	opt stack 29
  3145                           
  3146                           ;incstack = 0
  3147  0016B8  0E00               	movlw	0
  3148  0016BA  6E09               	movwf	___lldiv@quotient,c
  3149  0016BC  0E00               	movlw	0
  3150  0016BE  6E0A               	movwf	___lldiv@quotient+1,c
  3151  0016C0  0E00               	movlw	0
  3152  0016C2  6E0B               	movwf	___lldiv@quotient+2,c
  3153  0016C4  0E00               	movlw	0
  3154  0016C6  6E0C               	movwf	___lldiv@quotient+3,c
  3155  0016C8  5005               	movf	___lldiv@divisor,w,c
  3156  0016CA  1006               	iorwf	___lldiv@divisor+1,w,c
  3157  0016CC  1007               	iorwf	___lldiv@divisor+2,w,c
  3158  0016CE  1008               	iorwf	___lldiv@divisor+3,w,c
  3159  0016D0  B4D8               	btfsc	status,2,c
  3160  0016D2  D02A               	goto	l597
  3161  0016D4  0E01               	movlw	1
  3162  0016D6  6E0D               	movwf	___lldiv@counter,c
  3163  0016D8  D006               	goto	l1515
  3164  0016DA                     l1513:
  3165  0016DA  90D8               	bcf	status,0,c
  3166  0016DC  3605               	rlcf	___lldiv@divisor,f,c
  3167  0016DE  3606               	rlcf	___lldiv@divisor+1,f,c
  3168  0016E0  3607               	rlcf	___lldiv@divisor+2,f,c
  3169  0016E2  3608               	rlcf	___lldiv@divisor+3,f,c
  3170  0016E4  2A0D               	incf	___lldiv@counter,f,c
  3171  0016E6                     l1515:
  3172  0016E6  AE08               	btfss	___lldiv@divisor+3,7,c
  3173  0016E8  D7F8               	goto	l1513
  3174  0016EA                     l1517:
  3175  0016EA  90D8               	bcf	status,0,c
  3176  0016EC  3609               	rlcf	___lldiv@quotient,f,c
  3177  0016EE  360A               	rlcf	___lldiv@quotient+1,f,c
  3178  0016F0  360B               	rlcf	___lldiv@quotient+2,f,c
  3179  0016F2  360C               	rlcf	___lldiv@quotient+3,f,c
  3180  0016F4  5005               	movf	___lldiv@divisor,w,c
  3181  0016F6  5C01               	subwf	___lldiv@dividend,w,c
  3182  0016F8  5006               	movf	___lldiv@divisor+1,w,c
  3183  0016FA  5802               	subwfb	___lldiv@dividend+1,w,c
  3184  0016FC  5007               	movf	___lldiv@divisor+2,w,c
  3185  0016FE  5803               	subwfb	___lldiv@dividend+2,w,c
  3186  001700  5008               	movf	___lldiv@divisor+3,w,c
  3187  001702  5804               	subwfb	___lldiv@dividend+3,w,c
  3188  001704  A0D8               	btfss	status,0,c
  3189  001706  D009               	goto	l1525
  3190  001708  5005               	movf	___lldiv@divisor,w,c
  3191  00170A  5E01               	subwf	___lldiv@dividend,f,c
  3192  00170C  5006               	movf	___lldiv@divisor+1,w,c
  3193  00170E  5A02               	subwfb	___lldiv@dividend+1,f,c
  3194  001710  5007               	movf	___lldiv@divisor+2,w,c
  3195  001712  5A03               	subwfb	___lldiv@dividend+2,f,c
  3196  001714  5008               	movf	___lldiv@divisor+3,w,c
  3197  001716  5A04               	subwfb	___lldiv@dividend+3,f,c
  3198  001718  8009               	bsf	___lldiv@quotient,0,c
  3199  00171A                     l1525:
  3200  00171A  90D8               	bcf	status,0,c
  3201  00171C  3208               	rrcf	___lldiv@divisor+3,f,c
  3202  00171E  3207               	rrcf	___lldiv@divisor+2,f,c
  3203  001720  3206               	rrcf	___lldiv@divisor+1,f,c
  3204  001722  3205               	rrcf	___lldiv@divisor,f,c
  3205  001724  2E0D               	decfsz	___lldiv@counter,f,c
  3206  001726  D7E1               	goto	l1517
  3207  001728                     l597:
  3208  001728  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3209  00172C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3210  001730  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3211  001734  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3212  001738  0012               	return		;funcret
  3213  00173A                     __end_of___lldiv:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon2	equ	0xFF1
  3222                           wreg	equ	0xFE8
  3223                           indf2	equ	0xFDF
  3224                           postinc2	equ	0xFDE
  3225                           postdec2	equ	0xFDD
  3226                           fsr2h	equ	0xFDA
  3227                           fsr2l	equ	0xFD9
  3228                           status	equ	0xFD8
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon2	equ	0xFF1
  3236                           wreg	equ	0xFE8
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           
  3244                           	psect	rparam
  3245  0000                     tblptru	equ	0xFF8
  3246                           tblptrh	equ	0xFF7
  3247                           tblptrl	equ	0xFF6
  3248                           tablat	equ	0xFF5
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           intcon2	equ	0xFF1
  3252                           wreg	equ	0xFE8
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8


Data Sizes:
    Strings     117
    Constant    42
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64      64
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[22]), STR_6(CODE[22]), STR_5(CODE[3]), STR_4(CODE[12]), 
		 -> STR_3(CODE[11]), STR_2(CODE[15]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    time_difference@time2	PTR unsigned char  size(2) Largest target is 7
		 -> main@start_time(COMRAM[7]), 

    time_difference@time1	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(COMRAM[7]), 

    update_time@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@end_time(COMRAM[7]), main@start_time(COMRAM[7]), main@time(COMRAM[7]), 

    stand_by@time	PTR unsigned char  size(2) Largest target is 7
		 -> main@time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_stand_by
    _time_difference->___wmul
    _stand_by->_printf
    _update_time->_I2C_Master_Read
    _update_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    9251
                                             39 COMRAM    25    25      0
                    _I2C_Master_Init
                              _delay
                            _initLCD
                            _lcdInst
                             _printf
                           _stand_by
                    _time_difference
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _time_difference                                     10     6      4     828
                                              6 COMRAM    10     6      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _stand_by                                             5     3      2    3899
                                             34 COMRAM     5     3      2
                            _lcdInst
                             _printf
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          3     1      2     740
                                              3 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printf                                              31    23      8    2851
                                             12 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _delay                                                6     4      2     220
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _delay
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _stand_by
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _update_time
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _time_difference
     ___wmul
   _update_time
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     40      40       1       50.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 04 18:02:22 2017

              _update_time 173A                         l66 149E                         u30 1996  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l205 118E                        l149 19E2  
                      l650 184E                        l660 196E                        l903 1998  
                      l597 1728               __CFG_CPB$OFF 000000                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28                        u885 17DA  
                      u987 16AC                        u997 18AC                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1311 19DA  
                     l1331 1828                       l1403 115C                       l1501 1386  
                     l1327 181C                       l1351 1950                       l1503 138C  
                     l1423 11D6                       l1407 1160                       l1513 16DA  
                     l1329 1824                       l1425 11DA                       l1505 1394  
                     l1515 16E6                       l1339 1844                       l1355 1964  
                     l1347 1944                       l1419 11BC                       l1363 176E  
                     l1525 171A                       l1517 16EA                       l1349 194C  
                     l1461 1260                       l1437 1206                       l1453 1236  
                     l1373 1792                       l1551 18FC                       l1439 120A  
                     l1455 1246                       l1383 10BC                       l1367 1776  
                     l1561 191C                       l1553 1900                       l1481 12C0  
                     l1473 12A2                       l1465 1284                       l1385 10CA  
                     l1563 1920                       l1491 12EC                       l1467 128C  
                     l1395 10FE                       l1379 10AC                       l1557 1908  
                     l1493 1330                       l1485 12D4                       l1389 10D0  
                     l1479 12B8                       l1489 12E6                       l1499 1376  
                     l1587 13FA                       l1589 1406                       STR_1 1077  
                     STR_2 1068                       STR_3 1092                       STR_4 1086  
                     STR_5 109D                       STR_6 1041                       STR_7 102B  
                     STR_8 1057                       u1007 18E6                       u1017 1870  
                     u1027 1878                       u1037 1898                       u1047 18A0  
                     u1057 190E                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     _RCEN 007E2B                       _RSEN 007E29                       _main 13AE  
                     _keys 1001                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000           ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001               main@end_time 0038           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___lldiv 173A            __end_of___lwdiv 1858            __end_of___lwmod 1978  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1A0C  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_initLCD 18F2             __CFG_EBTRB$OFF 000000                      _delay 18F2  
          __end_of_dpowers 101C            __end_of_isdigit 19E2                      _putch 19F4  
                    main@d 003F                      tablat 000FF5                      status 000FD8  
             stand_by@time 0023             __CFG_PBADEN$ON 000000            __initialization 1A0C  
             __end_of_main 1524               __end_of_keys 1012               update_time@i 0006  
                   ??_main 0028              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0002                     ?_delay 0001         ??_I2C_Master_Start 0002  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0004  
                   ?_putch 0001                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9            update_time@time 0004  
           __CFG_XINST$OFF 000000                     ___wmul 199E             __CFG_STVREN$ON 000000  
                ??___lldiv 0009                  ??___lwdiv 0005                  ??___lwmod 000C  
                   delay@i 0004                  ??_lcdInst 0003                     _printf 10A2  
                ??_initLCD 0004                  ??_isdigit 0001            _time_difference 1524  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8           __end_of_stand_by 16B8                 __accesstop 0080  
  __end_of__initialization 1A0C              ___rparam_used 000001       time_difference@time1 0007  
     time_difference@time2 0009       __end_of_happynewyear 102B             __pcstackCOMRAM 0001  
             ?_update_time 0004              __end_of_delay 1936              __end_of_putch 1A00  
       __size_of_lcdNibble 004E                    ??_delay 0003                    ??_putch 0003  
       time_difference@sec 000F                    ?___wmul 0001    __end_of_time_difference 15F6  
                  ?_printf 000D                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7          __end_of_lcdNibble 18A6                    __Hparam 0000  
                  __Lparam 0000                  ?_stand_by 0023                    ___lldiv 16B8  
          __size_of___wmul 0026                    ___lwdiv 1806                    ___lwmod 1936  
             __psmallconst 1000                    __pcinit 1A0C                    __ramtop 1000  
                  _lcdInst 1A00                    __ptext0 13AE                    __ptext1 1524  
                  __ptext2 15F6                    __ptext3 173A                    __ptext4 1A16  
                  __ptext5 1A20                    __ptext6 1A28                    __ptext7 1978  
                  __ptext8 19E2                    __ptext9 10A2                 delay@i_197 0006  
          __size_of_printf 030C                    _initLCD 18A6          __end_of_hexpowers 1024  
                  _dpowers 1012                    _isdigit 19C4   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
     end_of_initialization 1A0C              __Lmediumconst 0000  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
                  printf@c 0022                    printf@f 000D           I2C_Master_Init@c 000E  
         I2C_Master_Read@a 0002                    postdec2 000FDD                    postinc2 000FDE  
               ??_stand_by 0025       __size_of_update_time 0072             main@start_time 0031  
         ?_time_difference 0007                  _PORTBbits 000F81               _happynewyear 1024  
              printf@width 0020             __end_of___wmul 19C4             __end_of_printf 13AE  
      start_initialization 1A0C          ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002  
        ??_I2C_Master_Wait 0001          ??_I2C_Master_Stop 0002                   ??___wmul 0005  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0015           _I2C_Master_Start 1A28  
         _I2C_Master_Write 1A16           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
                _lcdNibble 1858                   ?___lldiv 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008          __size_of_stand_by 00C2                   ?_lcdInst 0001  
                 ?_initLCD 0001                __smallconst 1000                   ?_isdigit 0001  
                _hexpowers 101C           ___lwdiv@quotient 0005             __size_of_delay 0044  
           __size_of_putch 000C               delay@seconds 0001             ___wmul@product 0005  
                 _LATDbits 000F8C           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
        ___wmul@multiplier 0001              lcdNibble@data 0002                 printf@flag 001F  
            lcdNibble@temp 0001                 printf@prec 001C        I2C_Master_Read@temp 0003  
                 __Hrparam 0000                   __Lrparam 0000              ??_update_time 0006  
       __CFG_BOREN$SBORDIS 000000           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                _isdigit$545 0002           __size_of_lcdInst 000C  
          _I2C_Master_Init 17AC            _I2C_Master_Read 1978           __size_of_initLCD 004C  
          _I2C_Master_Wait 19E2            _I2C_Master_Stop 1A20           __size_of_isdigit 001E  
          ___lwdiv@divisor 0003   __size_of_time_difference 00D2            ___lwdiv@counter 0007  
                 __ptext10 19F4                   __ptext11 19C4                   __ptext20 16B8  
                 __ptext12 199E                   __ptext13 1936                   __ptext14 1806  
                 __ptext15 18A6                   __ptext16 1A00                   __ptext17 1858  
                 __ptext18 18F2                   __ptext19 17AC              __size_of_main 0176  
              ??_lcdNibble 0001                   _stand_by 15F6                  printf@idx 0019  
                printf@val 001D                   main@time 002A        __end_of_update_time 17AC  
                putch@data 0003   __end_of_I2C_Master_Start 1A30   __end_of_I2C_Master_Write 1A20  
                 isdigit@c 0003           ___lwmod@dividend 0008           ___lldiv@dividend 0001  
                 printf@ap 001A    __end_of_I2C_Master_Init 1806    __end_of_I2C_Master_Read 199E  
  __end_of_I2C_Master_Wait 19F4    __end_of_I2C_Master_Stop 1A28                lcdInst@data 0003  
         ___lldiv@quotient 0009          I2C_Master_Write@d 0002            ___lwmod@divisor 000A  
          ___lwmod@counter 000C          ??_time_difference 000B  
